<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue原理</title>
      <link href="/posts/f82ea27.html"/>
      <url>/posts/f82ea27.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Vue原理"><a href="#一、Vue原理" class="headerlink" title="一、Vue原理"></a>一、Vue原理</h2><ul><li>响应式系统<ul><li>学习<code>Vue</code>中如何实现数据的响应式系统，从而达到数据驱动视图。</li></ul></li><li>vue中选项方法<ul><li>学习watch选项 $watch方法 computed选项 $set方法 $nextTick $mount方法的封装</li></ul></li><li>template 编译过程<ul><li>学习<code>Vue</code>内部是怎么把<code>template</code>模板编译成虚拟<code>DOM</code>,从而渲染出真实<code>DOM</code></li></ul></li><li>虚拟 dom 生成与更新<ul><li>学习什么是虚拟 DOM，以及<code>Vue</code>中的<code>DOM-Diff</code>原理</li></ul></li></ul><h2 id="二、Vue2-学习路线图"><a href="#二、Vue2-学习路线图" class="headerlink" title="二、Vue2 学习路线图"></a>二、Vue2 学习路线图</h2><p>下面这张流程图中表示了vue的关键部分的执行过程，和核心函数。我们可以根据这样一个过程来自己实现一个vue框架。</p><h6 id=""><a href="#" class="headerlink" title=""></a><img src="https://bu.dusays.com/2023/08/20/64e1c9eb42347.png" alt="image-20230704110034877-8439636.png"></h6><p>通过梳理Vue初始化的过程，我们发现实现一个类似于Vue的框架主要需要实现这几部分 响应式系统框架、虚拟dom编译渲染机制 MVVM更新机制，接下来我们先从最基本的响应式系统开始，自己动手写一个Vue的简单框架</p><p>【思考】Vue在初始化的过程中主要经历的哪些步骤</p><p>【回答】</p><p>1、初始化Vue构造函数，挂载属性 方法</p><p>2、模板编译成render函数</p><p>3、通过Watcher收集依赖</p><p>4、diff更新dom</p><p>5、渲染dom</p><p>【补充】vue是一个标准的MVVM框架么？</p><p>Vue 并不完全是一个MVVM框架MVVM只能数据驱动视图，视图更改数据，而不能通过其他方式操作数据。在vue中我们也可以自己手动修改数据，所以vue并不是一个完全意义上的MVVM框架。</p><h2 id="三、Vue2-响应式原理"><a href="#三、Vue2-响应式原理" class="headerlink" title="三、Vue2 响应式原理"></a>三、Vue2 响应式原理</h2><p>从这一小节开始我们带着大家实现一个Vue框架</p><p>我们先来看看面试宝典中的关于Vue响应式的八股文 （P143-4）</p><p><img src="https://bu.dusays.com/2023/08/20/64e1cb8bedb70.png" alt="image-20230712205031984.png"></p><p>相信绝大多数的同学看到这个八股文都会感觉头大。学完今天的内容，我们都会对怎么回答vue的响应式原理有了自己的理解。</p><p>下面我们一起来揭秘vue的响应式原理到底是怎么实现的！</p><h3 id="1、章节概述"><a href="#1、章节概述" class="headerlink" title="1、章节概述"></a>1、章节概述</h3><p>我们首先实现学习路线中第一条分支，从状态初始化到数据响应式的过程</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e7ec1b1.png" alt="image-20230712205309319.png"></p><p>所谓数据响应式就是<strong>能够使数据变化可以被检测并对这种变化做出响应的机制</strong>。MVVM框架中要解决的一个核心问题是连接数据层和视图层，通过<strong>数据驱动</strong>应用，数据变化，视图更新，要做到这点的就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9dc7f684.png" alt="data.png"></p><p>Vue 的响应式原理依赖于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>，Vue通过设定对象属性的 setter&#x2F;getter 方法来监听数据的变化，通过getter进行依赖收集，而每个setter方法就是一个观察者，在数据变更的时候通知订阅者更新视图。</p><p>所以在vue中的数据响应式原理主要是给data绑定一个观察着 observe 让数据变成可观察的，我们首先来看源码然后自己尝试手写一个observe</p><h3 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h3><p>在这一小节中我们开始自己实现一个Vue框架，通过Vue源码我们了解到Vue使用的rollup构建工具进行打包</p><p><strong>&#x2F;package.json</strong></p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9dd5dfad.png" alt="image-20230419133024189.png"></p><p>这里我们也使用Rollup实现项目打包，我们之前有学习过脚手架工具webpack，Rollup和webpack的区别在于项目类代码中有大量的代码拆分，构建项目类型的应用显然webpack更为合适，如果想要构建js类库将多个模块打包成一个大的文件rollpu更加合适，同时rollup中提供的tree-shake可以帮助我们自动删除冗余代码</p><table><thead><tr><th><strong>Webpack</strong></th><th><strong>Rollup</strong></th></tr></thead><tbody><tr><td>vue-cli, create-react-app 各类应用脚手架</td><td>react，vue，three.js，<a href="https://so.csdn.net/so/search?q=D3&spm=1001.2101.3001.7020">D3</a>，moment</td></tr></tbody></table><h4 id="1、源码工程的初始化"><a href="#1、源码工程的初始化" class="headerlink" title="1、源码工程的初始化"></a>1、源码工程的初始化</h4><h5 id="1、新建项目文件夹，在文件夹下初始化工程"><a href="#1、新建项目文件夹，在文件夹下初始化工程" class="headerlink" title="1、新建项目文件夹，在文件夹下初始化工程"></a>1、新建项目文件夹，在文件夹下初始化工程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9df6c2cb.png" alt="image-20230419134428522.png"></p><p>获得package.json</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e037863.png" alt="image-20230419134457299.png"></p><h5 id="2、安装Rollup打包依赖"><a href="#2、安装Rollup打包依赖" class="headerlink" title="2、安装Rollup打包依赖"></a>2、安装Rollup打包依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1，安装 rollup：用于 Vue 源码的打包构建</span><br><span class="line">npm install rollup</span><br><span class="line"></span><br><span class="line">// 2，使用 babel：需要安装核心模块 @babel/core；</span><br><span class="line">npm install @babel/core</span><br><span class="line"></span><br><span class="line">// 3，rollup 与 babel 关联</span><br><span class="line">npm install rollup-plugin-babel</span><br><span class="line"></span><br><span class="line">// 4，浏览器兼容：将 ES6 语法转译为 ES5</span><br><span class="line">npm install @babel/preset-env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ==&gt; 合并写法：一次性安装开发环境所需的全部依赖</span><br><span class="line">npm install rollup @babel/core rollup-plugin-babel @babel/preset-env -D</span><br></pre></td></tr></table></figure><h5 id="3、创建Vue-js文件"><a href="#3、创建Vue-js文件" class="headerlink" title="3、创建Vue.js文件"></a>3、创建Vue.js文件</h5><p>创建打包入口：src&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js Vue 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 Vue 函数，提供外部使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9dfc043b.png" alt="image-20230419135420661.png"></p><h5 id="4、创建-Rollup-配置文件"><a href="#4、创建-Rollup-配置文件" class="headerlink" title="4、创建 Rollup 配置文件"></a>4、创建 Rollup 配置文件</h5><p>rollup 默认配置文件：项目根目录下<code>rollup.config.js</code>文件</p><p>创建 rollup.config.js，完成 rollup、<a href="https://so.csdn.net/so/search?q=babel&spm=1001.2101.3001.7020">babel</a> 相关配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 rollup 配置对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 打包入口</span></span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,   </span><br><span class="line">  <span class="comment">// 打包出口：可定义为数组，输出多种构件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;                </span><br><span class="line">    <span class="comment">// 打包输出文件</span></span><br><span class="line">    <span class="attr">file</span>: <span class="string">&#x27;dist/vue.js&#x27;</span>,   </span><br><span class="line">    <span class="comment">// 打包格式（可选项）：iife（立即执行函数）、esm（ES6 模块）、cjs（Node 规范）、umd（支持 amd + cjs）</span></span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,         </span><br><span class="line">    <span class="comment">// 使用 umd 打包需要指定导出的模块名，Vue 模块将会绑定到 window 上；</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,          </span><br><span class="line">    <span class="comment">// 开启 sourcemap 源码映射，打包时会生成 .map 文件；作用：浏览器调试ES5代码时，可定位到ES6源代码所在行；</span></span><br><span class="line">    <span class="attr">sourcemap</span>: <span class="literal">true</span>,      </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 使用 Rollup 插件转译代码</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="comment">// 忽略 node_modules 目录下所有文件（**：所有文件夹下的所有文件）</span></span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;node_modules/**&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、创建-rollup-构建脚本"><a href="#5、创建-rollup-构建脚本" class="headerlink" title="5、创建 rollup 构建脚本"></a>5、创建 rollup 构建脚本</h5><p>执行 Rollup 打包构建 Vue，创建 rollup-script 构建脚本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">.........</span><br><span class="line">  <span class="comment">// ollup 命令：默认会去找 node_module/bin/rollup；</span></span><br><span class="line"><span class="comment">// - -c：config 选项，使用配置文件，默认找 rollup.config.js；</span></span><br><span class="line"><span class="comment">// - -w：watch 选项，监听文件变化；当文件发生变化时重新打包；</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c -w&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">.........</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>dev 脚本解释：</p><ul><li>rollup 命令：默认会去找 node_module&#x2F;bin&#x2F;rollup；</li><li>-c：config 选项，使用配置文件，默认找 rollup.config.js；</li><li>-w：watch 选项，监听文件变化；当文件发生变化时重新打包；</li></ul><h5 id="6、打包构建-Vue"><a href="#6、打包构建-Vue" class="headerlink" title="6、打包构建 Vue"></a>6、打包构建 Vue</h5><p>执行构建脚本 npm run dev</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9de75622.png" alt="image-20230419135603333.png"></p><p>将 <code>src/index.js</code> 输出至 <code>dist/vue.js</code> 其中，<code>vue.js.map</code> 为 sourcemap 源码映射文件</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e1a53ce.png" alt="image-20230419135710522.png"></p><h5 id="7、创建-Html-引入-Vue"><a href="#7、创建-Html-引入-Vue" class="headerlink" title="7、创建 Html 引入 Vue"></a>7、创建 Html 引入 Vue</h5><p>创建 <code>dist/index.html</code> 引入 <code>dist/vue.js</code>，打印输出 Vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入 vue.js，将会绑定到 window--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Vue</span>) </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中打开<code>index.html</code>，查看控制台输出，此时一个<code>Vue</code>的构建环境就搭建完成了</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e008d28.png" alt="image-20230419135928971.png"></p><h3 id="3、Vue函数的封装"><a href="#3、Vue函数的封装" class="headerlink" title="3、Vue函数的封装"></a>3、Vue函数的封装</h3><p>【目标】封装一个 Vue 函数并且在 index.html 中引入</p><p>【前置知识】</p><p>在js中函数和class都可以new，如下：有啥区别呢 ？</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e5aa25b.png" alt="Snipaste_2023-08-20_16-04-06.png"></p><p>class <strong>类是用于创建对象的模板。</strong></p><p>我们使用 class 关键字来创建一个类，类体在一对大括号 <strong>{}</strong> 中，我们可以在大括号 <strong>{}</strong> 中定义类成员的位置，如方法或构造函数。</p><p>每个类中包含了一个特殊的方法 **constructor()**，它是类的构造函数，这种方法用于创建和初始化一个由 <strong>class</strong> 创建的对象。</p><p>创建一个类的语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; ... &#125; &#125;</span><br></pre></td></tr></table></figure><p>在js中除了class函数也可以new，函数本身就是对象，在js中每定义一个函数都会同时生成一个以这个函数体为构造函数的对象，不信你试试</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e6d4278.png" alt="image-20230704111250514.png"></p><p>可以通过对象来new出一个新的对象。定义 function Vue(options){} 时， 实际上生成了一个Function类型（预定义类型）的对象，对象名叫Vue，对象的构造函数就是这个函数的体。如下</p><p>我们在初始化<code>Vue</code>项目的时候使用到<code>new</code>关键字，这里的vue是使用函数定义的。目的是提升vue的灵活性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = options.<span class="property">name</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【思考】为什么vue使用函数定义而其他的watcher observer使用class定义？</p><p>【回答】核心目的：提升Vue的灵活性：</p><p>1、class的所有方法都是不可枚举的，而function声明的函数是可以枚举的。用户可以根据需要定制重写（重载）vue提供的成员方法</p><p>2、function 既能当常规函数来用，又能当做函数的属性来用，又能当类来用。相对class更加灵活。</p><p>3、对于内部定义的不希望修改的方法，通过class来定义，另外class声明的函数会有变量提升。</p><p>下面我们实例化一个Vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时在 vm 实例上就具有了 name 和 data 属性</p><p>接下来我们在<code>src/index.js</code>中定义这个类并导出。在构造函数中获取传入的<code>options</code>并挂载到<code>vue</code>实例上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue构造器执行&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  vm.<span class="property">$options</span> = options        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在 <strong>dist&#x2F;index.html</strong>中实例化一个Vue对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue.js，将会绑定到 window--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">a</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">b</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">c</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;hello world!&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e0cb735.png" alt="image-20230505142517798.png"></p><p>此时我们访问<code>Vue</code>对象中data里面定义的数据不能直接访问，必须通过<code>vue.data.xxx</code>访问，实际在<code>Vue</code>项目中<code>data</code>里面定义的数据是可以直击访问的，所以我们需要给<code>data</code>中的数据添加一个代理实现数据的直接访问。</p><h3 id="4、核心函数-Object-defineProperty-的介绍和简单响应式的实现"><a href="#4、核心函数-Object-defineProperty-的介绍和简单响应式的实现" class="headerlink" title="4、核心函数 Object.defineProperty 的介绍和简单响应式的实现"></a>4、核心函数 Object.defineProperty 的介绍和简单响应式的实现</h3><p>【目标】能够了解Object.defineProperty的用法，并且实现一个简单的响应式</p><p>为了实现vue中的数据代理，我们需要首先了解一下vue中的响应式核心方法Object.defineProperty</p><p>Object.defineProperty 在 vue2 中起到了非常重要的作用，通过Object.defineProperty实现了数据的代理，数据响应式原理，以及vue中的一些重要成员方法。下面我们学习Object.defineProperty的基本概念和用法。</p><p>语法：**<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty(obj, prop, descriptor)</a>**<br>其中：<strong>obj</strong>要在其上定义属性的对象。<strong>prop</strong>要定义或修改的属性的名称。<strong>descriptor</strong>将被定义或修改的属性描述符。</p><p>参数：    1、obj : 第一个参数就是要在哪个对象身上添加或者修改属性</p><p>​2、prop : 第二个参数就是添加或修改的属性名</p><p>​3、desc ： 配置项，一般是一个对象 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">desc 的详细配置</span><br><span class="line">writable：是否可重写</span><br><span class="line">value：  当前值 </span><br><span class="line">enumerable： 是否可以遍历</span><br><span class="line">configurable： 是否可再次修改配置项</span><br><span class="line">get：     读取时内部调用的函数</span><br><span class="line">set：        写入时内部调用的函数</span><br><span class="line"></span><br><span class="line">当数据调用的时候触发get 方法，当数据修改的时候触发set方法</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, <span class="string">&#x27;b&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 通过 Object.defineProperty 设置的属性默认是不可修改，不可枚举，不可配置</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, <span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 是否可以枚举</span></span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span> <span class="comment">// 是否可以修改</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【思考】什么是响应式？</p><p>【回答】对外界的变化做出反应</p><p>【思考】数据响应式的核心思想是什么？</p><p>【回答】将数据变成可观察的</p><p>下面我们来实现一个简单的数据响应式过程，在 dist 下新建一个 **defineproperty.html **</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 定义数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 实现数据的渲染</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 当视图改变数据改变</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 当数据改变驱动视图更新</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">value</span>: <span class="string">&#x27;hello kilito&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        data.<span class="property">value</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">value</span> = data.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这里的value的作用是形成闭包，拓展函数体内部变量的作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, prop, value, cb</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据发生获取&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> value</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据发生了修改！&#x27;</span>, val)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 将数据修改之后的值 val 在get中返回</span></span></span><br><span class="line"><span class="language-javascript">                value = val</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">cb</span>(val)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">value</span> = value</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineReactive</span>(data, <span class="string">&#x27;value&#x27;</span>, data[<span class="string">&#x27;value&#x27;</span>], update)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data.value = &#x27;123&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数据发生了修改！ 123</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#x27;123&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 视图发生了改变 123</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e6bd2fe.png" alt="Snipaste_2023-08-20_16-04-59.png"></p><p>【思考】数据获取的时候触发的哪个方法，数据修改的时候触发的哪个方法？</p><p>【回答】获取触发get 修改触发set</p><p>【思考】上面这段代码实现了什么呢？</p><p>【回答】实现了数据的双向绑定，数据改变视图改变，视图改变数据也改变</p><p>【思考】定义defineReactive函数的时候，里面第三个参数value的作用？</p><p>【回答】在函数体内部形成闭包结构，用开来拓展函数内部变量的作用域</p><h3 id="5、通过data代理，实现数据的访问"><a href="#5、通过data代理，实现数据的访问" class="headerlink" title="5、通过data代理，实现数据的访问"></a>5、通过data代理，实现数据的访问</h3><p>【目标】实现data的代理可以直接通过vm实例获取data中定义的数据</p><p>【思考】在 vue 中的数据是存放在 data 中为什么可以通过 vm.XXX 直接访问数据呢？</p><p>【回答】通过数据代理实现数据的访问</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e26c0fb.png" alt="image-20230704114327873.png"></p><p>此时我们想获取数据 a 需要通过 Vue.$options.data.a ，但是在 vue 中只需要 this.a 就可以获取到 a 的值，这是怎么实现的呢？</p><p>在 Vue 中，可以在外部直接通过vm实例进行数据访问和操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">         <span class="attr">b</span>: &#123;</span><br><span class="line">          <span class="attr">c</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">message</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>当前代码中，外部通过vue实例只能拿到 <code>vue.$options</code>，想要拿到<code>data</code>需要 <code>vue.$options.data</code>，要想实现<code>vue.message</code>和<code>vue.$options.data.message</code>等效，就需要想办法将<code>vue</code>实例操作“代理”到<code>$options.data</code>上；这样，就实现了 Vue 的数据代理我们来观察一下vue的实例，在实例上有一个_data属性 还有我们定义的变量。</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c861f0ef8.png" alt="image-20230704115013875.png"></p><p>首先，先做一次代理，将<code>data</code>挂载到 vue._data下（因为Object.defineProperty的第一个参数必须为一的对象，我们，第一层代理更加方便我们在实现属性的追加），这样 vue 实例就能够在外部通过<code>vue._data.message</code>获取到<code>data.message</code>；</p><p>之后，再做一次代理，将 vue 实例操作 vue.message 代理到 vue.<em>data 上，这样，外部就可以直接通过vue.message 获取到 data.message；</em></p><p>Vue 状态初始化阶段，通过 observe() 实现数据响应式之后，通过 Object.defineProperty 对 _data 中的数据操作进行劫持；将 vue.xxx 在 vue 实例上的取值操作，代理到 vue._data.xxx 上，这样可以简化书写。</p><p>下面我们开始实现数据的代理</p><p><code>data</code>挂载到 vue._data下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue构造函数执行&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">  vm.<span class="property">$options</span> = options</span><br><span class="line">    <span class="comment">// options.data 可能是对象也可能是函数</span></span><br><span class="line">  vm.<span class="property">_data</span> = <span class="title function_">typeof</span>(options.<span class="property">data</span>) === <span class="string">&#x27;function&#x27;</span> ? options.<span class="title function_">data</span>() : options.<span class="property">data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将vue实例操作vue.message代理到vue._data上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据代理 实现非侵入的数据修改</span></span><br><span class="line"><span class="comment">// 定义代理方法</span></span><br><span class="line"><span class="comment">// 将vue实例上的操作，代理到 vue._data上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_proxy</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">        get () &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_data</span>[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        set (val) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_data</span>[key] = val</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后在Vue的构造器中使用proxy方法代理数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue构造函数执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">    vm.<span class="property">$options</span> = options</span><br><span class="line">    vm.<span class="property">_data</span> = <span class="title function_">typeof</span>(options.<span class="property">data</span>) === <span class="string">&#x27;function&#x27;</span> ? options.<span class="title function_">data</span>() : options.<span class="property">data</span></span><br><span class="line">    _proxy.<span class="title function_">call</span>(vm,vm.<span class="property">_data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们再访问vue对象中的数据，就不需要.data了，观察打印结果：当从vue实例取值时，就会被代理到vm._data取值；</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c81d1b531.png" alt="Snipaste_2023-08-20_15-54-59.png"></p><p>【总结】vue中实现数据直接访问的实现步骤</p><p>1、将 data 暴露在 vue._ <em>data 实例属性上<br>2、利用 Object.defineProperty 将 vue.xxx 操作代理到 vue.</em> _data 上</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="JS设计模式"><a href="#JS设计模式" class="headerlink" title="JS设计模式"></a>JS设计模式</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80">传送门:wiki-设计模式</a></p><p><a href="https://www.ituring.com.cn/book/1632">传送门:JavaScript设计模式与开发实践</a></p></blockquote><p>设计模式的指的是：在<strong>面向对象软件</strong>设计过程中针对特定问题的简洁而优雅的解决方案。通俗一点说，设计模式就是给面向对象软件开发中的一些好的设计取个名字。</p><p>目前说到设计模式，一般指的是《设计模式：可复用面向对象软件的基础》一书中提到的<strong>23种</strong>常见的软件开发设计模式。</p><p>JavaScript中不需要生搬硬套这些模式，咱们结合实际前端开发中的具体应用场景，来看看有哪些常用的设计模式</p><p>这一节咱们会学习:</p><ol><li>JS中的常用设计模式</li><li>设计模式在开发&#x2F;框架中的应用场景</li></ol><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>在JavaScript中，工厂模式的表现形式就是一个<strong>直接调用即可返回新对象的函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数并实例化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;柯基&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ToyFactory</span>(<span class="params">name,price</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        price</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> toy1 = <span class="title class_">ToyFactory</span>(<span class="string">&#x27;布娃娃&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> toy2 = <span class="title class_">ToyFactory</span>(<span class="string">&#x27;玩具车&#x27;</span>,<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><ol><li><p>Vue2-&gt;Vue3: </p><ol><li>启用了<code>new Vue</code>,改成了工厂函数<code>createApp</code>-<a href="https://v3-migration.vuejs.org/zh/breaking-changes/global-api.html">传送门</a></li><li><em><strong>任何全局改变 Vue 行为的 API(vue2) 现在都会移动到应用实例上(vue3)</strong></em></li><li>就不会出现,Vue2中多个Vue实例共享,相同的全局设置,可以<strong>实现隔离</strong></li><li>避免vue2中全局设置的东西，比如组件，影响后续实例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#app1</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#app2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue2-全局注册组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    实例1 组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-title</span>&gt;</span><span class="tag">&lt;/<span class="name">my-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    实例2</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-title</span>&gt;</span><span class="tag">&lt;/<span class="name">my-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.9/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 全局注册组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-title&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 组件的结构</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;h2 style=&quot;color:orange&quot;&gt;标题组件&lt;/h2&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>axios.create:</p><ol><li>基于传入的配置创建一个新的<code>axios</code>实例,<a href="https://www.axios-http.cn/docs/instance">传送门</a></li><li>项目中有2个请求基地址如何设置?</li><li>创建出多个请求不同的对象，比如设置多个基地址</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 基于不同基地址创建多个 请求对象</span></span><br><span class="line"><span class="keyword">const</span> request1 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;基地址1&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> request2 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;基地址2&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> request3 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;基地址3&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过对应的请求对象,调用接口即可</span></span><br><span class="line"><span class="title function_">request1</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;基地址1的接口&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">request2</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;基地址2的接口&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">request3</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;基地址3的接口&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>小结:</p><ol><li>工厂模式:JS中的表现形式,<strong>返回新对象的函数(方法)</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>日常开发中,有2个很经典的场景</p><ol><li><code>vue3</code>中创建实例的api改为<code>createApp</code>,<code>vue2</code>中是<code>new Vue</code><ol><li>Vue3中,没有影响所有Vue实例的api了,全都变成了影响某个app对象的api,比如<code>Vue.component--&gt;app.component</code></li></ol></li><li><code>axios.create</code>基于传入的配置,创建一个新的请求对象,可以用来设置多个基地址</li></ol></li></ol><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><strong>单例模式指的是，在使用这个模式时，单例对象整个系统需要保证只有一个存在。</strong></p><p><strong>需求:</strong></p><ol><li>通过静态方法<code>getInstance</code>获取<strong>唯一实例</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1===s2)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义类</li><li>私有静态属性:<code>#instance</code></li><li>提供静态方法<code>getInstance</code>:<ol><li>调用时判断<code>#instance</code>是否存在:</li><li>存在:直接返回</li><li>不存在:实例化,保存,并返回</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleTon</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">   <span class="comment">// 私有属性，保存唯一实例</span></span><br><span class="line">   <span class="keyword">static</span> #instance</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取单例的方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(this) // SingleTon类</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">SingleTon</span>.#instance === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 内部可以调用构造函数</span></span><br><span class="line">      <span class="title class_">SingleTon</span>.#instance = <span class="keyword">new</span> <span class="title class_">SingleTon</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">SingleTon</span>.#instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1===s2)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>实际应用:</strong></p><ol><li>vant组件库中的弹框组件,保证弹框是单例<ol><li>toast组件:<a href="https://gitee.com/vant-contrib/vant/blob/main/packages/vant/src/toast/index.ts">传送门</a></li><li>notify组件:<a href="https://gitee.com/vant-contrib/vant/blob/main/packages/vant/src/notify/index.ts">传送门</a></li><li>如果弹框对象<ol><li>不存在,–&gt;创建一个新的</li><li>存在,直接用</li></ol></li></ol></li><li>vue中注册插件,用到了单例的思想(只能注册一次)<ol><li>vue2:<a href="https://gitee.com/vuejs/vue/blob/main/src/core/global-api/use.ts">传送门</a></li><li>vue3:<a href="https://gitee.com/vuejs/core/blob/main/packages/runtime-core/src/apiCreateApp.ts#L256">传送门</a></li></ol></li></ol><p><strong>小结:</strong></p><ol><li><p>单例模式:</p><ol><li>保证,应用程序中,某个对象,只能有一个</li></ol></li><li><p>自己实现:</p><ol><li>getInstance方法,<ol><li>实例存在-&gt;返回</li><li>实例不存在-&gt;创建,保存-&gt;返回</li></ol></li></ol></li><li><p>应用场景:</p><ol><li>我在看源码的时候,发现,vant的toast和notify组件都用到了单例<ol><li>多次弹框,不会创建多个弹框,复用唯一的弹框对象</li></ol></li><li>vue中注册插件,vue3和vue2都会判断插件是否已经注册,已注册,直接提示用户</li></ol></li></ol><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>在对象之间定义一个<strong>一对多</strong>的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。</p><p><strong>举个例子:</strong></p><ol><li><code>dom</code>事件绑定，比如</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;load触发1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;load触发2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;load触发3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Vue的生命周期钩子:</p><ol><li>vue框架,提供给开发者,在Vue实例特定时期,添加自定义逻辑的,一种机制.</li><li>一共有：<ol><li>beforeCreated </li><li>created</li><li>beforeMount </li><li>Mounted </li><li>beforeUpdate </li><li>Updated </li><li>beforeDestory </li><li>destoryed</li><li>缓存组件（keep-alive）：activated  deactivated</li></ol></li></ol></li><li><p>Vue的响应式原理:</p><ol><li><p><a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html">传送门</a></p></li><li><p><strong>自己描述：响应式原理</strong></p><ol><li><p>创建Vue实例时，会通过Object.definedProperty将data中的数据的每个属性都转为get和set</p></li><li><p>就可以监测到对数据的，取值get和赋值set</p></li><li><p>只要数据发生了变更，就会去通知所有使用数据为止，更新</p><ol><li>页面</li><li>侦听器</li><li>…</li></ol><p><img src="https://bu.dusays.com/2023/08/19/64e0ac0f284d5.png" alt="vue响应式原理.png"></p></li></ol></li><li><p>自己描述2-涉及到虚拟dom：</p><ol><li>可能被追问：<ol><li>为什么需要使用<strong>虚拟dom</strong>？ 虚拟dom内存中，速度快</li><li>新旧dom比较，如何比较的？ <ol><li><strong>diff算法</strong> 找不同</li><li>vue中同级比较<ol><li>有id，id不同，直接不同</li><li>没有id，比元素，在比属性</li></ol></li></ol></li><li>vue的diff算法和react的diff算法有什么区别？</li></ol></li></ol><p><img src="https://bu.dusays.com/2023/08/19/64e0ac9e5e0c8.png" alt="vue响应式原理2.png"></p></li><li><p>自己回答：</p><ol><li>vue2中使用的是 Object.definedProperty，动态新增的属性，没有响应式，this.$set</li><li>vue3中是Proxy<ol><li>没有这个问题，Proxy可以检测到所有属性的改变</li><li>vue3中只用了 Proxy 吗？不是，引用了<code>Object.definedProperty</code></li></ol></li></ol></li></ol></li></ol><h3 id="发布订阅模式01-应用场景"><a href="#发布订阅模式01-应用场景" class="headerlink" title="发布订阅模式01-应用场景"></a>发布订阅模式01-应用场景</h3><p>发布订阅模式可以实现的效果类似观察者模式,但是两者略有差异,一句话描述:一个有中间商(<strong>发布订阅模式</strong>)一个没中间商(<strong>观察者模式</strong>)</p><p><img src="https://bu.dusays.com/2023/08/19/64e0ca7198385.png" alt="image-20230626153656768.png"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0ca7198385.png" alt="image-20230706002933258.png"></p><p><strong>应用场景:</strong></p><ol><li><code>vue2</code>中的<code>EventBus</code>:<a href="https://v2.cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95-%E4%BA%8B%E4%BB%B6">传送门</a></li><li><code>vue3</code>中因为移除了实例上对应方法，可以使用替代方案:<a href="https://v3-migration.vuejs.org/zh/breaking-changes/events-api.html">传送门</a><ol><li>官方推荐,用插件</li><li>微微一笑:直接写</li></ol></li></ol><h3 id="发布订阅模式02-自己写一个事件总线"><a href="#发布订阅模式02-自己写一个事件总线" class="headerlink" title="发布订阅模式02-自己写一个事件总线"></a>发布订阅模式02-自己写一个事件总线</h3><p><strong>需求:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">HMEmitter</span>()</span><br><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;事件名1&#x27;</span>,回调函数)</span><br><span class="line">bus.$on(<span class="string">&#x27;事件名1&#x27;</span>,回调函数)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;事件名&#x27;</span>,参数<span class="number">1</span>,...,参数n)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件</span></span><br><span class="line">bus.$off(<span class="string">&#x27;事件名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次性事件</span></span><br><span class="line">bus.$once(<span class="string">&#x27;事件名&#x27;</span>,回调函数)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义类</li><li>私有属性:<code>#handlers=&#123;事件1:[f1,f2],事件2:[f3,f4]&#125;</code></li><li>实例方法:<ol><li>$on(事件名,回调函数):注册事件</li><li>$emit(事件名,参数列表):触发事件</li><li>$off(事件名):移除事件</li><li>$once(事件名,回调函数):注册一次性事件</li></ol></li></ol><p><strong>基础模板:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>自己实现事件总线<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;on&quot;</span>&gt;</span>注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;emit&quot;</span>&gt;</span>触发事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;off&quot;</span>&gt;</span>移除事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;once-on&quot;</span>&gt;</span>一次性事件注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;once-emit&quot;</span>&gt;</span>一次性事件触发<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">HMEmmiter</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 逻辑略</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 简化 querySelector调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">qs</span>(<span class="params">selector</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.on&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 触发事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.emit&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 移除事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.off&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次性事件注册</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.once-on&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次性事件触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.once-emit&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HMEmmiter</span> &#123;</span><br><span class="line">  #handlers = &#123;&#125;</span><br><span class="line">  <span class="comment">// 注册事件</span></span><br><span class="line">  $on(event, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.#handlers[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#handlers[event] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册继续push</span></span><br><span class="line">    <span class="variable language_">this</span>.#handlers[event].<span class="title function_">push</span>(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  $emit(event, ...args) &#123;</span><br><span class="line">      <span class="comment">// 取出保存的时间 []</span></span><br><span class="line">    <span class="keyword">const</span> funcs = <span class="variable language_">this</span>.#handlers[event] || []</span><br><span class="line">      <span class="comment">// 挨个触发，并传入参数</span></span><br><span class="line">    funcs.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">func</span>(...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除事件</span></span><br><span class="line">  $off(event) &#123;</span><br><span class="line">      <span class="comment">// event 对应的回调函数数组设置空即可</span></span><br><span class="line">    <span class="variable language_">this</span>.#handlers[event] = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一次性事件:注册了以后，只能触发一次</span></span><br><span class="line">  $once(event, callback) &#123;</span><br><span class="line">      <span class="comment">// 触发之后，清空，移除</span></span><br><span class="line">    <span class="variable language_">this</span>.$on(event, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 执行 callback</span></span><br><span class="line">      <span class="title function_">callback</span>(...args)</span><br><span class="line">        <span class="comment">// 移除注册的event事件</span></span><br><span class="line">      <span class="variable language_">this</span>.$off(event)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>在原型模式下，当我们想要创建一个对象时，会先找到一个对象作为原型，然后通过<strong>克隆原型</strong>的方式来创建出一个与原型一样（共享一套数据&#x2F;方法）的对象。在<code>JavaScript</code>中,<code>Object.create</code>就是实现原型模式的内置<code>api</code></p><p><strong>应用场景:</strong></p><p><code>vue2</code>中重写数组方法:</p><ol><li>调用方法时(<code>push</code>,<code>pop</code>,<code>shift</code>,<code>unshift</code>,<code>splice</code>,<code>sort</code>,<code>reverse</code>)可以触发视图更新:<a href="https://v2.cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E6%9B%B4%E6%96%B9%E6%B3%95">传送门</a></li><li>源代码:<a href="https://gitee.com/vuejs/vue/blob/main/src/core/observer/array.ts">传送门</a>&#96;</li><li>测试一下:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>原型模式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.9/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">foods</span>: [<span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">foods</span>.<span class="property">push</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/19/64e0bad8f3abf.png" alt="原型模式.png"></p><p><strong>自己描述:</strong></p><ol><li>vue2中数组重写了7个方法,内部基于数组的原型<code>Array.prototype</code>创建了一个新对象</li><li><code>Object.create</code>浅拷贝</li><li>内部<ol><li>调用数组的原方法,获取结果并返回—方法的功能和之前一致</li><li>通知了所有的观察者去更新视图</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="property">arr</span>.<span class="property">push</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ol start="4"><li>原型模式,基于某个对象,创建一个新的对象,JS中,通过Object.create即可实现,Vue中重写数组方法就是这么做的 ↑</li></ol><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式指的是<strong>拦截和控制</strong>与目标对象的交互,在<code>JavaScript</code>中通过<code>Proxy</code>,即可实现对象的代理,<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">传送门</a></p><p><strong>核心语法:</strong></p><ol><li>初始对象可以直接修改任意属性</li><li>通过<code>Proxy</code>生成代理对象，限制访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前obj对象的name和age属性可以被随意修改</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过Proxy创建代理对象 </span></span><br><span class="line"><span class="comment">// 最大的特点就是，无论操作的属性，在对象上是否存在 都会触发 get set</span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="comment">// []语法进行对象的取值和赋值</span></span><br><span class="line">    <span class="comment">// target: 源对象</span></span><br><span class="line">    <span class="comment">// key： 属性名</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get触发&#x27;</span>)</span><br><span class="line">    <span class="comment">// return target[key]</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 结合Reflect的静态方法替换[]语法</span></span><br><span class="line">    <span class="comment">// target: 源对象</span></span><br><span class="line">    <span class="comment">// key： 属性名</span></span><br><span class="line">    <span class="comment">// value：设置的值</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set触发&#x27;</span>)</span><br><span class="line">   <span class="comment">// target[key]=value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 代理对象属性赋值，触发set</span></span><br><span class="line">objProxy.<span class="property">name</span> = <span class="string">&#x27;rose&#x27;</span></span><br><span class="line"><span class="comment">// 代理对象属性取值，触发get</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objProxy.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><p><strong>需求:</strong></p><p>基于上一份代码实现:</p><ol><li>属性取值和赋值时,如果属性不存在,报错</li><li>修改name时,只能设置字符串,否则报错</li></ol><p><strong>关键步骤:</strong></p><ol><li>在<code>get</code>中添加取值判断逻辑</li><li>在<code>set</code>中添加赋值判断逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前obj对象的name和age属性可以被随意修改</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过Proxy创建代理对象 </span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="comment">// []语法进行对象的取值和赋值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target[key]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target[key])&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;name&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断类型</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        target[key]=value</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;name属性只能设置字符串&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 代理对象属性赋值，触发set</span></span><br><span class="line">objProxy.<span class="property">name</span> = <span class="string">&#x27;rose&#x27;</span></span><br><span class="line"><span class="comment">// 不存在friend 报错</span></span><br><span class="line">objProxy.<span class="property">friend</span> = <span class="string">&#x27;rose&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>实际应用:</strong></p><p><code>Vue3</code>的响应式原理-<a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#how-reactivity-works-in-vue">传送门</a></p><ol><li><p>通过<code>Proxy</code>创建响应式对象</p></li><li><p><code>getter/setter</code>用于<code>ref</code></p></li><li><p>Vue2考虑兼容,用的是兼容性好的<code>Object.defineProperty</code>,但是无法跟踪动态增加的属性</p></li><li><p><code>Vue3</code>中用了<code>Proxy</code>,他对于动态增加的属性,也可以检测到,但是Vue3中也用了<code>Object.defineProperty</code></p><ol><li><p><code>reactive</code>用的是<code>Proxy</code></p><ol><li>注意点:解构之后会丢失响应性,需要用<code>toRefs</code></li></ol></li><li><p><code>ref</code>用的是<code>Object.defineProperty</code></p></li></ol></li><li><p>观察者模式–&gt;虚拟dom-&gt;diff算法</p></li></ol><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示.简而言之就是:<strong>遍历</strong></p><p>遍历作为日常开发中的<strong>高频</strong>操作,JavaScript中有大量的默认实现:<strong>比如</strong></p><ol><li><code>Array.prototype.forEach</code>:遍历数组</li><li><code>NodeList.prototype.forEach</code>:遍历<code>dom</code>,<code>document.querySelectorAll</code></li><li><code>for in</code></li><li><code>for of</code></li></ol><p><strong>面试题</strong>:</p><ol><li><p><code>for in</code> 和<code>for of</code> 的区别?</p><ol><li><p><strong><code>for...in</code></strong> <strong>语句</strong>以任意顺序迭代一个对象的除<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>以外的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举</a>属性，包括继承的可枚举属性。</p><ol><li>对象默认的属性以及动态增加的属性都是<strong>可枚举</strong>属性</li><li>遍历出来的是<strong>属性名</strong></li><li>继承而来的属性也会遍历</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 原型上默认的属性和方法,都是不可枚举(for in不出来)</span></span><br><span class="line">    <span class="comment">// 动态添加的,默认是可枚举(可以for in出来)</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;奔跑&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">swim</span> = <span class="string">&#x27;游泳&#x27;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">&#x27;小鸡&#x27;</span>, <span class="string">&#x27;小鸭&#x27;</span>, <span class="string">&#x27;小鱼&#x27;</span>]</span><br><span class="line">        <span class="comment">// 遍历的是key,继承而来的属性也可以遍历出来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key:&#x27;</span>, key) <span class="comment">// key: 0  key: 1  key: 2  key: swim  key: run  </span></span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 遍历的值,继承而来的遍历不出来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iterator:&#x27;</span>, iterator) <span class="comment">// key: 小鸡 key: 小鸭 key: 小鱼</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>for...of</code>语句</strong>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols">可迭代对象</a>（包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map"><code>Map</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set"><code>Set</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">arguments</a> 对象等等）上创建一个迭代循环</p><ol><li>for of不会遍历<strong>继承</strong>而来的属性</li><li>遍历出来的是<strong>属性值</strong></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;小鸡&#x27;</span>, <span class="string">&#x27;小鸭&#x27;</span>, <span class="string">&#x27;小鱼&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 obj可以 for of for of出来的是他内部的 数组</span></span><br><span class="line"><span class="comment">// 自定义 forof执行的行为</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: <span class="string">&#x27;rose&#x27;</span>,</span><br><span class="line">  <span class="attr">skill</span>: <span class="string">&#x27;jump together&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;沙县&#x27;</span>, <span class="string">&#x27;猪脚饭&#x27;</span>, <span class="string">&#x27;手撕鸡&#x27;</span>],</span><br><span class="line">  <span class="comment">// 属性名表达式</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">// console.log(this)</span></span><br><span class="line">    <span class="comment">// 返回一个对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">foods</span>[index++]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历的值,继承而来的遍历不出来</span></span><br><span class="line"><span class="comment">// for (const iterator of arr) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;iterator:&#x27;, iterator)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for of 并不能遍历所有的东西,比如 object无法遍历</span></span><br><span class="line"><span class="comment">// 直接遍历对象: obj is not iterable,obj不可迭代</span></span><br><span class="line"><span class="comment">// [Symbol.iterator] 添加之后,可以迭代,要求返回特定格式的对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iterator:&#x27;</span>, iterator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可迭代协议和迭代器协议:</strong></p><ol><li><p>可迭代协议:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">传送门</a></p><ol><li>给对象增加属方法<code> [Symbol.iterator]()&#123;&#125;</code></li><li>返回一个符合迭代器协议的对象</li></ol></li><li><p>迭代器协议:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">传送门</a></p><ol><li>next方法,返回对象:<ol><li><code>&#123;done:true&#125;</code>,迭代结束</li><li><code>&#123;done:false,value:&#39;xx&#39;&#125;</code>,获取解析并接续迭代</li></ol></li></ol></li><li><p>面试问及:</p><ol><li>for of可以遍历一部分的类型,比如数组,map</li><li>对象无法遍历,因为对象没有实现 可迭代协议,迭代器协议</li><li>可迭代协议,迭代器协议,约定了:<ol><li>可迭代协议:对象上要有一个指定属性的函数,返回 满足迭代器要求的对象</li><li>迭代器协议: <code>next</code>方法,返回<code>&#123;done:true&#125;,&#123;done:false,value:&#39;x&#39;&#125;</code></li><li>我自己尝试写过一下,但是仅针对语法</li><li>可以和面试官讨论一下,可以用在哪?</li></ol></li></ol></li><li><p>直接打印对象,看到<strong>Symbol(Symbol.iterator)</strong>,说明可以使用<code>for of</code></p></li></ol><h2 id="JS调用栈"><a href="#JS调用栈" class="headerlink" title="JS调用栈"></a>JS调用栈</h2><ol><li>执行上下文和调用栈</li><li>栈溢出</li></ol><h3 id="执行上下文和调用栈"><a href="#执行上下文和调用栈" class="headerlink" title="执行上下文和调用栈"></a>执行上下文和调用栈</h3><p><a href="https://262.ecma-international.org/6.0/">执行上下文</a>:是指在代码执行时，JavaScript引擎创建的一种数据结构，它包含了函数执行时的状态信息，例如变量、函数参数、函数返回值等。</p><p>在以下三种情况下会创建执行上下文</p><ol><li><p>JavaScript执行全局代码时，创建<strong>全局执行上下文</strong></p></li><li><p>调用函数时，创建<strong>函数执行上下文</strong></p></li><li><p>使用 eval 函数时，创建<strong>执行上下文</strong></p><ol><li>给他一个字符串,解析为js并执行</li></ol></li></ol><p>我们通过调试工具确认一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funA</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funcB</span>(<span class="params">c</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="title function_">funA</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> res + c</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="title function_">funcB</span>(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 执行函数时，创建对应执行上下文，内部保存变量，代码等一系列执行函数需要的东西</span></span><br><span class="line"><span class="comment">// 进入JS调用堆栈，执行 ==&gt; 执行完毕之后 =&gt; 出栈</span></span><br><span class="line"><span class="comment">// 所有代码执行完毕为止</span></span><br></pre></td></tr></table></figure><p><strong>调用栈:</strong></p><ol><li>执行上下文会存在JS调用栈中,栈的结构特点是:<strong>先进后出</strong></li></ol><p><img src="https://bu.dusays.com/2023/08/19/64e0ca6fa8242.png" alt="image-20230706133635838.png"></p><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>栈的容量是有限的,如果内部的内容一直得不到释放,就会出现栈溢出,比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈溢出，JS调用栈有容量大小，太大了，会溢出</span></span><br><span class="line"><span class="comment">// JS调用堆栈装满了之后，就会出现</span></span><br><span class="line"><span class="comment">// Maximum call stack size exceeded</span></span><br><span class="line"><span class="comment">// 日常开发常见的：</span></span><br><span class="line"><span class="comment">// 1. 死递归</span></span><br><span class="line"><span class="comment">// 2. 导航守卫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  i++</span><br><span class="line">  <span class="title function_">sum</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/19/64e0ca7057592.png" alt="image-20230708104801552.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0a7aa72c29.png" alt="设计模式1.png"><br><img src="https://bu.dusays.com/2023/08/19/64e0de1ab6975.png" alt="设计模式2.png"><br><img src="https://bu.dusays.com/2023/08/19/64e0de18eb2b5.png" alt="设计模式3.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://wangdoc.com/es6/">阮一峰-《ECMAScript 6 教程》</a></li><li><a href="https://www.ituring.com.cn/book/2472">图灵社区-JavaScript高级程序设计</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原理二</title>
      <link href="/posts/882eae5.html"/>
      <url>/posts/882eae5.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>Currying 又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p> 柯里化 作为一种高阶技术, 可以提升函数的复用性和灵活性。</p><h3 id="什么是函数柯里化"><a href="#什么是函数柯里化" class="headerlink" title="什么是函数柯里化"></a>什么是函数柯里化</h3><p>函数柯里化 (Currying) 是一种<strong>将多个参数的函数转换为单个参数函数</strong>的技术</p><p>转换完毕之后的函数:<strong>只传递函数的一部分参数来调用，让他返回一个新的函数去处理剩下的参数。</strong></p><p><strong>例子:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调整函数 sum</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写为 可以实现如下效果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>))<span class="comment">// </span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><code>sum</code>改为接收一个参数，返回一个新函数</li><li>新函数内部将<strong>参数1</strong>，<strong>参数2</strong>累加并返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="柯里化面试题-全局变量"><a href="#柯里化面试题-全局变量" class="headerlink" title="柯里化面试题-全局变量"></a>柯里化面试题-全局变量</h3><p>柯里化在面试的时候一般以笔试题出现,比如</p><p><strong>需求:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c, d, e</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d + e</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改写函数sum实现:参数传递到5个即可实现累加</span></span><br><span class="line"><span class="comment">// sum(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3,4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4,5)</span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>接收不定长参数</li><li>存储已传递的参数</li><li>判断长度<ol><li>满足5:累加</li><li>不满足:继续返回<strong>函数本身</strong></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存参数</span></span><br><span class="line"><span class="keyword">let</span> nums = []</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currySum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 将传入的参数 保存到数组中</span></span><br><span class="line">  nums.<span class="title function_">push</span>(...args)</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="comment">// 累加</span></span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curv</span>) =&gt;</span> prev + curv, <span class="number">0</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> currySum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="柯里化面试题-使用闭包"><a href="#柯里化面试题-使用闭包" class="headerlink" title="柯里化面试题-使用闭包"></a>柯里化面试题-使用闭包</h3><p><strong>需求:</strong></p><ol><li>使用<strong>闭包</strong>将上一节代码中的全局变量,保护起来</li><li>支持自定义累加的参数个数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMaker</span>(<span class="params">length</span>)&#123;</span><br><span class="line">    <span class="comment">// 逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 支持5个累加</span></span><br><span class="line"><span class="keyword">const</span> sum5 = <span class="title function_">sumMaker</span>(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 支持7个累加</span></span><br><span class="line"><span class="keyword">const</span> sum7 = <span class="title function_">sumMaker</span>(<span class="number">7</span>)</span><br><span class="line"><span class="title function_">sum7</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义外层函数:<ol><li>定义参数<code>length</code></li><li>将全局变量迁移到函数内</li></ol></li><li>定义内层函数:<ol><li>参数长度判断,使用传入的参数<code>length</code></li><li>直接复用上一节的逻辑,并返回</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMaker</span>(<span class="params">length</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nums = []</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="comment">// 将传递的参数保存到数组中</span></span><br><span class="line">    nums.<span class="title function_">push</span>(...args)</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> &gt;= length) &#123;</span><br><span class="line">        <span class="comment">// 累加 并返回</span></span><br><span class="line">      <span class="keyword">return</span> nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curv</span>) =&gt;</span> prev + curv, <span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> inner</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持5个累加</span></span><br><span class="line"><span class="keyword">const</span> sum5 = <span class="title function_">sumMaker</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum5</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>))</span><br><span class="line"><span class="comment">// 支持7个累加</span></span><br><span class="line"><span class="keyword">const</span> sum7 = <span class="title function_">sumMaker</span>(<span class="number">7</span>)</span><br><span class="line"><span class="title function_">sum7</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="柯里化实际应用-类型判断"><a href="#柯里化实际应用-类型判断" class="headerlink" title="柯里化实际应用-类型判断"></a>柯里化实际应用-类型判断</h3><p>通过<strong>参数复用</strong>,实现一个<strong>类型判断生成器函数</strong></p><p><strong>需求:</strong></p><ol><li>将下列4个类型判断函数,改写为通过函数<code>typeOfTest</code>动态生成</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有如下4个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isUndefined</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isNumber</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为通过 typeOfTest 生成:</span></span><br><span class="line"><span class="keyword">const</span> typeOfTest =<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">// 参数 和 逻辑略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> isUndefined = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;undefined&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isString = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isFunction = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过 isUndefined,isNumber,isString,isFunction 来判断类型:</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">isUndefined</span>(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isNumber</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">isString</span>(<span class="string">&#x27;memeda&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isFunction</span>(<span class="function">() =&gt;</span> &#123; &#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><code>typeOfTest</code>接收参数<code>type</code>用来接收判断的类型</li><li>内部返回新函数,接收需要判断的值,并基于<code>type</code>进行判断</li><li>使用箭头函数改写为最简形式~~<a href="https://github.com/axios/axios/blob/v1.x/lib/utils.js#L20">传送门</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">typeOfTest</span> = type =&gt; <span class="function"><span class="params">thing</span> =&gt;</span> <span class="keyword">typeof</span> thing === type  </span><br></pre></td></tr></table></figure><h3 id="柯里化实际应用-固定参数"><a href="#柯里化实际应用-固定参数" class="headerlink" title="柯里化实际应用-固定参数"></a>柯里化实际应用-固定参数</h3><p>依旧是一个<strong>参数复用</strong>的实际应用</p><p><strong>需求:</strong></p><ol><li>将如下3个请求的函数(都是<strong>post</strong>请求),变为通过<code>axiosPost</code>函数动态生成</li><li>实现函数<code>axiosPost</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将如下3个请求,改写为调用 axiosPost函数即可实现</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url1&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url2&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url3&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">axiosPost</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 参数,逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">axiosPost</span>(<span class="string">&#x27;url1&#x27;</span>, data1)</span><br><span class="line"><span class="title function_">axiosPost</span>(<span class="string">&#x27;url2&#x27;</span>, data2)</span><br><span class="line"><span class="title function_">axiosPost</span>(<span class="string">&#x27;url3&#x27;</span>, data3)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>函数内部固定请求方法,post</li><li>函数内部调用<code>axios</code>发请求即可</li><li><code>axios</code>内部就是这样实现的<a href="https://github.com/axios/axios/blob/v1.x/dist/axios.js#L2667">传送门:</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">axiosPost</span> = (<span class="params">url, data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">    url, data,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结:</p><ol><li><p>函数柯里化是一种函数式编程思想:<strong>将多个参数的函数转换为单个参数函数,调用时返回新的函数接收剩余参数</strong></p></li><li><p>常见面试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c, d, e</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d + e</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改写函数sum实现:参数传递到5个即可实现累加</span></span><br><span class="line"><span class="comment">// sum(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3,4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4,5)</span></span><br></pre></td></tr></table></figure></li><li><p>常见应用:固定参数,比如<code>axios</code>中的:</p><ol><li><a href="https://github.com/axios/axios/blob/v1.x/lib/utils.js#L20">类型判断函数</a></li><li><a href="https://github.com/axios/axios/blob/v1.x/dist/axios.js#L2667">get,post,put等别名方法</a></li></ol></li></ol><h2 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h2><ol><li>实现Promise的核心用法</li><li>Promise的静态方法</li><li>实现Promise的静态方法</li></ol><p>首先明确Promise的核心用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="comment">// reject(&#x27;error&#x27;)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// then方法的参数1: 状态为成功的回调函数</span></span><br><span class="line"><span class="comment">// then方法的参数2: 状态为失败的回调函数</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="手写Promise-构造函数"><a href="#手写Promise-构造函数" class="headerlink" title="手写Promise-构造函数"></a>手写Promise-构造函数</h3><p><strong>需求:</strong></p><ol><li>实现MyPromise类，可以用如下的方式实例化</li><li>实例化时传入回调函数<ol><li>回调函数立刻执行</li><li>回调函数接收函数<code>resolve</code>和<code>reject</code></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve() </span></span><br><span class="line">  <span class="comment">// reject() </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义类<code>MyPromise</code></li><li>实现构造函数，接收<code>executor</code>–传入的回调函数</li><li>构造函数中定义<code>resolve</code>和<code>reject</code>并传入<code>executor</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">// 2. 构造函数 </span></span><br><span class="line">  <span class="comment">// executor 执行器，实例化时立刻调用</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 3. 定义 resolve reject 传入executor</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolve-call&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reject-call&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/17/64de3335713d9.png" alt="promise1.png"></p><h3 id="手写Promise-状态、成功or失败原因"><a href="#手写Promise-状态、成功or失败原因" class="headerlink" title="手写Promise-状态、成功or失败原因"></a>手写Promise-状态、成功or失败原因</h3><p><strong>需求:</strong></p><ol><li><code>MyPromise</code>增加<code>state</code>属性，只能是如下3个值<ol><li><code>pending</code>:待定，默认状态</li><li><code>fulfilled</code>:已兑现，操作成功</li><li><code>rejected</code>:已拒绝，操作失败</li></ol></li><li><code>MyPromise</code>增加<code>result</code>属性，记录成功&#x2F;失败原因</li><li>调用<code>resolve</code>或<code>reject</code>,修改状态,并记录成功&#x2F;失败原因</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;成功结果&#x27;)</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;失败原因&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义常量保存状态，避免<strong>硬编码</strong></li><li><code>MyPromise</code>中定义<ol><li>属性:<code>state</code>保存状态，<code>result</code>成功&#x2F;失败原因</li><li>修改<code>state</code>的私有方法，修改状态并记录<code>result</code></li><li>注意:<code>state</code>只有在<code>pending</code>时，才可以修改，且不可逆</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义常量保存状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">// 2. 定义属性 state（状态） reason（成功/失败原因）</span></span><br><span class="line">  state = <span class="variable constant_">PENDING</span>  <span class="comment">// 默认状态</span></span><br><span class="line">  result = <span class="literal">undefined</span>  <span class="comment">// 成功或失败的原因 默认不知道</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 3. 实现 resolve和reject内部逻辑</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// if(this.state !== PENDING) &#123;</span></span><br><span class="line">        <span class="comment">//     return 如果状态不是等待，后面不执行 状态确定就不能改变</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// this.state = FULFILLED</span></span><br><span class="line">        <span class="comment">// this.result = result</span></span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 提取resolve和reject内部公共逻辑</span></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/17/64de3335a27f7.png" alt="promise2.png"></p><h3 id="手写Promise-then方法的核心功能"><a href="#手写Promise-then方法的核心功能" class="headerlink" title="手写Promise-then方法的核心功能"></a>手写Promise-then方法的核心功能</h3><p><strong>需求:</strong></p><ol><li>then方法的回调函数1: 状态变为<code>fulfilled</code>时触发，并获取成功结果</li><li>then方法的回调函数2: 状态变为<code>rejected</code>时触发，并获取失败原因</li><li>then方法的回调函数1或2没有传递的特殊情况处理，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then#%E5%8F%82%E6%95%B0">参考:then方法的参数</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;成功结果&#x27;)</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;失败原因&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>增加<code>then</code>方法，根据不同的状态执行对应的回调函数，并传入<code>result</code><ol><li>参数1:成功的回调函数</li><li>参数2:失败的回调函数</li></ol></li><li>没有传递<code>onFulfilled</code>,<code>onRejected</code>时，设置默认值(参考文档)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1. 增加then方法，根据不同的状态执行对应的回调函数</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 处理未传入回调函数的特殊情况</span></span><br><span class="line">      <span class="comment">// 如果不是函数，设置为一个 接受一个参数，直接返回该参数的函数</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function">(<span class="params">value</span>) =&gt;</span> value</span><br><span class="line">      <span class="comment">// 不是函数，设置一个为 接收一个参数，使用 throw 抛出的函数</span></span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 根据状态，调用不同的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="comment">// 成功的状态</span></span><br><span class="line">        <span class="comment">// 调用对应的回调函数，并传递结果</span></span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/17/64de33344950c.png" alt="promise3.png"></p><h3 id="手写Promise-then方法支持异步和多次调用（非链式）"><a href="#手写Promise-then方法支持异步和多次调用（非链式）" class="headerlink" title="手写Promise-then方法支持异步和多次调用（非链式）"></a>手写Promise-then方法支持异步和多次调用（非链式）</h3><p><strong>需求:</strong></p><ol><li>实例化传入的回调函数,内部支持异步操作</li><li>then方法支持多次调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&#x27;成功结果&#x27;)</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败原因&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success1:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error1:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success2:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error2:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success3:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error3:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义属性,保存传入的回调函数:[]</li><li>调用<code>then</code>方法并且状态为<code>pending</code>时保存传入的成功&#x2F;失败回调函数</li><li>调用<code>resolve</code>和<code>reject</code>时执行上一步保存的回调函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 1. 添加handlers属性保存then方法添加的回调函数</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="comment">// 调用保存在handlers中的回调函数</span></span><br><span class="line">      <span class="comment">// 从开头部分取出回调函数执行</span></span><br><span class="line">      <span class="comment">// while(this.handlers.length &gt; 0) &#123;</span></span><br><span class="line">      <span class="comment">//    通过解构获取对应的回调函数</span></span><br><span class="line">      <span class="comment">//    const &#123; onFulfilled &#125; = this.handlers.shift()</span></span><br><span class="line">      <span class="comment">//    onFulfilled(this.result)</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 4. 调用runHandlers 执行回调函数</span></span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="comment">// 4. 调用runHandlers 执行回调函数</span></span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 抽取方法 执行 fulfilled/rejected状态时的回调函数</span></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">          <span class="comment">// 成功</span></span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 失败</span></span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 2. 状态为 pending 时,状态还没改变，回调函数还不能执行，将回调函数添加到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        onFulfilled, onRejected</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-链式编程-成功状态-普通返回值"><a href="#手写Promise-链式编程-成功状态-普通返回值" class="headerlink" title="手写Promise-链式编程-成功状态+普通返回值"></a>手写Promise-链式编程-成功状态+普通返回值</h3><p><strong>需求:</strong></p><ol><li><code>then</code>的链式编程</li><li>目前只考虑<code>resolve</code>内部返回普通值的情况</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>调整<code>then</code>方法，返回一个新的<code>MyPromise</code>对象</li><li>内部获取<code>onFulfilled</code>的执行结果,传入<code>resolve</code>方法继续执行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;</span><br><span class="line">    <span class="comment">// 1. 创建并返回新的Promise对象</span></span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">          <span class="comment">// 成功状态</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        <span class="comment">// 2. 继续调用resolve方法 then方法返回的Promise对象的resolve</span></span><br><span class="line">        <span class="comment">// 传递成功的结果给下一个 then</span></span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/18/64df4c7cc60ec.png" alt="promise4.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7da4b18.png" alt="promise5.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7569adf.png" alt="promise6.png"></p><h3 id="手写Promise-链式编程-成功状态-返回Promise"><a href="#手写Promise-链式编程-成功状态-返回Promise" class="headerlink" title="手写Promise-链式编程-成功状态+返回Promise"></a>手写Promise-链式编程-成功状态+返回Promise</h3><p><strong>需求:</strong></p><ol><li><code>then</code>的链式编程</li><li>目前考虑<code>resolve</code>内部返回<code>MyPromise</code>的情况</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>内部获取<code>onFulfilled</code>的执行结果:</li><li>如果是<code>MyPromise</code>实例，继续<code>then</code>下去并传入<code>resolve</code>和<code>reject</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        <span class="comment">// 1. 判断是否为MyPromise的实例</span></span><br><span class="line">        <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">          <span class="comment">// 2. 继续调用then方法 传入 resolve 和 reject</span></span><br><span class="line">          res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/18/64df4c7a1e191.png" alt="promise7.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7b1b34c.png" alt="promise8.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7da8e76.png" alt="promise9.png"></p><h3 id="手写Promise-链式编程-失败状态"><a href="#手写Promise-链式编程-失败状态" class="headerlink" title="手写Promise-链式编程-失败状态"></a>手写Promise-链式编程-失败状态</h3><p><strong>需求:</strong></p><ol><li><code>then</code>的第二个回调函数，执行<code>reject</code>时的链式编程</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>参考<code>resolve</code>的逻辑</li><li>先实现功能,再抽取为函数直接调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="comment">// const res = onFulfilled(this.result)</span></span><br><span class="line">        <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">        <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//   resolve(res)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 参考成功状态的逻辑实现 失败状态</span></span><br><span class="line">        <span class="comment">// const res = onRejected(this.result)</span></span><br><span class="line">        <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">        <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//   reject(res)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 抽取 then中的逻辑，并替换掉原本代码</span></span><br><span class="line">  #<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">     <span class="comment">// 调用回调函数 获取执行的结果</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>) </span><br><span class="line">    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        <span class="comment">// res 是promise对象 then 方法</span></span><br><span class="line">      res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-链式编程-支持异步"><a href="#手写Promise-链式编程-支持异步" class="headerlink" title="手写Promise-链式编程-支持异步"></a>手写Promise-链式编程-支持异步</h3><p><strong>需求:</strong></p><ol><li>执行异步操作时，支持链式编程</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    .<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>then的内部将<code>resolve</code>,<code>reject</code>也推送到数组中</li><li>调整<code>runHandlers</code>函数，内部直接调用<code>runPromise</code>函数即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 2. 解构出resolve,reject执行和上一步一样的逻辑</span></span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected, resolve, reject &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 将 resolve和reject也推送到数组中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected, resolve, reject</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-使用微任务"><a href="#手写Promise-使用微任务" class="headerlink" title="手写Promise-使用微任务"></a>手写Promise-使用微任务</h3><p><strong>需求:</strong></p><ol><li>如下代码打印结果为<code>1,2,4,3</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>使用<code>queueMicrotask</code>包裹<code>runPromise</code>的内部逻辑即可</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask">传送门:MDN-queueMicrotask</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide">传送门:MDN-queueMicrotask使用指南</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 使用queueMicrotask 包裹内部逻辑即可</span></span><br><span class="line">  <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><p>手写<code>Promise</code>的核心代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存状态的常量 避免后续 硬编码（代码中写死某个值）</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义类 后续new实例化</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">      <span class="comment">// 状态</span></span><br><span class="line">      state = <span class="variable constant_">PENDING</span></span><br><span class="line">      <span class="comment">// 成功、失败原因 结果</span></span><br><span class="line">      result = <span class="literal">undefined</span> <span class="comment">// 成功或失败的原因 默认不知道</span></span><br><span class="line">      <span class="comment">// 待执行的回调函数 异步的回调函数 [&#123; onFulfilled,onRejected,resolve,reject &#125;]</span></span><br><span class="line">      handlers = []</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 构造函数 resolve定义 reject定义 执行传入的回调函数</span></span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;  <span class="comment">// 接收 new MyPromise((resolve,reject)=&gt; &#123;console.log(&#x27;立刻执行&#x27;)&#125; ) 传进来的回调函数，然后 resolve，reject 传给回调函数executor</span></span><br><span class="line">        <span class="comment">// 定义 resolve和reject</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 抽取封装 #changeState</span></span><br><span class="line">        <span class="comment">// if(this.state !== PENDING) &#123;</span></span><br><span class="line">        <span class="comment">//     return 如果状态不是等待，后面不执行 状态确定就不能改变</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// this.state = FULFILLED</span></span><br><span class="line">        <span class="comment">// this.result = result</span></span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 调用保存在handlers中的回调函数</span></span><br><span class="line">          <span class="comment">// 从开头部分取出回调函数执行</span></span><br><span class="line">          <span class="comment">// while(this.handlers.length &gt; 0) &#123;</span></span><br><span class="line">          <span class="comment">//    通过解构获取对应的回调函数</span></span><br><span class="line">          <span class="comment">//    const &#123; onFulfilled &#125; = this.handlers.shift()</span></span><br><span class="line">          <span class="comment">//    onFulfilled(this.result)</span></span><br><span class="line">          <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">          <span class="comment">// 调用runHandlers 执行回调函数</span></span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收传入的执行器，接收定义的resolve和reject</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据状态执行回调函数的 私有方法</span></span><br><span class="line">      <span class="comment">// 执行回调函数，取出数组中的回调函数，执行到没有为止 用shift()开头弹出</span></span><br><span class="line">      #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 循环执行到数组长度为0为止</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 2. 解构出resolve,reject执行和上一步一样的逻辑</span></span><br><span class="line">          <span class="keyword">const</span> &#123; onFulfilled, onRejected, resolve, reject &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;  <span class="comment">// this.state = &#x27;fulfilled&#x27;硬编码</span></span><br><span class="line">          <span class="comment">// 成功 执行 和 then 中类似的逻辑</span></span><br><span class="line">          <span class="comment">// 获取结果，根据是否为Promise以及状态调用对应的逻辑</span></span><br><span class="line">          <span class="comment">// onFulfilled(this.result)</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            <span class="comment">// onRejected(this.result)</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//提取resolve，reject内部公共逻辑  修改状态的（pending时才可以修改，执行到没有为止） 私有方法</span></span><br><span class="line">      #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// then方法，接收成功和失败的回调函数 根据不同的状态执行对应的回调函数</span></span><br><span class="line">      <span class="comment">// 链式编程 promise对象.then(xxx).then(xxx)</span></span><br><span class="line">      <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">        <span class="comment">// onFulfilled 和 onRejected 的非空判断</span></span><br><span class="line">        <span class="comment">// 处理未传入回调函数的特殊情况</span></span><br><span class="line">        <span class="comment">// 如果不是函数，设置为一个 接受一个参数，直接返回该参数的函数</span></span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">        <span class="comment">// 不是函数，设置一个为 接收一个参数，使用 throw 抛出的函数</span></span><br><span class="line">        onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证链式编程，返回Promise</span></span><br><span class="line">        <span class="comment">// 创建一个新的Promise对象 并返回</span></span><br><span class="line">        <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//  根据状态，调用不同的回调函数</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">            <span class="comment">// const res = onFulfilled(this.result)</span></span><br><span class="line">            <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">            <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">            <span class="comment">// &#125; else &#123;</span></span><br><span class="line">            <span class="comment">//   resolve(res)</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// 抽取封装逻辑</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">             <span class="comment">//  参考成功状态的逻辑实现 失败状态</span></span><br><span class="line">             <span class="comment">// const res = onRejected(this.result)</span></span><br><span class="line">             <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">             <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">             <span class="comment">// &#125; else &#123;</span></span><br><span class="line">             <span class="comment">//   reject(res)</span></span><br><span class="line">             <span class="comment">// &#125;</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 状态为 pending 时,状态还没改变，回调函数还不能执行，将回调函数添加到数组中</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">              <span class="comment">//  将 resolve和reject也推送到数组中</span></span><br><span class="line">              onFulfilled, onRejected, resolve, reject</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 满足执行条件，执行回调函数的 私有方法</span></span><br><span class="line">      #<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用微任务队列</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 调用回调函数 获取执行的结果</span></span><br><span class="line">          <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">          <span class="comment">// 判断是否为MyPromise的实例</span></span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">            <span class="comment">// res 是Promise对象 then 方法</span></span><br><span class="line">            <span class="comment">// 继续调用then方法 传入 resolve 和 reject</span></span><br><span class="line">            res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是普通的值，直接resolve</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/18/64df78c8b6ed3.png" alt="promise10.png"><br><img src="https://bu.dusays.com/2023/08/18/64df78c8e2db3.png" alt="promise11.png"></p><h3 id="手写Promise-实例方法catch"><a href="#手写Promise-实例方法catch" class="headerlink" title="手写Promise-实例方法catch"></a>手写Promise-实例方法catch</h3><p><strong>需求:</strong></p><ol><li>实现实例方法<code>catch</code>,可以实现如下调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">文档</a>,catch等同于:<code>then(undefined,onRjected)</code></li><li>直接添加<code>catch</code>方法，内部调用<code>then</code></li><li>使用<code>try-catch</code>包裹<code>runPromise</code>,出错时,调用<code>reject</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加catch方法，内部参考文档的方式调用then即可 </span></span><br><span class="line"><span class="comment">// 实例方法：catch 本质  then(undefined, onRjected)</span></span><br><span class="line"><span class="keyword">catch</span>(onRjected) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRjected)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理回调函数执行结果</span></span><br><span class="line">  #<span class="title function_">runPromise</span>(<span class="params">callBack, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 捕获异常，通过 reject 继续传递</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用回调函数 获取执行的结果</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title function_">callBack</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">          <span class="comment">// res是Promise对象 then方法</span></span><br><span class="line">          res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果是普通的值,直接resolve</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="手写Promise-实例方法finally"><a href="#手写Promise-实例方法finally" class="headerlink" title="手写Promise-实例方法finally"></a>手写Promise-实例方法finally</h3><p><strong>需求:</strong></p><ol><li>无论成功失败都会执行<code>finally</code>的回调函数</li><li>回调函数不接受任何参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally执行啦&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally">文档</a>:finally方法类似于调用<code>then(onFinally,onFinally)</code>,且不接受任何回调函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例方法：finally</span></span><br><span class="line"><span class="title function_">finally</span>(<span class="params">onFinally</span>) &#123;</span><br><span class="line">    <span class="comment">// 将传入的回调函数，作为成功/失败的回调函数</span></span><br><span class="line">    <span class="comment">// 成功/失败都会执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(onFinally,onFinally)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法resolve"><a href="#手写Promise-静态方法resolve" class="headerlink" title="手写Promise-静态方法resolve"></a>手写Promise-静态方法resolve</h3><p><strong>需求:</strong></p><ol><li>返回一个带有成功原因的<code>Promise</code>对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个值为2的Promise对象</span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 直接返回传入的p</span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>增加静态方法<code>resolve</code>，根据传入的值返回不同的结果即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 静态方法 resolve</span></span><br><span class="line">  <span class="comment">// 根据传入的值，返回不同的结果即可</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是Promise 返回Promise，后续即可链式调用</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果都不是的话，直接返回一个新的Promise对象 将value传递给resolve</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法reject"><a href="#手写Promise-静态方法reject" class="headerlink" title="手写Promise-静态方法reject"></a>手写Promise-静态方法reject</h3><p><strong>需求:</strong></p><ol><li>返回一个带有拒绝原因的<code>Promise</code>对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>添加静态方法内部返回有拒绝原因的<code>Promise</code>对象即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个两个方法在axios拦截器里可以发现到。</p><h3 id="手写Promise-静态方法race"><a href="#手写Promise-静态方法race" class="headerlink" title="手写Promise-静态方法race"></a>手写Promise-静态方法race</h3><p><strong>需求:</strong></p><ol><li>接收Promise数组<ol><li>第一个Promise成功或失败时，返回一个该Promise对象及原因</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">race</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value:&#x27;</span>,value)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>内部返回新的Promise对象:<ol><li>参数判断:<ol><li>不是数组:报错</li><li>是数组:挨个解析<ol><li>任意一个Promise对象成功或失败，直接resolve或reject即可</li></ol></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="comment">// race的后面需要 .then.catch</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 参数校验 传入的是数组才继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">      <span class="comment">// 如果传入的promises是空数组，则返回的promise就将永远等待</span></span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 Promise.resolve进行处理，只要有任何一个为 成功/拒绝 即可响应结果</span></span><br><span class="line">        <span class="comment">// MyPromise.resolve 传入的无论是不是Promise--&gt;都变成Promise</span></span><br><span class="line">        <span class="comment">// 如果不处理的话，传入普通的值，会直接报错</span></span><br><span class="line">        <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(item).<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 参数错误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法all"><a href="#手写Promise-静态方法all" class="headerlink" title="手写Promise-静态方法all"></a>手写Promise-静态方法all</h3><p><strong>需求:</strong></p><ol><li>接收Promise数组，<ol><li>所有Promise都成功时，返回一个成功的Promise对象及成功数组</li><li>任何一个Promise失败，返回一个失败的Promise对象及第一个失败原因</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">all</span>([promise1, promise2, promise3]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><p>包裹一个新的Promise并返回，内部进行参数校验</p><ol><li><p>非数组:报错</p></li><li><p>数组:循环挨个解析</p><ol><li><p>长度为0:直接返回成功状态的Promise</p></li><li><p>长度不为0:挨个解析:forEach</p><ol><li><p>不是Promise对象:直接记录结果并判断是否解析完毕</p></li><li><p>是Promise对象:调用then</p><ol><li>成功:记录结果并判断是否解析完毕</li><li>失败:直接reject</li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="comment">// 本质：外部可以 then catch</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 参数校验</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">       <span class="comment">// 是数组再继续执行</span></span><br><span class="line">       <span class="comment">// 存储结果</span></span><br><span class="line">       <span class="keyword">const</span> result = []</span><br><span class="line">       <span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">// 记录结果的个数，判断是否完结</span></span><br><span class="line">       <span class="comment">// 如果长度为0 直接返回 fulfilled状态的Promise即可</span></span><br><span class="line">       <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">resolve</span>(promises)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 挨个处理</span></span><br><span class="line">       promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">           <span class="comment">// 如果是Promise</span></span><br><span class="line">           item.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">             count++</span><br><span class="line">             <span class="comment">// 这么做的目的是保证 结果的顺序 和 promise每一项的一致</span></span><br><span class="line">             result[index] = res</span><br><span class="line">             count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">           &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// 任何一个失败 无视其他的promise直接 reject即可</span></span><br><span class="line">             <span class="title function_">reject</span>(err)</span><br><span class="line">           &#125;)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 如果不是Promise 原样添加在数组中</span></span><br><span class="line">           count++</span><br><span class="line">           result[index] = item</span><br><span class="line">           <span class="comment">// 全部处理完毕时，响应结果</span></span><br><span class="line">           count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// </span></span><br><span class="line">       <span class="comment">// 错误提示</span></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法allSettled"><a href="#手写Promise-静态方法allSettled" class="headerlink" title="手写Promise-静态方法allSettled"></a>手写Promise-静态方法allSettled</h3><p><strong>需求:</strong></p><ol><li>传入Promise数组，当所有对象都已敲定时</li><li>返回一个新的Promise对象及以数组形式保存的结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取传入的Promise数组 的 敲定状态 和结果</span></span><br><span class="line"><span class="comment">// 包装到对象中 &#123; value：&#x27;成功的值&#x27; , reason: &#x27;失败原因&#x27; , status: &#x27;状态&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).</span><br><span class="line">  <span class="title function_">then</span>(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(results) &#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>增加静态方法<code>allSettled</code></li><li>内部逻辑和<code>all</code>类似，需要特别注意的地方:<ol><li>成功和失败的原因都会通过对象记录起来</li><li>返回一个记录了成功<code>&#123;state:FULFILLED,value:&#39;xxx&#39;&#125;</code>失败<code>&#123;state:REJECTED,reason:&#39;xxx&#39;&#125;</code>的结果数组</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 参数校验</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">         <span class="keyword">let</span> result = []<span class="comment">// 结果数组</span></span><br><span class="line">         <span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">// 计数器</span></span><br><span class="line">         <span class="comment">// 空数组直接返回</span></span><br><span class="line">         <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">resolve</span>(promises)</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 挨个处理内部的Promise对象</span></span><br><span class="line">         promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="comment">// 使用resolve转为promise统一处理</span></span><br><span class="line">           <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(item).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// 成功状态</span></span><br><span class="line">             count++</span><br><span class="line">             result[index] = &#123;</span><br><span class="line">               <span class="attr">state</span>: <span class="variable constant_">FULFILLED</span>,</span><br><span class="line">               value</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// 处理完毕之后 resolve</span></span><br><span class="line">             count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">           &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// 失败状态</span></span><br><span class="line">             count++</span><br><span class="line">             <span class="comment">// 失败状态 值为 reason</span></span><br><span class="line">             result[index] = &#123;</span><br><span class="line">               <span class="attr">state</span>: <span class="variable constant_">REJECTED</span>,</span><br><span class="line">               reason</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// 成功和失败最终都对应到 resolve</span></span><br><span class="line">             count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">           &#125;)</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 不是数组，报错</span></span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法any"><a href="#手写Promise-静态方法any" class="headerlink" title="手写Promise-静态方法any"></a>手写Promise-静态方法any</h3><p><strong>需求:</strong>-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any">传送门</a></p><ol><li>传入<code>Promise</code>数组，<ol><li>任何一个<code>Promise</code>对象敲定时，返回一个新的<code>Promise</code>对象，及对应的结果</li><li>所有Promise都被拒绝时，返回一个包含所有拒绝原因的<code>AggregateError</code>错误数组</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&#x27;success1&#x27;)</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error3&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">any</span>([promise1, promise2, promise3]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>类似于<code>all</code>核心区别<ol><li>数组长度为0，直接返回错误数组</li><li>任何一个成功，直接成功</li><li>通过数组记录失败原因，都失败时响应错误</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">      <span class="keyword">let</span> errors = []</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">      <span class="comment">// AggregateError包含多个错误对象的 单个错误对象（错误对象容器）</span></span><br><span class="line">      <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span>))</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 挨个处理</span></span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 只要一个成功 就成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(value)</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          count++</span><br><span class="line">          errors.<span class="title function_">push</span>(reason)</span><br><span class="line">          <span class="comment">// 如果没有一个promise成功 就把所有的错误原因合并到一起 一起抛出</span></span><br><span class="line">          count++ === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(errors))</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 参数格式有误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise需要掌握的点："><a href="#promise需要掌握的点：" class="headerlink" title="promise需要掌握的点："></a>promise需要掌握的点：</h3><ol><li><p>组织异步，回调函数 &#x3D;&gt; 链式编程</p></li><li><p>async await : await会等待后面Promise成功，并获取结果，try-catch捕获异常</p></li><li><p>多个异步管理：</p><ol><li><p>all ：都成功，第一个失败</p></li><li><p>race：第一个成功或失败</p></li><li><p>allSettled: 所有都敲定（成功&#x2F;失败），以对象数组的形式获取结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;成功原因&#x27;</span>,</span><br><span class="line">        <span class="attr">status</span>:<span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">reason</span>: <span class="string">&#x27;失败原因&#x27;</span></span><br><span class="line">        <span class="attr">status</span>:<span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>any : 第一个成功，或者都失败</p></li><li><p><strong>被追问</strong>：用在哪里：</p><ol><li><p>all：多个接口数据，获取完毕再渲染</p></li><li><p>race: 多个服务器的相同接口，都可以获取同一份数据，为了让用户尽可能的拿到结果，race调用相同的多个接口，只要拿到就渲染。</p><p>1.服务器1–新闻接口</p><p>2.服务器2–新闻接口</p><p>3.同时调用，哪个先获取到，就直接渲染</p></li><li><p>allSettled,any 了解过代码</p></li></ol></li></ol><p><strong>手写promise</strong></p><ol><li>构造函数：传入回调函数，并接收resolve和reject</li><li>状态和成功&#x2F;失败结果：<ol><li>定义常量保存状态，定义实例属性保存状态和结果</li><li>resolve和reject中修改状态记录结果</li></ol></li><li>then方法<ol><li>多次调用：用数组来保存回调函数</li><li>链式调用：内部返回Promise</li></ol></li><li>实例方法：<ol><li>catch: 本质就是 then(undefined,onRejected)</li><li>finally: 本质 then(onFinally,onFinally)</li></ol></li><li>静态方法</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 柯里化 </tag>
            
            <tag> 手写Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原理一</title>
      <link href="/posts/882eae.html"/>
      <url>/posts/882eae.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS原理"><a href="#JS原理" class="headerlink" title="JS原理"></a>JS原理</h1><h3 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h3><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">call🍧</button></li><li class="tab"><button type="button" data-href="#test-2">apply🍧</button></li><li class="tab"><button type="button" data-href="#test-3">bind🍧</button></li><li class="tab"><button type="button" data-href="#test-4">剩余参数🍧</button></li><li class="tab"><button type="button" data-href="#test-5">Promise🍧</button></li><li class="tab"><button type="button" data-href="#test-6">URLSearchParams🍧</button></li><li class="tab"><button type="button" data-href="#test-7">Object.create🍧</button></li><li class="tab"><button type="button" data-href="#test-8">Object.assign🍧</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>函数的<code>call</code>方法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以指定的this调用函数，并通过 从第二个参数开始依次传递参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">name,drink</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向obj  &#123;name: &#x27;kilito&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(drink)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call 参数1: this  </span></span><br><span class="line"><span class="comment">//      参数2: 2-n函数的参数</span></span><br><span class="line">func.<span class="title function_">call</span>(obj,<span class="string">&#x27;kilito&#x27;</span>,<span class="string">&#x27;咖啡&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol start="2"><li>函数的<code>apply</code>方法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以指定的this调用函数，并通过 数组的形式 传递参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">name,drink</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向obj  &#123;name: &#x27;kilito&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(drink)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apply 参数1: this</span></span><br><span class="line"><span class="comment">//       参数2: 以数组的形式传入参数</span></span><br><span class="line">func.<span class="title function_">apply</span>(obj,[<span class="string">&#x27;xiaoqing&#x27;</span>,<span class="string">&#x27;咖啡&#x27;</span>])</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol start="3"><li>函数的<code>bind</code>方法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">food, drink</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// &#123;name: &#x27;kilito&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(food)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(drink)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回一个绑定了this的新函数！</span></span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">bind</span>(obj, <span class="string">&#x27;花菜&#x27;</span>)</span><br><span class="line"><span class="title function_">bindFunc</span>(<span class="string">&#x27;可乐&#x27;</span>)</span><br><span class="line"><span class="comment">// const bindFunc = func.bind(obj)</span></span><br><span class="line"><span class="comment">// bindFunc(&#x27;花菜&#x27;,可乐&#x27;)</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><ol start="4"><li>剩余参数-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions#%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args)<span class="comment">// 以数组的形式获取传入的所有参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;西蓝花&#x27;</span>,<span class="string">&#x27;西葫芦&#x27;</span>,<span class="string">&#x27;西洋参&#x27;</span>,<span class="string">&#x27;西芹&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-5"><ol start="5"><li>Promise核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">`成功啦--<span class="subst">$&#123;num&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">`失败啦--<span class="subst">$&#123;num&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-6"><ol start="6"><li>URLSearchParams核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化时支持传入JS对象</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line"><span class="comment">// toString方法 返回搜索参数组成的字符串，可直接使用在 URL 上。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-7"><ol start="7"><li>Object.create核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将传入的对象作为原型，创建一个新对象（浅拷贝）</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(person)</span><br><span class="line">clone.<span class="property">name</span> = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line">clone.<span class="property">foods</span>.<span class="title function_">push</span>(<span class="string">&#x27;西北风&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone.<span class="property">foods</span> === person.<span class="property">foods</span>)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-8"><ol start="8"><li>Object.assign核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> son = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数1 目标对象</span></span><br><span class="line"><span class="comment">// 参数2 源对象</span></span><br><span class="line"><span class="comment">// 将源对象的自身属性复制到目标对象，并返回目标对象</span></span><br><span class="line"><span class="keyword">const</span> returnTarget = <span class="title class_">Object</span>.<span class="title function_">assign</span>(son, person)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(returnTarget === son)<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">name</span>)<span class="comment">// itheima</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">foods</span> === person.<span class="property">foods</span>)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tabs" id="xmind"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#xmind-1">this🍧</button></li><li class="tab"><button type="button" data-href="#xmind-2">继承🍧</button></li><li class="tab"><button type="button" data-href="#xmind-3">class🍧</button></li><li class="tab"><button type="button" data-href="#xmind-4">fetch🍧</button></li><li class="tab"><button type="button" data-href="#xmind-5">geneator🍧</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="xmind-1"><p><img src="https://bu.dusays.com/2023/08/17/64dda1ff4a71d.png" alt="xmthis.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-2"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a4e42783.png" alt="xmjichen.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-3"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a44529ff.png" alt="xmclass.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-4"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a48a0993.png" alt="xmfetch.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-5"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a435f5dc.png" alt="xmgeneator.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="JS中的this"><a href="#JS中的this" class="headerlink" title="JS中的this"></a>JS中的this</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">传送门：MDN-this</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">传送门：MDN-call</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">传送门：MDN-apply</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">传送门：MDN-bind</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">传送门：MDN-箭头函数</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/rest_parameters">传送门：MDN-剩余参数</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">传送门：MDN-Symbol</a></p></blockquote><h3 id="如何确认this指向："><a href="#如何确认this指向：" class="headerlink" title="如何确认this指向："></a>如何确认this指向：</h3><p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）</p><p><strong>谁调用就是谁，直接调用就是window</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// person</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// 直接调用就是 window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inner</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// person</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// window</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayHi</span>()</span><br><span class="line">person.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="如何改变this指向"><a href="#如何改变this指向" class="headerlink" title="如何改变this指向"></a>如何改变this指向</h3><p>主要有2类改变函数内部<code>this</code>指向的方法：</p><ol><li><p>调用函数并传入具体的<code>this</code>:</p><ol><li><p><code>call</code>:</p><ol><li>参数1:<code>this</code>() （希望this指向谁就传哪个）</li><li>参数2-n:传递给函数的参数</li></ol></li><li><p><code>apply</code>-数组作为参数</p><ol><li>参数1:<code>this</code></li><li>参数2:以数组的形式,传递给函数的参数</li></ol></li></ol></li><li><p>创建绑定<code>this</code>的函数:</p><ol><li>bind:返回一个绑定了<code>this</code>的新函数</li><li>箭头函数:最近的this是谁,就是谁</li></ol></li></ol><p><strong>调用函数并传入具体的this：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funcA</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;funcA-调用&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1:&#x27;</span>, p1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2:&#x27;</span>, p2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call参数</span></span><br><span class="line"><span class="comment">// 参数1 this值 </span></span><br><span class="line"><span class="comment">// 参数2-参数n 挨个传入函数的参数  </span></span><br><span class="line">funcA.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// apply参数</span></span><br><span class="line"><span class="comment">// 参数1 this值</span></span><br><span class="line"><span class="comment">// 参数2 以数组的形式传入函数的参数</span></span><br><span class="line">funcA.<span class="title function_">apply</span>(obj, [<span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><strong>创建绑定this的函数：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funcB</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;funcB-调用&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1:&#x27;</span>, p1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2:&#x27;</span>, p2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bind参数</span></span><br><span class="line"><span class="comment">// 参数1 this值</span></span><br><span class="line"><span class="comment">// 参数2-参数n 绑定的参数</span></span><br><span class="line"><span class="keyword">const</span> bindFuncB = funcB.<span class="title function_">bind</span>(person, <span class="number">123</span>)</span><br><span class="line"><span class="title function_">bindFuncB</span>(<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// student</span></span><br><span class="line">    <span class="comment">// 箭头会从自己作用域链的上一层继承this</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inner</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner-调用了&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// student 箭头函数中的this，指向所在作用域中的this 沿用上一层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inner</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">student.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="comment">// 这个大括号没有创建作用域</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// person</span></span><br><span class="line">    <span class="comment">// 箭头会从自己作用域链的上一层继承this</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// person</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">     <span class="comment">// 易混淆情况（不要这样写）</span></span><br><span class="line">  <span class="attr">sayHello</span>:<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//person.sayHi()</span></span><br><span class="line">    person.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="手写call方法"><a href="#手写call方法" class="headerlink" title="手写call方法"></a>手写call方法</h3><p>这一节咱们来实现<code>myCall</code>方法，实际用法和<code>call</code>方法一致，核心步骤有4步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  实现myCall 可以实现如下的调用效果</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数1：this</span></span><br><span class="line"><span class="comment">// 参数2-参数n：参数列表 </span></span><br><span class="line">func2.<span class="title function_">myCall</span>(obj2, <span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>如何定义<code>myCall</code>?</li><li>如何让函数内部的<code>this</code>为某个对象？</li><li>如何让<code>myCall</code>接收参数2-参数n?</li><li>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>调优<code>myCall</code>？<ol><li>添加到原型上，所有函数均可调用</li><li>通过给对象动态添加属性的方式来指定 this</li><li>…args 剩余参数 实现参数传递</li><li>通过 Symbo 解决了和默认属性重名的问题</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 如何定义`myCall`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 如何让函数内部的`this`为某个对象                 // thisArg =&gt; &#123; name:&#x27;kilito&#x27; &#125;</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg</span>) &#123; <span class="comment">// 1. 接收原函数的this要指向的对象 thisArg</span></span><br><span class="line">  <span class="comment">// this 是调用myCall的 函数</span></span><br><span class="line">  <span class="comment">// thisArg 指定的this</span></span><br><span class="line">  <span class="comment">// 2.为他添加一个自定义属性，让函数成为他的该属性  &#123; name:&#x27;kilito&#x27;,func: 原函数 &#125; </span></span><br><span class="line">  thisArg.<span class="property">func</span> = <span class="variable language_">this</span> <span class="comment">// 这个this 是原函数（谁调用，this就指向谁）</span></span><br><span class="line">  <span class="comment">// 3.调用并获取结果</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg.<span class="title function_">func</span>()</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">func</span></span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func.myCall(obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 如何让`myCall`接收参数2-参数n</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123; <span class="comment">// ...args接受传过来的参数</span></span><br><span class="line">  thisArg.<span class="property">func</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用并获取结果</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg.<span class="title function_">func</span>(...args)  <span class="comment">// 使用展开运算符传入原函数</span></span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">func</span></span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// func.myCall(obj,1,2,3,4)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 使用`Symbol`调优`myCall`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用Symbol生成唯一标记，避免和原属性冲突</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  <span class="comment">// 给对象动态添加方法 指定为 this</span></span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">func2.<span class="title function_">myCall</span>(obj2, <span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// symbol</span></span><br><span class="line"><span class="comment">// 调用全局函数 Symbol 可以传入标记（可选）</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;kilito&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/16/64dcb002560a2.png" alt="手写call.png"></p><h3 id="手写apply方法"><a href="#手写apply方法" class="headerlink" title="手写apply方法"></a>手写apply方法</h3><p>这一节咱们来实现<code>myApply</code>方法，实际用法和<code>apply</code>方法一致，核心步骤依旧<code>4</code>步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  实现myApply 可以实现如下的调用效果</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数1：this</span></span><br><span class="line"><span class="comment">// 参数2：数组形式传入的参数列表</span></span><br><span class="line">func2.<span class="title function_">myApply</span>(obj2, [<span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>如何定义<code>myApply</code>? 函数Function的原型上</li><li>如何让函数内部的<code>this</code>为某个对象？给对象动态增加方法,方法为原函数,通过对象调用即可</li><li>如何让<code>myApply</code>接收数组形式的参数列表? 定义一个参数接收数组即可 形参: args,调用时,…args</li><li>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>调优<code>myApply</code>？和原对象的属性重名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 如何定义`myApply`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 如何让函数内部的`this`为某个对象</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg</span>) &#123;</span><br><span class="line">  <span class="comment">// 为他添加一个自定义属性，让函数成为他的该属性</span></span><br><span class="line">  thisArg[<span class="string">&#x27;fn&#x27;</span>] = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用并获取结果</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[<span class="string">&#x27;fn&#x27;</span>]()</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[<span class="string">&#x27;fn&#x27;</span>]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 如何让`myApply`接收参数2-参数n</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">  thisArg[<span class="string">&#x27;fn&#x27;</span>] = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用并获取结果</span></span><br><span class="line">  <span class="comment">// 用... 将args展开传入</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[<span class="string">&#x27;fn&#x27;</span>](...args)</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[<span class="string">&#x27;fn&#x27;</span>]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 使用`Symbol`调优`myApply`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用Symbol生成唯一标记，避免和原属性冲突</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">func2.<span class="title function_">myApply</span>(obj2, [<span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>])</span><br></pre></td></tr></table></figure><p>小结：手写apply方法</p><ol><li>如何定义<code>myApply</code>? 函数的原型上</li><li>如何让函数内部的<code>this</code>为某个对象？ 动态给对象添加方法,通过对象的方式调用方法</li><li>如何让<code>myApply</code>接收数组形式的参数列表?   形参: args,调用时,…args</li><li>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>调优<code>myApply</code>？避免和默认属性重名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写bind方法"><a href="#手写bind方法" class="headerlink" title="手写bind方法"></a>手写bind方法</h3><p>这一节咱们来实现<code>myBind</code>方法，实际用法和<code>bind</code>方法一致，核心步骤为2步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用bind获取绑定this的新函数，参数1为可乐</span></span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">bind</span>(obj, <span class="string">&#x27;可乐&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用函数，只需要传递参数2即可</span></span><br><span class="line"><span class="title function_">bindFunc</span>(<span class="string">&#x27;西蓝花炒蛋&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>如何返回一个绑定了<code>this</code>的函数？</li><li>如何实现绑定的参数，及传入的参数合并?</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 如何返回一个绑定了`this`的函数</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg</span>) &#123;</span><br><span class="line">  <span class="comment">// myBind函数调用时，this就是函数本身 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过call方法将传入的 thisArg 作为this进行调用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">call</span>(thisArg)  <span class="comment">// this 指向 func</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 如何实现绑定的参数，及传入的参数合并</span></span><br><span class="line"><span class="comment">// ...args 接收绑定参数</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// ...args2 接收调用时的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// thisArg 需要指定的this</span></span><br><span class="line">    <span class="comment">// args 调用myBind时传入的参数</span></span><br><span class="line">    <span class="comment">// args2 调用新函数时传入的参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">call</span>(thisArg, ...args, ...args2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用bind获取绑定this的新函数，参数1为可乐</span></span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">bind</span>(obj, <span class="string">&#x27;可乐&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用函数，只需要传递参数2即可</span></span><br><span class="line"><span class="title function_">bindFunc</span>(<span class="string">&#x27;西蓝花炒蛋&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/16/64dcb004b93cc.png" alt="手写bind.png"></p><p>小结：手写bind方法</p><ol><li>如何返回一个绑定了<code>this</code>的函数？</li><li>如何实现绑定的参数，及传入的参数合并?</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">call</span>(thisArg, ...args, ...args2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS继承-ES5"><a href="#JS继承-ES5" class="headerlink" title="JS继承-ES5"></a>JS继承-ES5</h2><blockquote><p>这一节咱们来学习如何在JS中实现<strong>继承</strong>，首先看看在ES6之前可以如何实现继承</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">传送门:继承与原型链</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">传送门:继承（计算机科学）</a></p><p><a href="https://www.ituring.com.cn/book/2472">传送门:JavaScript高级程序设计</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">传送门:MDN-Object.create</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">传送门:MDN-Object.assign</a></p></blockquote><p><strong>继承：</strong>继承可以使子类具有父类的各种属性和方法，而不需要再次编写相同的代码</p><p>这一节咱们会学习ES5中常见的继承写法(命令来源于 <strong>《JavaScript高级程序设计》</strong>)</p><ol><li>原型链实现继承</li><li>构造函数继承</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayFoods</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES5-原型链实现继承"><a href="#ES5-原型链实现继承" class="headerlink" title="ES5-原型链实现继承"></a>ES5-原型链实现继承</h3><p><strong>核心步骤：</strong>希望继承谁，就将谁作为原型</p><p><strong>缺点：</strong>父类中的引用数据类型，会被所有子类共享</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayFoods</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将父类的实例 作为子类的原型</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">s1.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">s2.<span class="title function_">sayFoods</span>() <span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 引用数据类型是同一个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">foods</span> === s2.<span class="property">foods</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s2.<span class="property">foods</span>.<span class="title function_">push</span>(<span class="string">&#x27;西葫芦&#x27;</span>)  <span class="comment">// 会影响到 s1</span></span><br><span class="line"></span><br><span class="line">s2.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;, &#x27;西葫芦&#x27;]</span></span><br><span class="line">s1.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;, &#x27;西葫芦&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="ES5-构造函数继承"><a href="#ES5-构造函数继承" class="headerlink" title="ES5-构造函数继承"></a>ES5-构造函数继承</h3><p><strong>核心步骤：</strong>在子类的构造函数中通过<code>call</code>或<code>apply</code>父类的构造函数</p><p><strong>缺点：</strong>子类没法使用父类原型上的属性&#x2F;方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name           <span class="comment">// 3. 给传入的 this 设置属性/方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好,我叫:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)  <span class="comment">// 2. this 指向 son 的实例化对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;lucy&#x27;</span>)  <span class="comment">// 1. 调用子类构造函数</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;rose&#x27;</span>)</span><br><span class="line">s1.<span class="title function_">sayHi</span>() <span class="comment">// 报错 子类没法用到父类原型上的属性/方法</span></span><br></pre></td></tr></table></figure><h3 id="ES5-组合继承"><a href="#ES5-组合继承" class="headerlink" title="ES5-组合继承"></a>ES5-组合继承</h3><p>通过组合继承,结合原型链继承和构造函数继承2种方法的优点</p><p><strong>核心步骤：</strong></p><ol><li>通过原型链继承公共的属性和方法</li><li>通过构造函数继承实例独有的属性和方法</li></ol><p><strong>特点：</strong>调用了2次构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 公共的属性和方法加父类原型上</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用父类构造函数传入this</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="comment">// 子类独有的属性和方法单独设置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置子类的原型为 父类实例</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// 调用子类的构造函数</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;李雷&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用原型链上的 属性和方法 也可以使用 通过构造函数获取的父类的属性和方法</span></span><br></pre></td></tr></table></figure><h3 id="ES5-原型式继承"><a href="#ES5-原型式继承" class="headerlink" title="ES5-原型式继承"></a>ES5-原型式继承</h3><p>直接基于对象实现继承</p><p>**核心步骤:**对某个对象进行浅拷贝(工厂函数或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a>),实现继承</p><p>**缺点:**父类中的引用数据类型，会被所有子类共享</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parent = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">friend</span>: [<span class="string">&#x27;rose&#x27;</span>, <span class="string">&#x27;ice&#x27;</span>, <span class="string">&#x27;robot&#x27;</span>],</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用 Object.create替代</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数：返回一个新对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">objectFactory</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 定义构造函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="comment">// 传入父类的对象，设置给构造函数的原型</span></span><br><span class="line">  <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> = obj</span><br><span class="line">    <span class="comment">// 返回了实例化对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1 = <span class="title function_">objectFactory</span>(parent)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="title function_">objectFactory</span>(parent)</span><br><span class="line">son1.<span class="property">friend</span>.<span class="title function_">push</span>(<span class="string">&#x27;lucy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类中的引用数据类型，会被所有子类共享</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son1.<span class="property">friend</span>) <span class="comment">// [&#x27;rose&#x27;, &#x27;ice&#x27;, &#x27;robot&#x27;,&#x27;lucy&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son2.<span class="property">friend</span>) <span class="comment">// [&#x27;rose&#x27;, &#x27;ice&#x27;, &#x27;robot&#x27;,&#x27;lucy&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承，基于构造函数</span></span><br><span class="line"><span class="comment">// 原型继承，基于实例</span></span><br></pre></td></tr></table></figure><h3 id="ES5-寄生式继承"><a href="#ES5-寄生式继承" class="headerlink" title="ES5-寄生式继承"></a>ES5-寄生式继承</h3><p><strong>核心步骤:</strong></p><p>定义工厂函数,并在内部:</p><ol><li>对传入的对象进行浅拷贝(公共属性&#x2F;方法)</li><li>为浅拷贝对象增加属性&#x2F;方法(独有属性&#x2F;方法)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决引用类型共享问题</span></span><br><span class="line"><span class="keyword">const</span> parent = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;炒蛋&#x27;</span>, <span class="string">&#x27;花菜&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="comment">// Object.create基于原型创建新对象，对属性进行浅拷贝</span></span><br><span class="line">  <span class="keyword">const</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(origin)</span><br><span class="line">  <span class="comment">// 为对象增加属性/方法</span></span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1 = <span class="title function_">createAnother</span>(parent)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="title function_">createAnother</span>(parent)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.create() 静态方法以一个现有对象作为原型，创建一个新对象。</span></span><br><span class="line"><span class="comment">// 基于一个对象作为原型，创建一个新对象</span></span><br><span class="line"><span class="comment">// 对传入的对象进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> father = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">foods</span>: [<span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;西兰花&#x27;</span> ,<span class="string">&#x27;西葫芦&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newF = <span class="title class_">Object</span>.<span class="title function_">create</span>(father)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newF === father) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newF.<span class="property">foods</span> === father.<span class="property">foods</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>寄生式继承</p><ol><li><p>寄生式继承的核心步骤是?</p><ol><li><p>基于对象,创建新对象</p></li><li><p>增加新的<strong>属性和方法</strong></p></li></ol></li><li><p>寄生式继承和原型式原型式继承的区别是?</p><ol><li>创建出来的新对象,会额外的增加新的<strong>属性&#x2F;方法</strong></li></ol></li></ol><h3 id="ES5-寄生组合式继承"><a href="#ES5-寄生组合式继承" class="headerlink" title="ES5-寄生组合式继承"></a>ES5-寄生组合式继承</h3><p><strong>核心步骤:</strong></p><ol><li>通过构造函数来继承属性</li><li>通过原型链来继承方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承原型函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">son, parent</span>)&#123;</span><br><span class="line">    <span class="comment">//  基于父类的原型 创建新的对象</span></span><br><span class="line">    <span class="keyword">const</span> prototype = object.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="comment">// 保证原型三角的关系</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = son</span><br><span class="line">    <span class="comment">// 设置给子类的类型</span></span><br><span class="line">    son.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]     <span class="comment">// 实例属性，写构造函数内</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;        <span class="comment">// 公共的方法写在原型上</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">`我喜欢吃,<span class="subst">$&#123;<span class="variable language_">this</span>.foods&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类借用父类的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承实例属性</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成原型继承</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Son</span>,<span class="title class_">Parent</span>)</span><br><span class="line"><span class="comment">// 可以继续在原型上添加属性/方法</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的年龄是&#x27;</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;rose&#x27;</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure><h2 id="JS继承-ES6"><a href="#JS继承-ES6" class="headerlink" title="JS继承-ES6"></a>JS继承-ES6</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class">传送门:mdn类</a></p><p><a href="https://wangdoc.com/es6/class">传送门:阮一峰ES6-class</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super">传送门:mdn-super</a></p></blockquote><p>ES6中推出了<code>class</code>类,是用来创建对象的模板.<code>class</code>可以看作是一个语法糖,它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><h3 id="class核心语法"><a href="#class核心语法" class="headerlink" title="class核心语法"></a>class核心语法</h3><p><strong>核心语法:</strong></p><ol><li>如何定义及使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes#%E7%B1%BB%E5%A3%B0%E6%98%8E">类</a>:</li><li>如何定义实例属性&#x2F;方法:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：class本质还是基于原型的</span></span><br><span class="line"><span class="comment">// 属性，在实例上</span></span><br><span class="line"><span class="comment">// 方法，在原型上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 实例属性，方便一眼确认有哪些（直接写，并且可以设置值）</span></span><br><span class="line">  <span class="comment">// 可以不写，构造函数中可以通过 this 动态添加</span></span><br><span class="line">  <span class="comment">// 建议写上</span></span><br><span class="line">  name</span><br><span class="line">  food</span><br><span class="line">  <span class="comment">// 构造方法，类似于构造函数，new的时候会调用，内部的this就是实例化的对象</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, food</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">food</span> = food</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢吃<span class="subst">$&#123;<span class="variable language_">this</span>.food&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="string">&#x27;西蓝花&#x27;</span>)</span><br><span class="line">p.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><h3 id="class实现继承"><a href="#class实现继承" class="headerlink" title="class实现继承"></a>class实现继承</h3><p><strong>关键语法:</strong></p><ol><li><strong>子类</strong>通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends">extends</a>继承<strong>父类</strong></li><li>子类构造函数中通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super">super</a>调用父类构造函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在上一份代码的基础上继续编写下面代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  song</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, food, song</span>) &#123;</span><br><span class="line">    <span class="comment">// 子类构造函数使用this以前必须最开始调用super调用父类的构造函数！！！</span></span><br><span class="line">    <span class="variable language_">super</span>(name, food)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">song</span> = song</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加方法</span></span><br><span class="line">  <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢唱<span class="subst">$&#123;<span class="variable language_">this</span>.song&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;李雷&#x27;</span>, <span class="string">&#x27;花菜&#x27;</span>, <span class="string">&#x27;孤勇者&#x27;</span>)</span><br><span class="line">s.<span class="title function_">sayHi</span>()</span><br><span class="line">s.<span class="title function_">sing</span>()</span><br></pre></td></tr></table></figure><h3 id="class私有-静态属性和方法"><a href="#class私有-静态属性和方法" class="headerlink" title="class私有,静态属性和方法"></a>class私有,静态属性和方法</h3><p><strong>补充语法:</strong></p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields">私有</a>属性&#x2F;方法的定义及使用(内部调用)</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/static">静态</a>属性&#x2F;方法的定义及使用(类直接访问)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过#作为前缀添加的属性会变为私有</span></span><br><span class="line">  <span class="comment">// 私有属性</span></span><br><span class="line">  #secret = <span class="string">&#x27;我有一个小秘密，就不告诉你&#x27;</span></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  #<span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 私有属性可以在</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;私有的say方法&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在类的内部可以访问私有属性调用私有方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#secret)</span><br><span class="line">    <span class="variable language_">this</span>.#<span class="title function_">say</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 static定义静态属性/方法</span></span><br><span class="line">  <span class="comment">// 访问的时候 通过 类 直接访问</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个静态方法&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> info = <span class="string">&#x27;直立行走，双手双脚&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line"><span class="comment">// 外部无法访问 点语法访问直接报错，通过[]无法动态获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p[<span class="string">&#x27;#secret&#x27;</span>])</span><br><span class="line">p.<span class="title function_">info</span>()</span><br><span class="line"><span class="comment">// 通过类访问静态属性/方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">staticMethod</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>)</span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><blockquote><p>这一节咱们来学习内置函数<code>fetch</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch">传送门-fetch</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response">传送门-Response</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers">传送门-Headers</a></p></blockquote><p>全局的<code>fetch</code>函数用来发起获取资源请求.他返回一个<code>promise</code>,这个<code>promise</code>会在请求响应后被<code>resolve</code>,并传回Response对象</p><ol><li><p><code>fetch</code>核心语法</p></li><li><p><code>fetch</code>结合<code>URLSearchParams</code>发送get请求:</p><ol><li><pre><code class="javascript">const obj = &#123;    name:&#39;jack&#39;,    age:18&#125;name=jack&amp;age=17<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. `fetch`发送post请求,提交`JSON`数据</span><br><span class="line"></span><br><span class="line">4. `fetch`发送post请求,提交`FormData`数据</span><br><span class="line"></span><br><span class="line">### fetch核心语法</span><br><span class="line"></span><br><span class="line">**核心语法:**</span><br><span class="line"></span><br><span class="line">1. 如何[发请求](https://developer.mozilla.org/zh-CN/docs/Web/API/fetch):</span><br><span class="line">2. 如何处理[响应](https://developer.mozilla.org/zh-CN/docs/Web/API/Response):</span><br><span class="line">3. 注:[测试用接口](https://apifox.com/apidoc/project-1937884/api-49760223)</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">document.querySelector(&#x27;.request&#x27;).addEventListener(&#x27;click&#x27;,() =&gt; &#123;</span><br><span class="line">    // 1. fetch(url地址) ===&gt; Promise对象</span><br><span class="line">    fetch(&#x27;http://hmajax.itheima.net/api/news&#x27;).then(response =&gt; &#123;</span><br><span class="line">        // console.log(response)</span><br><span class="line">        // 2. 请求成功之后， resolve  --&gt; then 获取 response</span><br><span class="line">        // 3. 调用 json 方法，获取解析之后的结果，返回Promise</span><br><span class="line">        response.json().then(res =&gt; &#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// async await 改写</span><br><span class="line">document.querySelector(&#x27;.request&#x27;).addEventListener(&#x27;click&#x27;, async() =&gt; &#123;</span><br><span class="line">   const response =  await fetch(&#x27;http://hmajax.itheima.net/api/news&#x27;)</span><br><span class="line">   const res = response.json()</span><br><span class="line">   console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ol></li></ol><h3 id="fetch结合URLSearchParams发送get请求"><a href="#fetch结合URLSearchParams发送get请求" class="headerlink" title="fetch结合URLSearchParams发送get请求:"></a>fetch结合URLSearchParams发送get请求:</h3><p><strong>需求:</strong></p><ol><li>使用<code>fetch</code>结合<code>URLSearchParams</code>调用地区查询<a href="https://apifox.com/apidoc/project-1937884/api-49760217">接口</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;安徽省&#x27;</span>,</span><br><span class="line">    <span class="attr">cname</span>: <span class="string">&#x27;合肥市&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(params) URLSearchParams &#123; size: 2 &#125; 2组键值对</span></span><br><span class="line">  <span class="comment">// 传入的对象，转为查询字符串</span></span><br><span class="line">  <span class="comment">// key=value&amp;key=value</span></span><br><span class="line">  <span class="comment">// 中文会编码</span></span><br><span class="line">  <span class="comment">// params.toString() </span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`http://hmajax.itheima.net/api/area?<span class="subst">$&#123;params.toString()&#125;</span>`</span></span><br><span class="line">  <span class="comment">// fetch函数返回的是 Promise对象，通过await等待获取response对象</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">  <span class="comment">// .json方法返回的是Promise对象 继续通过await等待</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="post请求-提交JSON"><a href="#post请求-提交JSON" class="headerlink" title="post请求-提交JSON"></a>post请求-提交JSON</h3><p><strong>需求:</strong></p><ol><li><code>fetch</code>发送post请求,提交<code>JSON</code>数据</li><li><a href="https://apifox.com/apidoc/project-1937884/api-49760218">测试接口-用户注册</a></li></ol><p><strong>核心步骤:</strong></p><ol><li>根据文档设置请求头</li><li>通过配置项设置,请求方法,请求头,请求体</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">; (<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 通过headers设置请求头</span></span><br><span class="line">  <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">Headers</span>()</span><br><span class="line">  <span class="comment">// 通过 content-type指定请求体数据格式</span></span><br><span class="line">  headers.<span class="title function_">append</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 参数1 url</span></span><br><span class="line">  <span class="comment">// 参数2 请求配置</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,<span class="comment">// 请求方法</span></span><br><span class="line">    headers, <span class="comment">// 请求头</span></span><br><span class="line">    <span class="comment">// 请求体</span></span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;itheima9876&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>post请求-提交JSON</p><ol><li><code>fetch</code>函数的第二个参数可以设置请求头,请求方法,请求体</li></ol><h3 id="post请求-提交FormData"><a href="#post请求-提交FormData" class="headerlink" title="post请求-提交FormData"></a>post请求-提交FormData</h3><p><strong>需求:</strong></p><ol><li><code>fetch</code>发送post请求,提交<code>FormData</code>数据(上传+回显)</li><li><a href="https://apifox.com/apidoc/project-1937884/api-49760221">测试接口-上传图片</a></li></ol><p><strong>核心步骤:</strong></p><ol><li>通过<code>FormData</code>添加文件</li><li>通过配置项设置,请求方法,请求体(<code>FormData</code>不需要设置请求头)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;file&quot;</span> accept=<span class="string">&quot;image/*&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.file&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 生成FormData对象并添加数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="title function_">append</span>(<span class="string">&#x27;img&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/uploadimg&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">body</span>: data</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator">传送门-Generator</a></p></blockquote><p><code>Generator</code>对象由<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*">生成器函数</a>返回并且它符合<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代协议</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">迭代器协议</a>.他可以用来<strong>控制流程</strong>,语法行为和之前学习的函数不一样</p><h3 id="Generator-核心语法"><a href="#Generator-核心语法" class="headerlink" title="Generator-核心语法"></a>Generator-核心语法</h3><p><strong>核心语法:</strong></p><ol><li>如何定义生成器函数:</li><li>如何获取<code>generator</code>对象</li><li><code>yield</code>表达式的使用</li><li>通过<code>for of</code>获取每一个<code>yield</code>的值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function* 创建生成器函数 </span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 生成器函数内部的逻辑，不会自动调用，调用 Generator 对象的 next() 方法  </span></span><br><span class="line">  <span class="comment">// 遇到yield表达式时会暂停后续的操作 （*对应async  yield对应await）</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;c&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;d&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 调用函数获取生成器</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// 3. 通过next方法获取yield 之后的表达式结果，会被包装到一个对象中</span></span><br><span class="line"><span class="comment">// 执行一次next 即可获取一次 yield之后的表达式结果</span></span><br><span class="line"><span class="keyword">const</span> res1 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1)<span class="comment">// &#123;value: &#x27;a&#x27;, done: false&#125;</span></span><br><span class="line"><span class="keyword">const</span> res2 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2)<span class="comment">// &#123;value: &#x27;b&#x27;, done: false&#125;</span></span><br><span class="line"><span class="keyword">const</span> res3 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3)<span class="comment">// &#123;value: &#x27;c&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 最后一次可以拿到return的结果</span></span><br><span class="line"><span class="keyword">const</span> res4 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4)<span class="comment">// &#123;value: &#x27;d&#x27;, done: true&#125; </span></span><br><span class="line"><span class="comment">// done 为true之后，获取到的value为undefined</span></span><br><span class="line"><span class="keyword">const</span> res5 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res5)<span class="comment">// &#123;value: undefined, done: true&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成器，函数创建之后，代码不执行</span></span><br><span class="line"><span class="comment">// 每调用一次next执行到yield，获取结果</span></span><br><span class="line"><span class="comment">// 如果执行next之后无法获取结果， done: false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 通过for of 获取每一个yield之后的值，</span></span><br><span class="line"><span class="comment">// 迭代器协议 可以自定义 for of 的时候的行为</span></span><br><span class="line"><span class="comment">// iterator迭代（循环的每一项）</span></span><br><span class="line"><span class="comment">// f2 循环的内容</span></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> f2) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator)  <span class="comment">// a b c d 获取每一个 yeild 之后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for of</span></span><br><span class="line"><span class="comment">// 可以用来遍历一些符合 迭代器协议的数据 比如数组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Generator-id生成器"><a href="#Generator-id生成器" class="headerlink" title="Generator-id生成器"></a>Generator-id生成器</h3><p>**需求:**使用<code>Generator</code>实现一个id生成器id</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">idGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> idMaker = <span class="title function_">idGenerator</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用next方法,获取id(每次累加1)</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id1 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id2 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id2)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义生成器函数</li><li>内部使用循环,通过<code>yield</code>返回<code>id</code>并累加</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function* 创建生成器函数 </span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 无限循环</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// id累加并返回</span></span><br><span class="line">    <span class="keyword">yield</span> id++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 调用函数获取生成器</span></span><br><span class="line"><span class="keyword">const</span> idMaker = <span class="title function_">generator</span>()</span><br><span class="line"><span class="comment">// 3. 需要id的时候 通过next获取即可</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id1 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id2 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id2)</span><br></pre></td></tr></table></figure><h3 id="Generator-流程控制"><a href="#Generator-流程控制" class="headerlink" title="Generator-流程控制"></a>Generator-流程控制</h3><p>遇到<code>yield</code>表达式时会<strong>暂停</strong>后续的操作</p><p>**需求:**使用<code>Generator</code>实现流程控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">weatherGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 逻辑略</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">axios</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取Generator实例</span></span><br><span class="line"><span class="keyword">const</span> weather = <span class="title function_">weatherGenerator</span>()</span><br><span class="line"><span class="comment">// 依次获取 北上广深的天气 (axios)</span></span><br><span class="line">weather.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><code>yield</code>后面跟上天气查询逻辑</li><li><a href="https://apifox.com/apidoc/project-1937884/api-49760220">接口文档-天气预报</a></li><li>参考<code>code</code>:北京 110100  上海 310100  广州 440100 深圳 440300</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;getWeather&quot;</span>&gt;</span>天气查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 需求：流程控制，依次查询，北上广深的天气预报</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 参考code: 北京 110100  上海 310100  广州 440100 深圳 440300</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 接口文档: https://apifox.com/apidoc/project-1937884/api-49760220</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span>* <span class="title function_">weatherGenerator</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// yield 会暂停代码的执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 北京</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=110100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上海</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=310100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 广州</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 深圳</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440300&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cityWeather = <span class="title function_">weatherGenerator</span>()</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//const response = weather.next()</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 继续 .then</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//response.value.then(res =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(res)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//&#125;)</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.getWeather&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> res = <span class="keyword">await</span> genCity.<span class="title function_">next</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
            <tag> 手写 </tag>
            
            <tag> 继承 </tag>
            
            <tag> fetch </tag>
            
            <tag> Generato </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试</title>
      <link href="/posts/3927.html"/>
      <url>/posts/3927.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-谈谈你对闭包的理解？"><a href="#1-谈谈你对闭包的理解？" class="headerlink" title="1. 谈谈你对闭包的理解？"></a>1. 谈谈你对闭包的理解？</h2><p>这个问题想考察的主要有两个方面：</p><ul><li>对闭包的基本概念的理解</li><li>对闭包的作用的了解</li></ul><p><strong>什么是闭包？</strong></p><p>MDN的官方解释：</p><blockquote><p><code>闭包是函数和声明该函数的词法环境的组合</code></p></blockquote><p>更通俗一点的解释是：</p><blockquote><p><code>内层函数, 引用外层函数上的变量, 就可以形成闭包</code></p></blockquote><p>需求: 定义一个计数器方法, 每次执行一次函数, 就调用一次进行计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>      <span class="comment">// 全局变量，太容易被别人修改了，希望有些数据是私有的，不让外部随意的访问</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  count++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn函数被调用了&#x27;</span> + count + <span class="string">&#x27;次&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>这样不好! count 定义成了全局变量, 太容易被别人修改了,  我们可以利用闭包解决</p><p>闭包实例:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>   <span class="comment">// 局部变量，外部访问不到</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span> () &#123;</span><br><span class="line">    count++       <span class="comment">//  引用外层函数上的变量，形成闭包</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn函数被调用了&#x27;</span> + count + <span class="string">&#x27;次&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> add   <span class="comment">// 注意：需要 return 引用（内存才不会被释放）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> addFn = <span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">addFn</span>()</span><br><span class="line"><span class="title function_">addFn</span>()</span><br><span class="line"><span class="title function_">addFn</span>()</span><br></pre></td></tr></table></figure><p>标记清除：从根部，全局出发，访问不到（无法触及）的内存空间，就会被自动回收</p><p><code>addFn = null</code>    &#x3D;&gt; 释放内存，断开了对于之前内部函数的引用，对应的缓存变量内容也会被释放掉</p><p><strong>闭包的主要作用是什么？</strong></p><p><code>实现数据的私有</code></p><p>在实际开发中，闭包最大的作用就是用来 **<code>变量私有</code>**。</p><p>下面再来看一个简单示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 以 let 声明一个局部变量，而不是 this.name</span></span><br><span class="line">  <span class="comment">// this.name = &#x27;zs&#x27;     =&gt;  p.name</span></span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;hm_programmer&#x27;</span> <span class="comment">// 数据私有！！！！！</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123; </span><br><span class="line">    name = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new:</span></span><br><span class="line"><span class="comment">// 1. 创建一个新的对象</span></span><br><span class="line"><span class="comment">// 2. 让构造函数的this指向这个新对象</span></span><br><span class="line"><span class="comment">// 3. 执行构造函数</span></span><br><span class="line"><span class="comment">// 4. 返回实例</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>()) <span class="comment">// hm_programmer</span></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">setName</span>(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>()) <span class="comment">// Tom</span></span><br><span class="line"></span><br><span class="line">p.<span class="property">name</span> <span class="comment">// 访问不到 name 变量：undefined！！！！！！</span></span><br></pre></td></tr></table></figure><p>在此示例中，变量 <code>name</code> 只能通过 Person 的实例方法进行访问，外部不能直接通过实例进行访问，形成了一个私有变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 早期，闭包还用于解决for循环中，定时打印内容的问题</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= <span class="number">5</span> ; i++) &#123;</span><br><span class="line">   (<span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">       <span class="comment">// 形参也可以理解为函数中的局部变量</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">   &#125;, i * <span class="number">1000</span>)</span><br><span class="line">   &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下代码有没有闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inner</span>()  <span class="comment">// 闭包 和return 无关 一般用外部函数命名  内部函数访问了外部函数作用域里的变量</span></span><br><span class="line">&#125;            <span class="comment">// 一般会 return 出去。但是闭包 !== return</span></span><br><span class="line"><span class="title function_">outer</span>()</span><br></pre></td></tr></table></figure><p>1. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;getWeather&quot;</span>&gt;</span>天气查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 需求：流程控制，依次查询，北上广深的天气预报</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 参考code: 北京 110100  上海 310100  广州 440100 深圳 440300</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 接口文档: https://apifox.com/apidoc/project-1937884/api-49760220</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span>* <span class="title function_">weatherGenerator</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// yield 会暂停代码的执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 北京</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=110100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上海</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=310100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 广州</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 深圳</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440300&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cityWeather = <span class="title function_">weatherGenerator</span>()</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//const response = weather.next()</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 继续 .then</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//response.value.then(res =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(res)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//&#125;)</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.getWeather&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> res = <span class="keyword">await</span> genCity.<span class="title function_">next</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-async函数阻塞"><a href="#2-async函数阻塞" class="headerlink" title="2. async函数阻塞"></a>2. async函数阻塞</h2><ol><li><p>async函数内部可以使用await 等待promise执行完毕,内部是阻寒的</p></li><li><p>但是async函数不会阻塞同级代码的执行,除非用async西数再包一层</p></li><li><p>比如,我之前在做导航守卫判断的时候,有一个逻辑</p><ol><li>action获取用户信息</li><li>基于用户信息判断是否登录</li><li>最开始没有写 <mark class="hl-label red">await</mark>  ,导致第一次判断不通过,第二次才可</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js面试题 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在nodejs环境中应用并代理跨域</title>
      <link href="/posts/882eae4.html"/>
      <url>/posts/882eae4.html</url>
      
        <content type="html"><![CDATA[<h2 id="在nodejs环境中应用并代理跨域"><a href="#在nodejs环境中应用并代理跨域" class="headerlink" title="在nodejs环境中应用并代理跨域"></a>在nodejs环境中应用并代理跨域</h2><p>**<code>目标</code>**将打包好的代码打包上线，并在nodejs中代理跨域</p><h3 id="使用koa框架部署项目"><a href="#使用koa框架部署项目" class="headerlink" title="使用koa框架部署项目"></a>使用koa框架部署项目</h3><blockquote><p>到现在为止，我们已经完成了一个前端工程师的开发流程，按照常规的做法，此时，运维会将我们的代码部署到阿里云的ngix服务上，对于我们而言，我们可以将其部署到本机的nodejs环境中</p></blockquote><p>部署 自动化部署 &#x2F;手动部署</p><p>第一步，建立web服务文件夹  <strong><code>hrServer</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> hrServer <span class="comment">#建立hrServer文件夹 </span></span><br></pre></td></tr></table></figure><p>第二步，在该文件夹下，初始化npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><p>第三步，安装服务端框架koa(也可以采用express或者egg)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i koa koa-static</span><br></pre></td></tr></table></figure><p>第四步，拷贝上小节打包的dist目录到**<code>hrServer/public</code>**下</p><p>第五步，在根目录下创建app.js，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span>  = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)  <span class="comment">// 引入Koa包</span></span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();  <span class="comment">// 实例化一个web服务</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(__dirname + <span class="string">&quot;/public&quot;</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3333</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人资项目启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>node app</p><p>此时，我们可以访问，<a href="http://localhost:3333/">http://localhost:3333</a></p></blockquote><p>页面出来了</p><h3 id="解决history页面404问题"><a href="#解决history页面404问题" class="headerlink" title="解决history页面404问题"></a>解决history页面404问题</h3><p>但是，此时存在两个问题，</p><ol><li><strong>当我们刷新页面，发现404</strong></li></ol><blockquote><p>  这是因为我们采用了history的模式，地址的变化会引起服务器的刷新，我们只需要在app.js对所有的地址进行一下处理即可</p></blockquote><p>安装 koa中间件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i koa2-connect-history-api-fallback <span class="comment">#专门处理history模式的中间件</span></span><br></pre></td></tr></table></figure><p><strong>注册中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span>  = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span>  &#123; historyApiFallback &#125; = <span class="built_in">require</span>(<span class="string">&#x27;koa2-connect-history-api-fallback&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="comment">// 这句话 的意思是除接口之外所有的请求都发送给了 index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">historyApiFallback</span>(&#123;      <span class="comment">//应该先使用 处理访问的中间件 再使用静态化服务</span></span><br><span class="line">     <span class="attr">whiteList</span>: [<span class="string">&#x27;/prod-api&#x27;</span>]  <span class="comment">//prod-api代理跨域的问题  表示不要帮我处理 /prod-api 由自己处理</span></span><br><span class="line"> &#125;));  <span class="comment">// 这里的whiteList是 白名单的意思</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(__dirname + <span class="string">&quot;/public&quot;</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3333</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人资项目启动http://localhost:3333&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决生产环境跨域问题"><a href="#解决生产环境跨域问题" class="headerlink" title="解决生产环境跨域问题"></a>解决生产环境跨域问题</h3><ol><li>当点击登录时，发现接口404</li></ol><blockquote><p>  前面我们讲过，vue-cli的代理只存在于开发期，当我们上线到node环境或者ngix环境时，需要我们再次在环境中代理</p></blockquote><p>在nodejs中代理</p><p>安装跨域代理中间件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i koa2-proxy-middleware</span><br></pre></td></tr></table></figure><p>配置跨越代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; historyApiFallback &#125; = <span class="built_in">require</span>(<span class="string">&#x27;koa2-connect-history-api-fallback&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;koa2-proxy-middleware&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册跨域代理的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">proxy</span>(&#123;</span><br><span class="line">    <span class="attr">targets</span>: &#123;</span><br><span class="line">        <span class="comment">// 代理哪个地址  代理以 &#x27;/prod-api&#x27;为开头的地址</span></span><br><span class="line">        <span class="string">&#x27;/prod-api/(.*)&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;https://heimahr.itheima.net/api&#x27;</span>, <span class="comment">// 将以prod/api开头的内容代理到该地址  后端服务器地址</span></span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;/prod-api&#x27;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这句话 的意思是除接口之外所有的请求都发送给了 index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">historyApiFallback</span>(&#123; <span class="comment">//应该先使用 处理访问的中间件 再使用静态化服务</span></span><br><span class="line">    <span class="attr">whiteList</span>: [<span class="string">&#x27;/prod-api&#x27;</span>] <span class="comment">// prod-api代理跨域的问题  表示不要帮我处理 /prod-api 由自己处理</span></span><br><span class="line">&#125;)); <span class="comment">// 这里的whiteList是 白名单的意思</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(__dirname + <span class="string">&quot;/public&quot;</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3333</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人资项目启动http://localhost:3333&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：这里之所以用了<strong>pathRewrite</strong>，是因为生产环境的请求基础地址是 <strong>&#x2F;prod-api</strong>，需要将该地址去掉</p><p>此时，我们的项目就可以跨域访问了！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阳光不错，微风正好</title>
      <link href="/posts/b313554c.html"/>
      <url>/posts/b313554c.html</url>
      
        <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><p>  一生的时间很短<br>  短到不过是两颗心之间的距离<br>  一生的时间也很长<br>  不如我们试着走走看</p>  <button type="button" onclick="SAONotify('Update','link start...','location.reload(true);')">SAO刷新按钮</button>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
