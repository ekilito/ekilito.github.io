<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS进阶</title>
      <link href="/posts/852ea89.html"/>
      <url>/posts/852ea89.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-进阶"><a href="#JavaScript-进阶" class="headerlink" title="JavaScript 进阶"></a>JavaScript 进阶</h2><blockquote><p>学习作用域、变量提升、闭包等语言特征，加深对 JavaScript 的理解，掌握变量赋值、函数声明的简洁语法，降低代码的冗余度。</p></blockquote><ul><li>理解作用域对程序执行的影响</li><li>能够分析程序执行的作用域范围</li><li>理解闭包本质，利用闭包创建隔离作用域</li><li>了解什么变量提升及函数提升</li><li>掌握箭头函数、解析剩余参数等简洁语法</li></ul><h3 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h3><blockquote><p>目标：了解作用域对程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染。</p></blockquote><p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p><h4 id="1-1-局部作用域"><a href="#1-1-局部作用域" class="headerlink" title="1.1 局部作用域"></a>1.1 局部作用域</h4><blockquote><p>局部作用域分为函数作用域  和  块作用域。</p></blockquote><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明 counter 函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数内部声明的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> s = x + y  <span class="comment">//s是局部变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// 18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 设用 counter 函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">counter</span>(<span class="number">10</span>, <span class="number">8</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 访问变量 s</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">// 报错  函数外部不能使用局部作用域变量</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>函数内部声明的变量，在函数外部无法被访问</li><li>函数的参数也是函数内部的局部变量</li><li>不同函数内部声明的变量无法互相访问</li><li>函数执行完毕后，函数内部的变量实际被清空了</li></ol><h5 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h5><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 只能在该代码块中被访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 正常</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 超出了 age 的作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// str 只能在该代码块中被访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 正常</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 超出了 age 的作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> t = <span class="number">1</span>; t &lt;= <span class="number">6</span>; t++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// t 只能在该代码块中被访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 正常</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 超出了 t 的作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript 中除了变量外还有常量，常量与变量本质的区别是【常量必须要有值且不允许被重新赋值】，常量值为对象时其属性和方法允许重新赋值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 必须要有值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> version = <span class="string">&#x27;1.0.0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 不能重新赋值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// version = &#x27;1.0.1&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 常量值为对象类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 不能重新赋值</span></span></span><br><span class="line"><span class="language-javascript">  user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 属性和方法允许被修改</span></span></span><br><span class="line"><span class="language-javascript">  user.<span class="property">name</span> = <span class="string">&#x27;小小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  user.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li><li><code>const</code> 声明的常量也会产生块作用域</li><li>不同代码块之间的变量无法互相访问</li><li>推荐使用 <code>let</code> 或 <code>const</code></li></ol><p>注：开发中 <code>let</code> 和 <code>const</code> 经常不加区分的使用，如果担心某个值会不小被修改时，则只能使用 <code>const</code> 声明成常量。</p><h4 id="1-2-全局作用域"><a href="#1-2-全局作用域" class="headerlink" title="1.2 全局作用域"></a>1.2 全局作用域</h4><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 此处是全局</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处为局部</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 此处为全局</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局作用域中声明的变量，任何其它作用域都可以被访问，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局变量 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> name = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 函数作用域中访问全局</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 此处为局部</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + name)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局变量 flag 和 x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> flag = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x = <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 块作用域中访问全局</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> y = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y) <span class="comment">// x 是全局的</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li><li>函数中未使用任何关键字声明的变量为全局变量，不推荐！！！</li><li>尽可能少的声明全局变量，防止全局变量被污染</li></ol><p>JavaScript 中的作用域是程序被执行时的底层机制，了解这一机制有助于规范代码书写习惯，避免因作用域导致的语法错误。  </p><h4 id="1-3-作用域链"><a href="#1-3-作用域链" class="headerlink" title="1.3 作用域链"></a>1.3 作用域链</h4><p>在解释什么是作用域链前先来看一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 全局作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> a = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> b = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 局部作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> c</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 局部作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> d = <span class="string">&#x27;yo&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数内部允许创建新的函数，<code>f</code> 函数内部创建的新函数 <code>g</code>，会产生新的函数作用域，由此可知作用域产生了嵌套的关系。</p><p>作用域链本质上是底层的<strong>变量查找机制</strong>，在函数被执行时，会<strong>优先查找当前</strong>函数作用域中查找变量，如果当前作用域查找不到则会<strong>依次逐级查找父级作用域</strong>直到全局作用域，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 全局作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> a = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> b = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 局部作用域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> c</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let a = 10;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1 或 10</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 局部作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> d = <span class="string">&#x27;yo&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// let b = 20;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2 或 20</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用 g 函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">g</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">f</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>嵌套关系的作用域串联起来形成了作用域链</li><li>相同作用域链中按着从小到大的规则查找变量</li><li>子作用域能够访问父作用域，父级作用域无法访问子级作用域</li></ol><h4 id="1-31-js垃圾回收机制"><a href="#1-31-js垃圾回收机制" class="headerlink" title="1.31 js垃圾回收机制"></a>1.31 <code>js</code>垃圾回收机制</h4><ol><li><p>什么是垃圾回收机制？</p><p>垃圾回收机制(Garbage Collection) 。<code>js</code>中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收。正因为垃圾回收器的存在，许多人认为<code>js</code>不用太关心内存管理的问题但如果不了解<code>js</code>的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况不再用到的内存，没有及时释放，就叫做内存泄漏。</p></li><li><p>内存的生命周期</p><p><code>js</code>环境中分配的内存, 一般有如下生命周期：</p><ol><li><p>内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</p></li><li><p>内存使用：即读写内存，也就是使用变量、函数等</p></li><li><p>内存回收：使用完毕，由垃圾回收自动回收不再使用的内存</p></li><li><p>说明：</p></li></ol><p> 全局变量一般不会回收(关闭页面回收)</p><p> 一般情况下局部变量的值, 不用了, 会被自动回收掉</p></li><li><p>垃圾回收算法说明</p><p>所谓垃圾回收, 核心思想就是如何判断内存是否已经不再会被使用了, 如果是, 就视为垃圾, 释放掉</p><p>下面介绍两种常见的浏览器垃圾回收算法: <strong>引用计数法</strong> 和 <strong>标记清除法</strong></p></li></ol><h4 id="1-4-闭包"><a href="#1-4-闭包" class="headerlink" title="1.4 闭包"></a>1.4 闭包</h4><ul><li>概念：一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域。</li><li>简单理解：<strong>闭包 &#x3D; 内层函数 + 外层函数的变量</strong></li><li>闭包作用：封闭数据，提供操作，外部也可以访问函数内部的变量。</li><li>闭包应用：<em>实现数据的私有</em>。比如我们要做个统计函数调用次数，函数调用一次，就++</li></ul><p>闭包是一种比较特殊和函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//闭包的基本格式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数内部分函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(++i);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将函数做为返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> bar    <span class="comment">//foo（）是接收者</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// fn 即为闭包函数 fn装的是函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> fn = <span class="title function_">foo</span>();</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fn</span>(); <span class="comment">// 1  //调用函数</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//外层函数使用内层函数的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//foo() === bar === function bar()&#123; &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let fn = function()&#123; &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//fn装的是函数   调用fn()</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>闭包本质仍是函数，只不是从函数内部返回的</li><li>闭包能够创建外部可访问的隔离作用域，避免全局变量污染</li><li>过度使用闭包可能造成<strong>内存泄漏</strong></li></ol><p>注：回调函数也能访问函数内部的局部变量。</p><p>注：闭包很有用，因为它允许将函数与其所操作的某些数据(环境)关联起来。闭包可能引起的问题：内存泄漏</p><h4 id="1-5-变量提升"><a href="#1-5-变量提升" class="headerlink" title="1.5 变量提升"></a>1.5 变量提升</h4><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问</p><p>（仅存在于var声明的变量！）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 访问变量 str</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str + <span class="string">&#x27;world!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明变量 str</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> str = <span class="string">&#x27;hello &#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">//undefined</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量提升是什么流程？</span></span><br><span class="line"><span class="comment">//1.先把var 变量提升到当前作用域的最前面</span></span><br><span class="line"><span class="comment">//2.只提升变量声明，不提升变量赋值。</span></span><br><span class="line"><span class="comment">//3.然后依次执行代码。</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>变量在未声明即被访问时会报语法错误</li><li>变量在var声明之前即被访问，变量的值为 <code>undefined</code></li><li><code>let</code>&#x2F;<code>const</code>声明的变量不存在变量提升，推荐使用 <code>let</code></li><li>变量提升出现在相同作用域当中</li><li><strong>实际开发中推荐先声明再访问变量</strong></li></ol><p>注：关于变量提升的原理分析会涉及较为复杂的词法分析等知识，而开发中使用 <code>let</code> 可以轻松规避变量的提升，因此在此不做过多的探讨，有兴趣可<a href="https://segmentfault.com/a/1190000013915935">查阅资料</a>。</p><h3 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h3><blockquote><p>目标：知道函数参数默认值、动态参数、剩余参数的使用细节，提升函数应用的灵活度，知道箭头函数的语法及与普通函数的差异。</p></blockquote><h4 id="2-1-函数提升"><a href="#2-1-函数提升" class="headerlink" title="2.1 函数提升"></a>2.1 函数提升</h4><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;声明之前即被调用...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 不存在提升现象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">bar</span>()  <span class="comment">// 错误</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> bar = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式不存在提升现象...&#x27;</span>)  <span class="comment">//不是在声明，是在赋值给fun</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>函数提升能够使函数的声明调用更灵活</li><li><strong>函数表达式不存在提升的现象</strong></li><li>函数提升出现在相同作用域当中</li></ol><h4 id="2-2-参数"><a href="#2-2-参数" class="headerlink" title="2.2 参数"></a>2.2 参数</h4><p>函数参数的使用细节，能够提升函数应用的灵活度。</p><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 设置参数默认值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name=<span class="string">&quot;小明&quot;</span>, age=<span class="number">18</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;p&gt;大家好，我叫<span class="subst">$&#123;name&#125;</span>，我今年<span class="subst">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>(<span class="string">&#x27;小刚&#x27;</span>, <span class="number">21</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>声明函数时为形参赋值即为参数的默认值</li><li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li><li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li></ol><h5 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h5><p><code>arguments</code> 是函数内部内置的 伪数组  变量，它包含了调用函数时传入的所有实参。</p><p>当不确定传递多少个实参的时候，用<code>arguments</code>动态参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 求生函数，计算所有参数的和</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arguments)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> s = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      s += <span class="variable language_">arguments</span>[i]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用求和函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>)<span class="comment">// 两个参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>) <span class="comment">// 两个参数</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>arguments</code> 是一个伪数组，只存在于函数中</li><li><code>arguments</code> 的作用是动态获取函数的实参</li><li>可以通过for 循环依次得到传递过来的实参</li></ol><h5 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h5><p>剩余参数允许我们将一个不定数量的参数表示为一个 数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">...other</span>)&#123;</span><br><span class="line">    <span class="comment">//other得到[1,2,3] 真数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(other)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">config</span>(<span class="params">baseURL, ...other</span>) &#123;   <span class="comment">//...other用于获取多余的实参！ other可以随便取名。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(baseURL) <span class="comment">// 得到 &#x27;http://baidu.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(other)  <span class="comment">// other  得到 [&#x27;get&#x27;, &#x27;json&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">config</span>(<span class="string">&#x27;http://baidu.com&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;json&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li><li>借助 <code>...</code> 获取的剩余实参，是个真数组</li><li>开发中，还是提倡多使用 <strong>剩余参数</strong></li></ol><p>区别：</p><ol><li>动态参数是为数组</li><li>剩余参数是真数组</li></ol><h5 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标：能够使用展开运算符说出常用的使用场景</span></span><br><span class="line"><span class="comment">//展开运算符（...）,将一个数组进行展开。</span></span><br><span class="line">       <span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>]</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(...arr)  <span class="comment">// 1 5 3 8 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//说明：不会修改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//典型运用场景：求数组最大值最小值，合并数组等。</span></span><br><span class="line">       <span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>]</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)) <span class="comment">//18</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)) <span class="comment">//1</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//合并数组</span></span><br><span class="line">       <span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">       <span class="keyword">const</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">       <span class="keyword">const</span> arr3 = [...arr1,...arr2]</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)   <span class="comment">//[1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//展开运算符or剩余参数</span></span><br><span class="line"><span class="comment">//剩余参数：函数参数使用，得到真数组</span></span><br><span class="line"><span class="comment">//展开运算符：数组中使用，数组展开</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(arr))  <span class="comment">//NaN</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">//3</span></span><br><span class="line">      <span class="comment">//...arr === 1,2,3    console.log(Math.max(...arr))</span></span><br></pre></td></tr></table></figure><h4 id="2-3-箭头函数"><a href="#2-3-箭头函数" class="headerlink" title="2.3 箭头函数"></a>2.3 箭头函数</h4><ul><li><p>箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。</p></li><li><p>目的：引入箭头函数的目的是更简洁的函数写法并且不绑定this，箭头函数的语法比函数表达式更简洁。</p></li><li><p>使用场景：箭头函数更适用于那些本来 需要匿名函数的地方。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//普通函数</span></span><br><span class="line"> <span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//1. 箭头函数 基本语法</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">fn</span>()</span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">fn</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 只有一个形参的时候，可以省略小括号</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">fn</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3. 只有一行代码的时候，我们可以省略大括号</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line"> <span class="title function_">fn</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 只有一行代码的时候，可以省略return</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; x + x</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 箭头函数可以直接返回一个对象</span></span><br><span class="line"><span class="comment">//加括号的函数体返回对象字面量表达式。</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">uname</span>) =&gt; (&#123; <span class="attr">uname</span>: uname &#125;)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;刘德华&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 箭头函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;^_^ 长相奇怪的函数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>()</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 更简洁的语法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">ev</span> =&gt;</span> ev.<span class="title function_">preventDefault</span>())</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>箭头函数属于表达式函数，因此不存在函数提升</li><li>箭头函数只有一个参数时可以省略圆括号 <code>()</code></li><li>箭头函数函数体只有一行代码时可以省略花括号 <code>&#123;&#125;</code>，并自动做为返回值被返回</li><li>箭头函数中没有 <code>arguments</code>，只能使用 <code>...</code> 动态获取实参</li><li>加括号的函数体返回对象字面量表达式</li></ol><h5 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h5><ol><li>普通函数有<code>arguments</code>动态参数。</li><li>箭头函数没有<code>arguments</code>动态参数，但是有 剩余参数  <code>...args</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  利用箭头函数来求和</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">...arr</span>) =&gt; &#123;   <span class="comment">//剩余参数 ...arr 可以随意换名字</span></span><br><span class="line">     <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       sum += arr[i]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> sum</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> result = <span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数this指向"><a href="#箭头函数this指向" class="headerlink" title="箭头函数this指向"></a>箭头函数this指向</h5><ul><li><p>箭头函数不会创建自己的this，它只会从自己的作用域链的上一层沿用this。</p></li><li><p>事件回调函数使用箭头函数时，this 为全局的 window , 因此Dom事件回调函数为了简便，还是不太推荐使用箭头函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以前this的指向：  谁调用的这个函数，this 就指向谁</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">     <span class="comment">// 1.普通函数</span></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window 普通函数指向调用者</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>()  <span class="comment">// window.fn()</span></span><br><span class="line">     btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// 当前 this 指向 btn</span></span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// 对象方法里面的this</span></span><br><span class="line">     <span class="keyword">const</span> obj = &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">       <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     obj.<span class="title function_">sayHi</span>()  <span class="comment">//普通函数指向调用者</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 箭头函数的this  是上一层作用域的this 指向</span></span><br><span class="line">     <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window 上一层是全局</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>()</span><br><span class="line">    <span class="comment">// 对象方法箭头函数 this</span></span><br><span class="line">     <span class="keyword">const</span> obj = &#123;</span><br><span class="line">       <span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">       <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// this 指向谁？ window</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     obj.<span class="title function_">sayHi</span>()  <span class="comment">//window.obj.sayHi()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">      <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj</span></span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">count</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj //沿用上一层</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">count</span>()</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、ES6-解构赋值"><a href="#三、ES6-解构赋值" class="headerlink" title="三、ES6-解构赋值"></a>三、<code>ES6</code>-解构赋值</h3><blockquote><p>知道解构的语法及分类，使用解构简洁语法快速为变量赋值。</p></blockquote><p>解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值，分为数组解构、对象解构两大类型。</p><h4 id="3-1-数组解构"><a href="#3-1-数组解构" class="headerlink" title="3.1 数组解构"></a>3.1 数组解构</h4><p>数组解构是将数组的 单元值 快速 批量 赋值 给一系列变量的简洁语法，如下代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 普通的数组</span></span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="comment">// 批量声明变量 a b c </span></span><br><span class="line">  <span class="comment">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span></span><br><span class="line">  <span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//基本语法：典型应用交互两个变量</span></span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">     <span class="keyword">let</span> b = <span class="number">3</span></span><br><span class="line">     ;[b,a] = [a,b]     <span class="comment">//这里必须加分号，隔开！</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">//3</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(b)  <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><p>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</p></li><li><p>变量的顺序对应数组单元值的位置依次进行赋值操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pc = [<span class="string">&#x27;海尔&#x27;</span>, <span class="string">&#x27;联想&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;方正&#x27;</span>]</span><br><span class="line">[hr, lx, mi, fz] = pc</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hr, lx, mi, fz)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> pc = [<span class="string">&#x27;海尔&#x27;</span>, <span class="string">&#x27;联想&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;方正&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> [hr, lx, mi, fz] = [<span class="string">&#x27;海尔&#x27;</span>, <span class="string">&#x27;联想&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;方正&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lx)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mi)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fz)</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 请将最大值和最小值函数返回值解构 max 和min 两个变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">100</span>, <span class="number">60</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [max, min] = <span class="title function_">getValue</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min)</span><br></pre></td></tr></table></figure></li><li><p>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 变量多， 单元值少 ， undefined</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 2. 变量少， 单元值多</span></span><br><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 3.  利用剩余参数 变量少， 单元值多的情况</span></span><br><span class="line"><span class="keyword">const</span> [a, b, ...c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// [3, 4]  真数组</span></span><br></pre></td></tr></table></figure></li><li><p>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.  防止 undefined 传递单元值的情况，可以设置默认值</span></span><br><span class="line">     <span class="keyword">const</span> [a = <span class="number">0</span>, b = <span class="number">0</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="comment">// const [a = 0, b = 0] = []</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.  按需导入赋值，忽略某些值</span></span><br><span class="line">     <span class="keyword">const</span> [a, b, , d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>])  <span class="comment">// 1</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>])  <span class="comment">// 2</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>])  <span class="comment">// [3,4]</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>][<span class="number">0</span>])  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组解构</span></span><br><span class="line"> <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"> <span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// [3,4]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b, [c, d]] = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="3-2-对象解构"><a href="#3-2-对象解构" class="headerlink" title="3.2 对象解构"></a>3.2 对象解构</h4><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 批量声明变量 name age</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123;name, age&#125; = user</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 小明</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 18</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 普通对象</span></span><br><span class="line">   <span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 解构的语法 批量声明变量 uname age  同时将单元值依次赋值给变量uname age</span></span><br><span class="line">   <span class="keyword">const</span> &#123; uname, age &#125; = obj</span><br><span class="line">   <span class="comment">// 要求属性名和变量名必须一直才可以</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(uname) <span class="comment">//pink老师</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">//18</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//给新的变量名赋值</span></span><br><span class="line">  <span class="comment">//对象解构的变量名 可以重新改名  旧变量名: 新变量名</span></span><br><span class="line">  <span class="comment">//可以从一个对象中提取变量并同时修改新的变量名。</span></span><br><span class="line">   <span class="keyword">const</span> &#123; <span class="attr">uname</span>: username, age &#125; = obj  <span class="comment">//把原来的uname变量名重新命名为 usernamme</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(username) <span class="comment">//pink老师</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">//18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2. 解构数组对象</span></span><br><span class="line">  <span class="keyword">const</span> pig = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">const</span> [&#123; uname, age &#125;] = pig</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(uname) <span class="comment">//佩奇</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)  <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.多级对象解构</span></span><br><span class="line">  <span class="keyword">const</span> person = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">mother</span>: <span class="string">&#x27;猪妈妈&#x27;</span>,</span><br><span class="line">        <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span>,</span><br><span class="line">        <span class="attr">sister</span>: <span class="string">&#x27;乔治&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">//多级对象解构</span></span><br><span class="line">  <span class="keyword">const</span> [&#123; name, <span class="attr">family</span>: &#123; mother, father, sister &#125; &#125;] = person</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mother)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(father)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sister)</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li><li>对象属性的值将被赋值给与属性名相同的变量</li><li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li><li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li><li>注意解构的变量名不要和外面的变量名冲突否则会报错</li></ol><p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p><h3 id="js前面必须加分号的情况"><a href="#js前面必须加分号的情况" class="headerlink" title="js前面必须加分号的情况"></a><code>js</code>前面必须加分号的情况</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.立即执行函数</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; &#125;)();</span><br><span class="line">;(<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; &#125;)()  <span class="comment">//分号必须加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.数组解构</span></span><br><span class="line">  <span class="comment">//数组开头的，特别是前面有语句的一定注意加分号</span></span><br><span class="line">;[b,a] = [a,b]</span><br></pre></td></tr></table></figure><h3 id="forEach方法"><a href="#forEach方法" class="headerlink" title="forEach方法"></a><code>forEach</code>方法</h3><ul><li><p><code>forEach</code> 方法用于调用数组的每个元素，并将元素传递给回调函数</p></li><li><p>主要使用场景： 遍历数组的每个元素</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">被遍历的数组.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">当前数组元素，当前元素索引号</span>) &#123;</span><br><span class="line">    <span class="comment">//函数体                     item         i</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach 就是遍历  加强版的for循环  适合于遍历数组对象</span></span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line">    <span class="keyword">const</span> result = arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item)  <span class="comment">// 数组元素 red  green pink</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 索引号 依次打印每一个元素的索引号</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// console.log(result)</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：</p><ol><li><code>forEach</code>主要是遍历数组</li><li>参数当前数组元素item 是必须要写的，索引号可选。</li></ol><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a><code>filter()</code>方法</h3><ul><li><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p></li><li><p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">被遍历的数组.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">currentValue,index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> 筛选条件</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//currentValue 值</span></span><br><span class="line"><span class="comment">//index 索引号</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//filter()筛选数组大于20的数</span></span><br><span class="line">     <span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">     <span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">       <span class="comment">// console.log(item)</span></span><br><span class="line">       <span class="comment">// console.log(index)</span></span><br><span class="line">       <span class="keyword">return</span> item &gt;= <span class="number">20</span></span><br><span class="line">     &#125;)</span><br><span class="line">    <span class="comment">// 返回的符合条件的新数组</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// const newArr = arr.filter(item =&gt; item &gt;= 20)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure></li></ul><p>注：</p><ol><li>filter()  筛选数组</li><li>返回值：返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组</li><li>参数： <code>currentValue</code> 必须写， index 可选</li><li>因为返回新数组，所以不会影响原数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">function</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="综合案例-渲染商品案例"><a href="#综合案例-渲染商品案例" class="headerlink" title="综合案例-渲染商品案例"></a>综合案例-渲染商品案例</h3><p><img src="/assets%5Cimage-20230123200258069.png" alt="image-20230123200258069"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>0-100元<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>100-300元<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>300元以上<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>全部区间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &lt;div class=&quot;item&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;p class=&quot;name&quot;&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;p class=&quot;price&quot;&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    &lt;/div&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 初始化数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//后台接受过来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> goodsList = [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;4001172&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;称心如意手摇咖啡磨豆机咖啡豆研磨机&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;289.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/84a59ff9c58a77032564e61f716846d6.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;4001594&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;日式黑陶功夫茶组双侧把茶具礼盒装&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;288.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/3346b7b92f9563c7a7e24c7ead883f18.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;4001009&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;竹制干泡茶盘正方形沥水茶台品茶盘&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;109.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/2d942d6bc94f1e230763e1a5a3b379e1.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;4001874&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;古法温酒汝瓷酒具套装白酒杯莲花温酒器&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;488.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/44e51622800e4fceb6bee8e616da85fd.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;4001649&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;大师监制龙泉青瓷茶叶罐&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;139.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/4356c9fc150753775fe56b465314f1eb.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;3997185&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;与众不同的口感汝瓷白酒杯套组1壶4杯&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;108.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/8e21c794dfd3a4e8573273ddae50bce2.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;3997403&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;手工吹制更厚实白酒杯壶套装6壶6杯&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;99.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/af2371a65f60bce152a61fc22745ff3f.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="string">&#x27;3998274&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;德国百年工艺高端水晶玻璃红酒杯2支装&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="string">&#x27;139.00&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/8896b897b3ec6639bbd1134d66b9715c.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//1.数据渲染</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//封装函数  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">arr</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//创建字符串变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//遍历数据 利用forEach循环遍历数组里面的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//console.log(item) 可以得到每个数组元素 对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//传递数据是使用数据解构</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">const</span> &#123;name,price,picture&#125; = item</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//拿到数据，利用字符串拼接生成结构添加到页面中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                str += <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">                &lt;div class=&quot;item&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">                  &lt;img src=<span class="subst">$&#123;picture&#125;</span> alt=&quot;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">                  &lt;p class=&quot;name&quot;&gt;<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">                  &lt;p class=&quot;price&quot;&gt;<span class="subst">$&#123;price&#125;</span>&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">                &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">                      `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="property">innerHTML</span> = str</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">render</span>(goodsList)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//2.过滤筛选</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.filter&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//e.target.dataset.index // 1 2 3 根据点击data-index来判断</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//console.log(e.target)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> &#123;tagName,dataset&#125; = e.<span class="property">target</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//console.log(tagName) // A</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (tagName === <span class="string">&#x27;A&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//arr 是返回的新数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> arr = goodsList</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//console.log(dataset.index)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (dataset.<span class="property">index</span> === <span class="string">&#x27;1&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    arr = goodsList.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span> &gt; <span class="number">0</span> &amp;&amp; item.<span class="property">price</span> &lt;= <span class="number">100</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataset.<span class="property">index</span> === <span class="string">&#x27;2&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    arr = goodsList.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span> &gt;= <span class="number">100</span> &amp;&amp; item.<span class="property">price</span> &lt;= <span class="number">300</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataset.<span class="property">index</span> === <span class="string">&#x27;3&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    arr = goodsList.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span> &gt;= <span class="number">300</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//渲染函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">render</span>(arr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-进阶-1"><a href="#JavaScript-进阶-1" class="headerlink" title="JavaScript 进阶"></a>JavaScript 进阶</h2><blockquote><p>了解面向对象编程的基础概念及构造函数的作用，体会 JavaScript 一切皆对象的语言特征，掌握常见的对象属性和方法的使用。</p></blockquote><ul><li>了解面向对象编程中的一般概念</li><li>能够基于构造函数创建对象</li><li>理解 JavaScript 中一切皆对象的语言特征</li><li>理解引用对象类型值存储的的特征</li><li>掌握包装类型对象常见方法的使用</li></ul><h3 id="一、深入对象"><a href="#一、深入对象" class="headerlink" title="一、深入对象"></a>一、深入对象</h3><blockquote><p>了解面向对象的基础概念，能够利用构造函数创建对象。</p></blockquote><h4 id="1-0-创建对象的三种方式"><a href="#1-0-创建对象的三种方式" class="headerlink" title="1.0 创建对象的三种方式"></a>1.0 创建对象的三种方式</h4><blockquote><p>目标：了解创建对象有三种方式。</p></blockquote><ol><li>利用对象字面量创建对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;清&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.利用 new Object 创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>( &#123;<span class="attr">uname</span>:<span class="string">&#x27;清&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125; )</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)  <span class="comment">//&#123;uname:&#x27;清&#x27;,age:18&#125;</span></span><br></pre></td></tr></table></figure><p>​     3.利用构造函数创建对象</p><h4 id="1-1-构造函数"><a href="#1-1-构造函数" class="headerlink" title="1.1 构造函数"></a>1.1 构造函数</h4><blockquote><p>目标：能够利用构造函数创建对象。</p></blockquote><blockquote><p>构造函数是一种特殊的函数，主要用来初始化对象</p></blockquote><ul><li>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是构造函数。</li><li>使用场景：可以通过构造函数来 快速创建多个类似的对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过 new 也能调用函数...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> foo;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个商品的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Goods</span>(<span class="params">name, price, count</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = count</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sayhi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建小米对象</span></span><br><span class="line">    <span class="keyword">const</span> mi = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;小米&#x27;</span>, <span class="number">1999</span>, <span class="number">20</span>) <span class="comment">//new 关键字调用函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mi)</span><br><span class="line">    <span class="keyword">const</span> hw = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">3999</span>, <span class="number">59</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hw)</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数在技术上是常规函数</span></span><br><span class="line"><span class="comment">//不过有两个约定：</span></span><br><span class="line"><span class="comment">//1.他们的命名以大写字母开头</span></span><br><span class="line"><span class="comment">//2.他们只能由&quot;new&quot;操作符来执行</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol start="2"><li>使用 <code>new</code> 关键字调用函数的行为被称为实例化</li><li>实例化构造函数时没有参数时可以省略 <code>()</code></li><li>构造函数内部无需写return, 返回值即为新创建的对象</li><li>构造函数内部的 <code>return</code> 返回的值无效！所以不要写return</li><li>new Object()    new Date()  也是实例化构造函数</li></ol><p>注：实践中为了从视觉上区分构造函数和普通函数，习惯将构造函数的首字母大写。</p><p>实例化执行过程：</p><ol><li>创建新对象</li><li>构造函数 this 指向新对象</li><li>执行构造函数代码，修改 this ，添加新的属性</li><li>返回新对象</li></ol><h4 id="1-2-实例成员"><a href="#1-2-实例成员" class="headerlink" title="1.2 实例成员"></a>1.2 实例成员</h4><blockquote><p>目标：能够说出什么是实例成员。</p></blockquote><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 构造函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数内部的 this 就是实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例对象中动态添加属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例对象动态添加方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 实例化，p1 是实例对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// p1 实际就是 构造函数内部的 this</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>) <span class="comment">// 访问实例属性</span></span></span><br><span class="line"><span class="language-javascript">  p1.<span class="title function_">sayHi</span>() <span class="comment">// 调用实例方法</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>构造函数内部 <code>this</code> 实际上就是实例对象，为其动态添加的属性和方法即为实例成员</li><li>为构造函数传入参数，动态创建结构相同但值不同的对象</li><li>实例对象中的属性和方法称为实例成员。</li></ol><p>注：构造函数创建的实例对象彼此独立互不影响。</p><h4 id="1-3-静态成员"><a href="#1-3-静态成员" class="headerlink" title="1.3 静态成员"></a>1.3 静态成员</h4><blockquote><p>构造函数的属性和方法被称为静态成员。</p></blockquote><p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 构造函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 省略实例成员</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 静态属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">eyes</span> = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">arms</span> = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 静态方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;^_^人都会走路...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this 指向 Person</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>静态成员指的是添加到构造函数本身的属性和方法</li><li>一般公共特征的属性或方法静态成员设置为静态成员</li><li>静态成员方法中的 <code>this</code> 指向构造函数本身</li></ol><h3 id="二、内置构造函数"><a href="#二、内置构造函数" class="headerlink" title="二、内置构造函数"></a>二、内置构造函数</h3><blockquote><p>掌握各引用类型和包装类型对象属性和方法的使用。</p></blockquote><p>在 JavaScript 中<strong>最主要</strong>的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。</p><p>在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的，JavaScript 基础阶段学习的 <code>Date</code> 就是内置的构造函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 实例化</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// date 即为实例对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>甚至字符串、数值、布尔、数组、普通对象也都有专门的构造函数，用于创建对应类型的数据。</p><h4 id="2-1-引用类型"><a href="#2-1-引用类型" class="headerlink" title="2.1 引用类型"></a>2.1 引用类型</h4><blockquote><p>引用类型： Object     Array    Date   等</p></blockquote><h5 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h5><p><code>Object</code> 是内置的构造函数，用于创建普通对象。</p><p>推荐使用字面量方式声明对象，而不是 <code>Object</code> 构造函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过构造函数创建普通对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 这种方式声明的变量称为[字面量]  推荐使用！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> student = &#123;<span class="attr">name</span>: <span class="string">&#x27;清&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对象语法简写</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> name = <span class="string">&#x27;小红&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> people = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 相当于 name: name</span></span></span><br><span class="line"><span class="language-javascript">    name,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 相当于 walk: function () &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    walk () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人都要走路...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">constructor</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">constructor</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(student <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//想要获得对象里面的属性和值怎么做？</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(k) <span class="comment">//属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]) <span class="comment">//属性值</span></span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//现在有新的方法</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三个静态方法：（静态方法就是只有构造函数Object可以调用的）</p><h6 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h6><blockquote><p><code>Object.assign</code> 静态方法创建新的对象，常用于对象拷贝</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//对象的拷贝</span></span><br><span class="line">     <span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">     <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, o) <span class="comment">//把o 拷贝给 obj</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)  <span class="comment">//&#123; uname: &#x27;pink&#x27;, age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用：经常使用的场景给对象添加属性</span></span><br><span class="line">      <span class="comment">//给 o 新增属性</span></span><br><span class="line">      <span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(o, &#123; <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span> &#125;)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(o) <span class="comment">//&#123; uname: &#x27;pink&#x27;, age: 18, gender: &#x27;女&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h6 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h6><blockquote><p><code>Object.keys</code> 静态方法获取对象中所有属性 (键)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">    <span class="comment">// 获得所有的属性名(键) 并且返回的是一个数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(o))  <span class="comment">//返回数组[&#x27;uname&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="comment">//注：返回的是一个数组！！！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="values"><a href="#values" class="headerlink" title="values"></a>values</h6><blockquote><p><code>Object.values</code> 表态方法获取对象中所有属性值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"> <span class="comment">// 获得所有的属性值， 并且返回的是一个数组</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(o))  <span class="comment">//  [&#x27;pink&#x27;, 18]</span></span><br><span class="line"><span class="comment">//注：返回的是一个数组！！！</span></span><br></pre></td></tr></table></figure><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><p><code>Array</code> 是内置的构造函数，用于创建数组。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 构造函数创建数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[5,7,8]</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 字面量方式创建数组  建议使用字面量创建数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数组赋值后，无论修改哪个变量另一个对象的数据值也会相当发生改变。</p><h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><ul><li><p>作用：reduce  返回函数累计处理的结果，经常用于求和等</p></li><li><p>基本语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; &#125; , 起始值)</span><br></pre></td></tr></table></figure></li><li><p>参数：起始值可以省略，如果写就作为第一次累计的起始值</p></li><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">累计值，当前元素[,索引号][,原数组]</span>) &#123; &#125; , 起始值)</span><br></pre></td></tr></table></figure></li><li><p>累计值参数：</p><ol><li><p>如果有起始值，则以起始值为准开始累计， 累计值  &#x3D; 起始值</p></li><li><p>如果没有起始值， 则累计值以数组的第一个数组元素作为起始值开始累计</p></li><li><p>后面每次遍历就会用后面的数组元素 累计到 累计值 里面 （类似求和里面的 sum ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用场景：求和运算</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">const</span> re = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(re)  <span class="comment">//6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul><p>总结：</p><ol><li><p>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</p></li><li><p>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环 (重点) 不返回，用于不改变值，经常用于查找打印输出值</p></li><li><p>实例方法 <code>filter</code> 过滤数组单元值，生成新数组(重点)    筛选数组元素，并生成新数组</p></li><li><p>实例方法 <code>map</code> 迭代原数组，生成新数组(重点)    返回新数组，新数组里面的元素是处理之后的值，经常用于处理数据</p></li><li><p>实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p></li><li><p>实例方法  <code>find</code>  查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)</p></li><li><p>实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p></li><li><p>实例方法<code>some</code> 检测数组中的元素是否满足指定条件   <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p></li><li><p>实例方法 <code>concat</code>  合并两个数组，返回生成新数组</p></li><li><p>实例方法 <code>sort</code> 对原数组单元值排序</p></li><li><p>实例方法 <code>splice</code> 删除或替换原数组单元</p></li><li><p>实例方法 <code>reverse</code> 反转数组</p></li><li><p>实例方法 <code>findIndex</code>  查找元素的索引值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find</span></span><br><span class="line"> <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">     <span class="keyword">const</span> re = arr.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> item === <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(re) <span class="comment">//blue</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> arr = [&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">3999</span></span><br><span class="line">            &#125;, ]</span><br><span class="line">            <span class="comment">// 找小米 这个对象，并且返回这个对象</span></span><br><span class="line">        <span class="keyword">const</span> mi = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">                <span class="comment">// console.log(item)  </span></span><br><span class="line">                <span class="comment">// console.log(item.name)  </span></span><br><span class="line">                <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;小米&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// find 查找</span></span><br><span class="line">            <span class="comment">// const mi = arr.find(item =&gt; item.name === &#x27;小米&#x27;)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mi)  <span class="comment">//&#123;name: &#x27;小米&#x27;, price: 1999 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//every </span></span><br><span class="line"><span class="comment">//每一个是否都符合条件，如果都符合返回 true ，否则返回false</span></span><br><span class="line">              <span class="keyword">const</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">             <span class="keyword">const</span> flag = arr1.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">20</span>)</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(flag) <span class="comment">//false</span></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">   <span class="keyword">const</span> spec = &#123;</span><br><span class="line">       <span class="attr">size</span>: <span class="string">&#x27;40cm*40cm&#x27;</span>, </span><br><span class="line">       <span class="attr">color</span>: <span class="string">&#x27;黑色&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//1. 所有的属性值回去过来  数组</span></span><br><span class="line">    <span class="comment">// console.log(Object.values(spec))</span></span><br><span class="line">    <span class="comment">// 2. 转换为字符串   数组join(&#x27;/&#x27;) 把数组根据分隔符转换为字符串</span></span><br><span class="line">    <span class="comment">// console.log(Object.values(spec).join(&#x27;/&#x27;))</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerHTML</span> = <span class="title class_">Object</span>.<span class="title function_">values</span>(spec).<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>)   <span class="comment">//40cm*40cm/黑色</span></span><br></pre></td></tr></table></figure><p>数组常见方法：为数组转换为真数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">form</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Array.from(lis) 把伪数组转换为真数组</span></span><br><span class="line">    <span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul li&#x27;</span>)</span><br><span class="line">    <span class="comment">// console.log(lis)</span></span><br><span class="line">    <span class="comment">// lis.pop() 报错</span></span><br><span class="line">    <span class="keyword">const</span> liss = <span class="title class_">Array</span>.<span class="title function_">from</span>(lis)</span><br><span class="line">    liss.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(liss)</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-包装类型"><a href="#2-2-包装类型" class="headerlink" title="2.2 包装类型"></a>2.2 包装类型</h4><blockquote><p>包装类型： String  Number   Boolean  等</p></blockquote><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，如下代码举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 字符串类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// 统计字符的长度（字符数量）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 数值类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> price = <span class="number">12.345</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 保留两位小数</span></span></span><br><span class="line"><span class="language-javascript">  price.<span class="title function_">toFixed</span>(<span class="number">2</span>) <span class="comment">// 12.34</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。</p><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p><code>String</code> 是内置的构造函数，用于创建字符串。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 使用构造函数创建字符串</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 字面量创建字符串</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> str2 = <span class="string">&#x27;你好，世界！&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 检测是否属于同一个构造函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">constructor</span> === str2.<span class="property">constructor</span>); <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>实例属性 <code>length</code> 用来获取字符串的度长  (重点)</li><li>实例方法 <code>split(&#39;分隔符&#39;)</code> 用来将字符串拆分成数组  (重点)</li><li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取  (重点)</li><li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头  (重点)</li><li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false     (重点)</li><li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li><li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li><li>实例方法 <code>indexOf</code>  检测是否包含某字符</li><li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li><li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li><li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li></ol><p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. split 把字符串 转换为 数组     和 join() 相反</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&#x27;pink,red&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[&#x27;pink&#x27;,&#x27;red&#x27;]</span></span><br><span class="line">    <span class="keyword">const</span> str1 = <span class="string">&#x27;2022-4-8&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> arr1 = str1.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)  <span class="comment">//[2022,4,8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 字符串的截取   substring(开始的索引号[， 结束的索引号])</span></span><br><span class="line">    <span class="comment">// 2.1 如果省略 结束的索引号，默认取到最后</span></span><br><span class="line">    <span class="comment">// 2.2 结束的索引号不包含想要截取的部分!!!</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&#x27;今天又要做核酸了&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">5</span>, <span class="number">7</span>)) <span class="comment">//核酸</span></span><br><span class="line">    <span class="keyword">const</span> str1 = <span class="string">&#x27;qingqing&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">//g  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. startsWith 判断是不是以某个字符开头</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&#x27;pink老师上课中&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;pink&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line">    <span class="keyword">const</span> str1 = <span class="string">&#x27;#to be&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;#&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;t&#x27;</span>))  <span class="comment">//false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;t&#x27;</span>,<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. includes 判断某个字符是不是包含在一个字符串里面</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&#x27;我是pink老师&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;pink&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h5><p><code>Number</code> 是内置的构造函数，用于创建数值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 使用构造函数创建数值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="string">&#x27;10&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> y = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">5</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 字面量创建数值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> z = <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//常用方法：</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//toFixed() 设置保留小位数的长度</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> price = <span class="number">12.345</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(price.<span class="title function_">toFixed</span>(<span class="number">2</span>)) <span class="comment">//12.35  //会四舍五入</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>推荐使用字面量方式声明数值，而不是 <code>Number</code> 构造函数</li><li>实例方法 <code>toFixed</code> 用于设置保留小数位的长度</li></ol><h3 id="渲染赠品案例"><a href="#渲染赠品案例" class="headerlink" title="渲染赠品案例"></a>渲染赠品案例</h3><p><img src="/assets/image-20230123214457746.png" alt="image-20230123214457746"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;div class=&quot;item&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;img src=&quot;https://yanxuan-item.nosdn.127.net/84a59ff9c58a77032564e61f716846d6.jpg&quot; alt=&quot;&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;p class=&quot;name&quot;&gt;称心如意手摇咖啡磨豆机咖啡豆研磨机 &lt;span class=&quot;tag&quot;&gt;【赠品】10优惠券&lt;/span&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;p class=&quot;spec&quot;&gt;白色/10寸&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;p class=&quot;price&quot;&gt;289.90&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;p class=&quot;count&quot;&gt;x2&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;p class=&quot;sub-total&quot;&gt;579.80&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    &lt;/div&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>合计：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>1000.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> goodsList = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">id</span>: <span class="string">&#x27;4001172&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;称心如意手摇咖啡磨豆机咖啡豆研磨机&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">price</span>: <span class="number">289.9</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/84a59ff9c58a77032564e61f716846d6.jpg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">spec</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;白色&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">id</span>: <span class="string">&#x27;4001009&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;竹制干泡茶盘正方形沥水茶台品茶盘&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">price</span>: <span class="number">109.8</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/2d942d6bc94f1e230763e1a5a3b379e1.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">spec</span>: &#123; <span class="attr">size</span>: <span class="string">&#x27;40cm*40cm&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;黑色&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">id</span>: <span class="string">&#x27;4001874&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;古法温酒汝瓷酒具套装白酒杯莲花温酒器&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">price</span>: <span class="number">488</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/44e51622800e4fceb6bee8e616da85fd.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">spec</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;青色&#x27;</span>, <span class="attr">sum</span>: <span class="string">&#x27;一大四小&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">id</span>: <span class="string">&#x27;4001649&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;大师监制龙泉青瓷茶叶罐&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">price</span>: <span class="number">139</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/4356c9fc150753775fe56b465314f1eb.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">spec</span>: &#123; <span class="attr">size</span>: <span class="string">&#x27;小号&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;紫色&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">gift</span>: <span class="string">&#x27;50g茶叶,清洗球,宝马, 奔驰&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 根据数据渲染页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//利用map来遍历，有多少条数据渲染多少商品</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//先写死数据 map返回的是数组，需要join(&#x27;&#x27;)转换为字符串，然后赋值给list</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="property">innerHTML</span> = goodsList.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(item)  // 每一条对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 对象解构  item.price item.count</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; picture, name, count, price, spec, gift &#125; = item</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 规格文字模块处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> text = <span class="title class_">Object</span>.<span class="title function_">values</span>(spec).<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 计算小计模块 单价 * 数量  保留两位小数 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 注意精度问题，因为保留两位小数，所以乘以 100  最后除以100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> subTotal = ((price * <span class="number">100</span> * count) / <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 处理赠品模块 &#x27;50g茶叶,清洗球&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> str = gift ? gift.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;span class=&quot;tag&quot;&gt;【赠品】<span class="subst">$&#123;item&#125;</span>&lt;/span&gt; `</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) : <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;div class=&quot;item&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;img src=<span class="subst">$&#123;picture&#125;</span> alt=&quot;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;p class=&quot;name&quot;&gt;<span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;str&#125;</span> &lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;p class=&quot;spec&quot;&gt;<span class="subst">$&#123;text&#125;</span> &lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;p class=&quot;price&quot;&gt;<span class="subst">$&#123;price.toFixed(<span class="number">2</span>)&#125;</span>&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;p class=&quot;count&quot;&gt;x<span class="subst">$&#123;count&#125;</span>&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;p class=&quot;sub-total&quot;&gt;<span class="subst">$&#123;subTotal&#125;</span>&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 合计模块</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> total = goodsList.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + (item.<span class="property">price</span> * <span class="number">100</span> * item.<span class="property">count</span>) / <span class="number">100</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(total)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.amount&#x27;</span>).<span class="property">innerHTML</span> = total.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="深入面向对象"><a href="#深入面向对象" class="headerlink" title="深入面向对象"></a>深入面向对象</h2><blockquote><p>了解构造函数原型对象的语法特征，掌握 JavaScript 中面向对象编程的实现方式，基于面向对象编程思想实现 DOM 操作的封装。</p></blockquote><ul><li>了解面向对象编程的一般特征</li><li>掌握基于构造函数原型对象的逻辑封装</li><li>掌握基于原型对象实现的继承</li><li>理解什么原型链及其作用</li><li>能够处理程序异常提升程序执行的健壮性</li></ul><h3 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h3><blockquote><p>学习 JavaScript 中基于原型的面向对象编程序的语法实现，理解面向对象编程的特征。</p></blockquote><p>面向对象编程是一种程序设计思想，它具有 3 个显著的特征：封装、继承、多态。</p><h4 id="1-1-封装"><a href="#1-1-封装" class="headerlink" title="1.1 封装"></a>1.1 封装</h4><p>封装的本质是将具有关联的代码组合在一起，其优势是能够保证代码复用且易于维护，函数是最典型也是最基础的代码封装形式，面向对象思想中的封装仍以函数为基础，但提供了更高级的封装形式。</p><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><p>先来回顾一下以往代码封装的形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通对象（命名空间）形式的封装</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> beats = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;狼&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">setName</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  beats.<span class="title function_">setName</span>(<span class="string">&#x27;熊&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  beats.<span class="title function_">getName</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以往以普通对象（命名空间）形式封装的代码只是单纯把一系列的变量或函数组合到一起，所有的数据变量都被用来共享（使用 this 访问）。</p><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><blockquote><p>封装是面向对象思想中比较重要的一部分，<code>js</code> 面向对象可以通过构造函数实现的封装。</p></blockquote><blockquote><p>同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之间是彼此不影响</p></blockquote><p>对比以下通过面向对象的构造函数实现的封装：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;清&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">setName</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;<span class="comment">// 设置名字</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取名字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 实例对像，获得了构造函数中封装的所有逻辑</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  p1.<span class="title function_">setName</span>(<span class="string">&#x27;小明&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 实例对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125; </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//实例对象，获得了构造函数中封装的所有逻辑。</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>)</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span> === zxy.<span class="property">sing</span>) <span class="comment">//false  说明两函数不一样 </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>封装是面向对象思想中比较重要的一部分，<code>js</code>面向对象可以通过构造函数实现的封装。</li><li>前面我们学过的构造函数方法很好用，但是 <strong>存在浪费内存的问题</strong></li></ul><p>同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之间是彼此不影响的。</p><p>总结：</p><ol><li>构造函数体现了面向对象的封装特性</li><li>构造函数实例创建的对象彼此独立、互不影响</li><li>命名空间式的封装无法保证数据的独立性</li></ol><p>注：可以举一些例子，如女娲造人等例子，加深对构造函数的理解。</p><h5 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h5><blockquote><p>目标：能够利用原型对象实现方法共享</p></blockquote><ul><li>构造函数通过原型分配的函数是所有对象所 共享的。</li><li>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象</li><li>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存</li><li>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</li><li>构造函数和原型对象中的this 都指向 实例化的对象</li></ul><p>实际上每一个构造函数都有一个名为 <code>prototype</code> 的属性，译成中文是原型的意思，<code>prototype</code> 的是对象类据类型，称为构造函数的原型对象，每个原型对象都具有 <code>constructor</code> 属性代表了该原型对象对应的构造函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//公共的属性</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 每个函数都有 prototype 属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">//返回一个对象称为原型对象</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>了解了 JavaScript 中构造函数与原型对象的关系后，再来看原型对象具体的作用，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处未定义任何方法                       //1.公共的属性写到构造函数里面</span></span></span><br><span class="line"><span class="language-javascript">  &#125;                                      </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 为构造函数的原型对象添加方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;     <span class="comment">//2.公共的方法写到原型对象身上</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi~&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 实例化</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  p1.<span class="title function_">sayHi</span>(); <span class="comment">// 输出结果为 Hi~</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>构造函数 <code>Person</code> 中未定义任何方法，这时实例对象调用了原型对象中的方法 <code>sayHi</code>，接下来改动一下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处定义同名方法 sayHi</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//构造函数 `Person` 中定义与原型对象中相同名称的方法，这时实例对象调用则是构造函中的方法 `sayHi`！！！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 为构造函数的原型对象添加方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi~&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;   </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  p1.<span class="title function_">sayHi</span>(); <span class="comment">// 输出结果为 嗨!</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>构造函数 <code>Person</code> 中定义与原型对象中相同名称的方法，这时实例对象调用则是构造函中的方法 <code>sayHi</code>。</p><p>通过以上两个简单示例不难发现 JavaScript 中对象的工作机制：<strong>当访问对象的属性或方法时，先在当前实例对象是查找，然后再去原型对象查找，并且原型对象被所有实例共享。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处定义同名方法 sayHi</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨!&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 为构造函数的原型对象添加方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi~&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在构造函数的原型对象上添加属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  p1.<span class="title function_">sayHi</span>(); <span class="comment">// 输出结果为 嗨!</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  p2.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><strong>结合构造函数原型的特征，实际开发重往往会将封装的功能函数添加到原型对象中。</strong></li><li>公共的属性写到构造函数里面</li><li>公共的方法写到原型对象身上</li></ol><h6 id="原型-this指向"><a href="#原型-this指向" class="headerlink" title="原型-this指向"></a>原型-this指向</h6><blockquote><p>构造函数 和 原型对象 中的this 都指向实例化的对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> that</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname  <span class="comment">//this指向实例化的对象 o</span></span><br><span class="line">      that = <span class="variable language_">this</span>     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> o = <span class="keyword">new</span> <span class="title class_">Star</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(that === o)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原型对象里面的函数this指向的还是 实例对象 ldh</span></span><br><span class="line">    <span class="keyword">let</span> that</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname  </span><br><span class="line">      that = <span class="variable language_">this</span>     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      that = <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例对象 ldh   </span></span><br><span class="line">    <span class="comment">// 构造函数里面的 this 就是  实例对象  ldh</span></span><br><span class="line">    <span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>)</span><br><span class="line">    ldh.<span class="title function_">sing</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己定义 数组扩展方法  求和 和 最大值 </span></span><br><span class="line"><span class="comment">// 1. 我们定义的这个方法，任何一个数组实例对象都可以使用</span></span><br><span class="line"><span class="comment">// 2. 自定义的方法写到  数组.prototype 身上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 最大值</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">max</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable language_">this</span>)  <span class="comment">// 展开运算符</span></span><br><span class="line">  <span class="comment">// 原型函数里面的this 指向谁？ 实例对象 arr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 最小值</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(...<span class="variable language_">this</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">max</span>())  <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].<span class="title function_">max</span>()) <span class="comment">//9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">min</span>())  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 求和 方法 </span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">sum</span>()) <span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">11</span>, <span class="number">21</span>, <span class="number">31</span>].<span class="title function_">sum</span>()) <span class="comment">//63</span></span><br></pre></td></tr></table></figure><h6 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h6><blockquote><p>该属性指向 该原型对象的构造函数。</p></blockquote><p>每个原型对象里面都有个constructor 属性（constructor 构造函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name       ---------&gt; <span class="comment">//共享的属性和方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age         &lt;---------  <span class="comment">// constructor 属性</span></span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//构造函数                             原型prototype</span></span><br></pre></td></tr></table></figure><p>使用场景：如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name      </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age        </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;      </span><br><span class="line">    <span class="attr">sing</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>() &#125;,</span><br><span class="line">    <span class="attr">dance</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">//指向Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name      </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age        </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;      </span><br><span class="line">    <span class="comment">//手动利用constructor 指向 Star 构造函数</span></span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Star</span>                    </span><br><span class="line">    <span class="attr">sing</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>() &#125;,</span><br><span class="line">    <span class="attr">dance</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">//指向 Star</span></span><br></pre></td></tr></table></figure><h6 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h6><blockquote><p>对象都会有一个属性<code>__ proto __ </code>指向构造函数的 prototype 原型对象。</p></blockquote><blockquote><p>之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <code>__ proto __ </code>原型的存在。</p></blockquote><p>注意：</p><ol><li><code>__ proto __ </code> 是<code>js </code>非标准属性</li><li>[[prototype]]和<code>__ proto __ </code>意义相同</li><li>用来表明当前实例对象指向哪个原型对象prototype</li><li><code>__ proto __ </code>对象原型里面也有一个 constructor属性，<strong>指向创建该实例对象的构造函数</strong></li></ol><h4 id="1-2-继承"><a href="#1-2-继承" class="headerlink" title="1.2 继承"></a>1.2 继承</h4><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性。</p><p>龙生龙、凤生凤、老鼠的儿子会打洞描述的正是继承的含义，分别封装中国人和日本人的行为特征来理解编程中继承的含义，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 封装中国人的行为特征</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Chinese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 中国人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">arms</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">legs</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;中文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 中国人的行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 封装日本人的行为特征</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Japanese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 日本人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">arms</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">legs</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;日文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 日本人的行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实我们都知道无论是中国人、日本人还是其它民族，人们的大部分特征是一致的，然而体现在代码中时人的相同的行为特征被重复编写了多次，代码显得十分冗余，我们可以将重复的代码抽离出来：</p><h5 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h5><p>基于构造函数原型对象实现面向对象的继承特性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 所有人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">arms</span> = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">legs</span> = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 中国人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Chinese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;中文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 日本人</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Japanese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;日文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码可以理解成将 <code>Chinese</code> 和 <code>Japanese</code> 共有的属性和方法提取出来了，也就是说 <code>Chinese</code> 和 <code>Japanese</code> 需要【共享】一些属性和方法，而原型对象的属性和方法恰好是可以被用来共享的，因此我们看如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 人们共有的行为特征</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> people = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">arms</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">legs</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">eyes</span>:<span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">walk</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sleep</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 中国人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Chinese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;中文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 日本人</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Japanese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;日文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 为 prototype 重新赋值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span> = people <span class="comment">//把公共的属性和方法给原型，这样就可以共享了*****</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Chinese</span> <span class="comment">//注意让原型里的 constructor 重新指回Chinese *****</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> qing = <span class="keyword">new</span> <span class="title class_">Chinese</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(qing)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p>创建对象 <code>people</code> 将公共的的属性和方法独立出来，然后赋值给构造函数的 <code>prototype</code> 这样无论有多少个民族都可以共享公共的属性和方法了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 人们共有的行为特征</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> people = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">arms</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">legs</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">eyes</span>:<span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">walk</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sleep</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 中国人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Chinese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;中文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 日本人</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Japanese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;日文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Englist</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;white&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span>= <span class="string">&#x27;英文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 中国人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span> = people <span class="comment">//把公共的属性和方法给原型，这样就可以共享了*****</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Chinese</span> <span class="comment">//注意让原型里的 constructor 重新指回Chinese *****</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> c1 = <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 日本人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Japanese</span>.<span class="property"><span class="keyword">prototype</span></span> = people <span class="comment">//把公共的属性和方法给原型，这样就可以共享了*****</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Janpanese</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Japanese</span> <span class="comment">//注意让原型里的 constructor 重新指回Japanese *****</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 英国人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">English</span>.<span class="property"><span class="keyword">prototype</span></span> = people <span class="comment">//把公共的属性和方法给原型，这样就可以共享了*****</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">English</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">English</span> <span class="comment">//注意让原型里的 constructor 重新指回English *****</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继承是一种可以“不劳而获”的手段！！！上述代码中 <code>Chinese</code>、<code>Japanese</code>、<code>English</code> 都轻松的获得了 <code>people</code> 的公共的方法和属性，我们说 <code>Chinese</code>、<code>Japanese</code>、<code>English</code> 继承了 <code>people</code>。</p><p>上述代码中是以命名空间的形式实现的继承，事实上 JavaScript 中继承更常见的是借助构造函数来实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 所有人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;  <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">arms</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">legs</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 人的行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 封装中国人的行为特征</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Chinese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 中国人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;中文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 封装日本人的行为特征</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Japanese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 日本人的特征</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;日文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// human 是构造函数 Person 的实例</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> human = <span class="keyword">new</span> <span class="title class_">Person</span>()    ********</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 中国人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span> = human </span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Chinese</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 日本人</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Japanese</span>.<span class="property"><span class="keyword">prototype</span></span> = human</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Japanese</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Japanese</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继承完善写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装Person  (父类)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;  <span class="comment">//构造函数</span></span><br><span class="line">    <span class="comment">// 人的特征</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arms</span> = <span class="number">2</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">legs</span> = <span class="number">2</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 人的行为</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//console.log(new Person()) //输出一个对象   // const Person = &#123;  &#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//男人</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123; &#125; <span class="comment">//子构造函数（子类）</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//用 new Person()替换刚才的固定对象!!!!!!</span></span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">    <span class="comment">//注意让原型里的 constructor 重新指回Man *****</span></span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line">   <span class="keyword">const</span> pink = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">smoking</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(pink)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//女人 构造函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">baby</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span></span><br><span class="line">   <span class="keyword">const</span> red = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(red)</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路：</span></span><br><span class="line"><span class="comment">//真正做这个案例，我们的思路应该是先考虑大的，后考虑小的</span></span><br><span class="line"><span class="comment">//人类共有的属性和方法有那些，然后做个构造函数，进行封装</span></span><br><span class="line"><span class="comment">//一般公共属性写到构造函数内部</span></span><br><span class="line"><span class="comment">//公共方法，挂载到构造函数原型身上。</span></span><br><span class="line"><span class="comment">//男人继承人类的属性和方法，之后创建自己独有的属性和方法</span></span><br><span class="line"><span class="comment">//女人同理</span></span><br></pre></td></tr></table></figure><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><blockquote><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Person 构造函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">arms</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Person 原型对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">legs</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eyes</span> = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Chinese 构造函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Chinese</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">language</span> = <span class="string">&#x27;中文&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Chinese 原型对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Chinese</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Chinese</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 实例化</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> c1 = <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c1);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 JavaScript 对象中包括了一个非标准备的属性 <code>__proto__</code> 它指向了构造函数的原型对象，通过它可以清楚的查看原型对象的链状结构。</p><p><img src="/assets%5Cimage-20230124131233828.png" alt="image-20230124131233828"></p><p>原型链查找规则:</p><blockquote><p>所有的对象里面都有<code>__ proto __ </code> 对象原型，指向原型对象。</p></blockquote><blockquote><p>所有的原型对象里面有constructor , 指向创造该原型对象的构造函数。</p></blockquote><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型（也就是 <code>__ proto __ </code> 指向的 prototype 原型对象）</li><li>如果还没有就查找原型对象的原型（Object的原型对象）</li><li>依此类推一直找到 Object 为止（null）</li><li><code>__ proto __ </code> 对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</li><li>可以使用 <code>instanceof </code>  运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh <span class="keyword">instanceof</span> <span class="title class_">Star</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><p><img src="/assets%5Cimage-20230124132746556.png" alt="image-20230124132746556"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>温馨提示 <span class="tag">&lt;<span class="name">i</span>&gt;</span>x<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span>您没有删除权限操作<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.  模态框的构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">Modal</span>(<span class="params">title = <span class="string">&#x27;&#x27;</span>, message = <span class="string">&#x27;&#x27;</span></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 公共的属性部分</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">title</span> = title</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">message</span> = message</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 因为盒子是公共的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1. 创建 一定不要忘了加 this </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">modalBox</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 2. 添加类名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">modalBox</span>.<span class="property">className</span> = <span class="string">&#x27;modal&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 3. 填充内容 更换数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">modalBox</span>.<span class="property">innerHTML</span> = <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;div class=&quot;header&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.title&#125;</span> &lt;i&gt;x&lt;/i&gt;&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;div class=&quot;body&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.message&#125;</span>&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(this.modalBox)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 打开方法 挂载 到 模态框的构造函数原型身上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Modal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.modal&#x27;</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 把刚才创建的盒子 modalBox  渲染到 页面中  父元素.appendChild(子元素)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">modalBox</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取 x  调用关闭方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">modalBox</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;i&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 箭头函数没有this 上一级作用域的this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 这个this 指向 m </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">close</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 关闭方法 挂载 到 模态框的构造函数原型身上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Modal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">close</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">modalBox</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 4. 按钮点击</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#delete&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Modal</span>(<span class="string">&#x27;温馨提示&#x27;</span>, <span class="string">&#x27;您没有权限删除&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 调用 打开方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      m.<span class="title function_">open</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 5. 按钮点击</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#login&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Modal</span>(<span class="string">&#x27;友情提示&#x27;</span>, <span class="string">&#x27;您还么有注册账号&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 调用 打开方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      m.<span class="title function_">open</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-进阶-2"><a href="#JavaScript-进阶-2" class="headerlink" title="JavaScript 进阶"></a>JavaScript 进阶</h2><h3 id="一、深浅拷贝"><a href="#一、深浅拷贝" class="headerlink" title="一、深浅拷贝"></a>一、深浅拷贝</h3><blockquote><p>首先浅拷贝和深拷贝只针对引用类型</p></blockquote><ol><li>首先浅拷贝和深拷贝只针对想Object,Array这样的复杂对象，简单来说，浅拷贝只复制一层对象的属性，二深拷贝则复制了所有的层级。</li><li>对于字符串类型，浅复制是对值的复制，对于对象来说，浅复制是对对象地址的复制，并没   有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会 改变，而深复制则是开辟新的栈，两个对象对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把对象转换为 JSON 字符串</span></span><br><span class="line">    <span class="comment">// console.log(JSON.stringify(obj))</span></span><br><span class="line">    <span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h5 id="1-1-浅拷贝"><a href="#1-1-浅拷贝" class="headerlink" title="1.1 浅拷贝"></a>1.1 浅拷贝</h5><blockquote><p>浅拷贝：拷贝的是地址</p></blockquote><blockquote><p><strong>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址。</strong></p></blockquote><p>常见方法：</p><ol><li>拷贝对象： <code>Object.assgin()</code> &#x2F;     展开运算符  { …obj }  拷贝对象</li><li>拷贝数组：  <code>Array.prototype.concat() </code>  或者  [ …arr ]</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开运算符 &#123; ...obj &#125;</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 浅拷贝</span></span><br><span class="line">     <span class="keyword">const</span> o = &#123; ...obj &#125;  </span><br><span class="line">    <span class="comment">// console.log(o)   </span></span><br><span class="line">     o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(o)  <span class="comment">// &#123;uname: &#x27;pink&#x27;,age: 20,family: &#123;baby: &#x27;小pink&#x27;&#125;&#125;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">//&#123;uname: &#x27;pink&#x27;,age: 18,family: &#123;baby: &#x27;小pink&#x27;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,        <span class="comment">//简单数据类型拷贝值</span></span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span>      <span class="comment">//引用数据类型拷贝地址</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(o, obj)</span><br><span class="line">    o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;老pink&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)  <span class="comment">//&#123;uname: &#x27;pink&#x27;,age: 20,family: &#123;baby: &#x27;老pink&#x27;&#125;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">//&#123;uname: &#x27;pink&#x27;,age: 18,family: &#123;baby: &#x27;老pink&#x27;&#125;&#125;  //老pink被修改了</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//更该对象里的方法还是会有影响</span></span><br><span class="line">   <span class="comment">//**如果是简单数据类型拷贝值，引用数据类型拷贝的是地址。**</span></span><br><span class="line">   <span class="comment">//(简单理解： 如果是单层对象，没问题，如果有多层就有问题)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p>直接赋值和浅拷贝有什么区别？</p><ol><li>直接赋值的方法，只要是对象，都会相互影响，因为是直接拷贝对象栈里面的地址</li><li>浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会相互影响</li></ol></li><li><p>浅拷贝怎么理解？</p><ol><li>拷贝对象之后，里面的属性值是简单数据类型直接拷贝值</li><li>如果属性值是引用数据类型则拷贝的是地址</li></ol></li></ul><h5 id="1-2-深拷贝"><a href="#1-2-深拷贝" class="headerlink" title="1.2 深拷贝"></a>1.2 深拷贝</h5><blockquote><p>深拷贝：拷贝的是对象，不是地址</p></blockquote><p>常见方法：</p><ol><li>通过递归实现深拷贝</li><li><code>lodash</code>  &#x2F;   <code>  cloneDeep</code> </li><li>通过  <code>  JSON.stringify()</code>   实现</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.通过递归实现深拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line">    <span class="comment">// 拷贝函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>) &#123;</span><br><span class="line">      <span class="keyword">debugger</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">        <span class="comment">// 处理数组的问题  一定先写数组 在写 对象 不能颠倒</span></span><br><span class="line">        <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">          newObj[k] = []</span><br><span class="line">          <span class="comment">//  newObj[k] 接收 []  hobby</span></span><br><span class="line">          <span class="comment">//  oldObj[k]   [&#x27;乒乓球&#x27;, &#x27;足球&#x27;]</span></span><br><span class="line">          <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">          newObj[k] = &#123;&#125;</span><br><span class="line">          <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//  k  属性名 uname age    oldObj[k]  属性值  18</span></span><br><span class="line">          <span class="comment">// newObj[k]  === o.uname  给新对象添加属性</span></span><br><span class="line">          newObj[k] = oldObj[k]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">deepCopy</span>(o, obj) <span class="comment">// 函数调用  两个参数 o 新对象  obj 旧对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">    o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">    o.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;篮球&#x27;</span></span><br><span class="line">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;老pink&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">23</span>] <span class="keyword">instanceof</span> <span class="title class_">Object</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//一定要先写Array后写Object</span></span><br><span class="line"><span class="comment">//当我们在进行简单类型拷贝的时候没问题，直接赋值就行了。</span></span><br><span class="line"><span class="comment">//但是如果遇到数组的拷贝，再次调用递归函数，如果遇到对象的形式，再次调用递归把对象解决。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.`lodash`  /   `  cloneDeep` </span></span><br><span class="line"><span class="comment">//js库 lodash 里面cloneDeep 内部实现了深拷贝</span></span><br><span class="line"><span class="comment">//1.先引入js文件</span></span><br><span class="line"></span><br><span class="line">  &lt;script src=<span class="string">&quot;./lodash.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">family</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//语法： _.cloneDeep(要被克隆的对象)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> o = _.<span class="title function_">cloneDeep</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;老pink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.通过  `  JSON.stringify()`   实现</span></span><br><span class="line"><span class="comment">//JSON.parse(JSON.stringify(obj))</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把对象转换为 JSON 字符串</span></span><br><span class="line">    <span class="comment">// console.log(JSON.stringify(obj))</span></span><br><span class="line">    <span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h3 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h3><blockquote><p>了解 JavaScript 中程序异常处理的方法，提升代码运行的健壮性。</p></blockquote><h5 id="2-1-throw"><a href="#2-1-throw" class="headerlink" title="2.1 throw"></a>2.1 throw</h5><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(!x || !y) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// throw &#x27;参数不能为空!&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数不能为空!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> x + y</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">counter</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>throw</code> 抛出异常信息，程序也会终止执行</li><li><code>throw</code> 后面跟的是错误提示信息</li><li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li></ol><h5 id="2-2-try-…-catch"><a href="#2-2-try-…-catch" class="headerlink" title="2.2 try … catch"></a>2.2 try … catch</h5><p>捕捉错误信息（浏览器提供的错误信息）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//try 试试 尝试 catch 拦住 finally 最后</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查找 DOM 节点</span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.p&#x27;</span>)</span><br><span class="line">        p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// try 代码段中执行有错误时，会执行 catch 代码段</span></span><br><span class="line">        <span class="comment">// 查看错误信息</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>)</span><br><span class="line">        <span class="comment">// 终止代码继续执行</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;           <span class="comment">//fainlly不管是否有错，都会执行。</span></span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&#x27;执行&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;如果出现错误，我的语句不会执行&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>try...catch</code> 用于捕获错误信息</li><li>将预估可能发生错误的代码写在 <code>try</code> 代码段中</li><li>如果 <code>try</code> 代码段中出现错误后，会执行 <code>catch</code> 代码段，并截获到错误信息</li><li><code>fainlly</code> 不管是否有错，都会执行。</li></ol><h3 id="三、this"><a href="#三、this" class="headerlink" title="三、this"></a>三、this</h3><blockquote><p>了解函数中 this 在不同场景下的默认值，知道动态指定函数 this 值的方法。</p></blockquote><h4 id="1-1-默认值"><a href="#1-1-默认值" class="headerlink" title="1.1 默认值"></a>1.1 默认值</h4><p><code>this</code> 是 JavaScript 最具“魅惑”的知识点，不同的应用场合 <code>this</code> 的取值可能会有意想不到的结果，在此我们对以往学习过的关于【 <code>this</code> 默认的取值】情况进行归纳和总结。</p><h5 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h5><p><strong>普通函数</strong>的调用方式决定了 <code>this</code> 的值，即【谁调用 <code>this</code> 的值指向谁】，如下代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 函数表达式</span></span><br><span class="line">  <span class="keyword">const</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 函数的调用方式决定了 this 的值</span></span><br><span class="line">  <span class="title function_">sayHi</span>() <span class="comment">// window</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line">  <span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">walk</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 动态为 user 添加方法</span></span><br><span class="line">  user.<span class="property">sayHi</span> = sayHi</span><br><span class="line">  uesr.<span class="property">sayHello</span> = sayHello</span><br><span class="line">  <span class="comment">// 函数调用方式，决定了 this 的值</span></span><br><span class="line">  user.<span class="title function_">sayHi</span>()</span><br><span class="line">  user.<span class="title function_">sayHello</span>()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//严格模式</span></span><br><span class="line">   <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">//普通函数没有明确调用者时 `this` 值为 `window`，严格模式下没有调用者时 `this` 的值为 `undefined`。</span></span><br></pre></td></tr></table></figure><p>注： 普通函数没有明确调用者时 <code>this</code> 值为 <code>window</code>，严格模式下没有调用者时 <code>this</code> 的值为 <code>undefined</code>。</p><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p><strong>箭头函数</strong>中的 <code>this</code> 与普通函数完全不同，也不受调用方式的影响，<strong>事实上箭头函数中并不存在 <code>this</code></strong> ！箭头函数中访问的 <code>this</code> 不过是箭头函数所在作用域的 <code>this</code> 变量。</p><ol><li>箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的</li><li>箭头函数中的this引用的就是最近作用域中的this</li><li>向外层作用域中，一层一层查找this，直到有this的定义</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 此处为 window</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 箭头函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 该箭头函数中的 this 为函数声明环境中 this 一致</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 该箭头函数中的 this 为函数声明环境中 this 一致</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">walk</span>: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sleep</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 该箭头函数中的 this 与 sleep 中的 this 一致</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 调用箭头函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 动态添加方法</span></span></span><br><span class="line"><span class="language-javascript">  user.<span class="property">sayHi</span> = sayHi</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 函数调用</span></span></span><br><span class="line"><span class="language-javascript">  user.<span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">  user.<span class="title function_">sleep</span>()</span></span><br><span class="line"><span class="language-javascript">  user.<span class="title function_">walk</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在开发中【使用箭头函数前需要考虑函数中 <code>this</code> 的值】，<strong>事件回调函数</strong>使用箭头函数时，<code>this</code> 为全局的 <code>window</code>，因此DOM事件回调函数不推荐使用箭头函数，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 箭头函数 </span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//此时 this 指向了 window</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通函数 </span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//此时 this 指向了 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">  &#125;) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样由于箭头函数 <code>this</code> 的原因，<strong>基于原型的面向对象也不推荐采用箭头函数</strong>，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 原型对像上添加了箭头函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">walk</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人都要走路...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span></span><br><span class="line"><span class="language-javascript">  p1.<span class="title function_">walk</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>函数内不存在this，沿用上一级的，过程：向外层作用域中，一层一层查找this，直到有this的定义</li><li>不适用&#x3D;&#x3D;&gt;构造函数，原型函数，字面量对象中函数，<code>dom</code>事件函数</li><li>适用&#x3D;&#x3D;&gt;需要使用上层this的地方</li></ol><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><p>以上归纳了普通函数和箭头函数中关于 <code>this</code> 默认值的情形，不仅如此 JavaScript 中还允许指定函数中 <code>this</code> 的指向，有 3 个方法可以动态指定普通函数中 <code>this</code> 的指向：</p><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><p>使用 <code>call</code> 方法调用函数，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg, arg1, arg2, ...) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//thisArg：在 fun 函数运行时指定的 this 值</span></span><br><span class="line"><span class="comment">//arg1，arg2：传递的其他参数</span></span><br><span class="line"><span class="comment">//返回值就是函数的返回值，因为它就是调用函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> student = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">16</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数并指定 this 的值</span></span></span><br><span class="line"><span class="language-javascript">  sayHi.<span class="title function_">call</span>(user); <span class="comment">// this 值为 user</span></span></span><br><span class="line"><span class="language-javascript">  sayHi.<span class="title function_">call</span>(student); <span class="comment">// this 值为 student</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 求和函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> x + y;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用 counter 函数，并传入参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> result = counter.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">5</span>, <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>call</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li><li>使用 <code>call</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>call</code> 方法的其余参数会依次自动传入函数做为函数的参数</li></ol><h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><p>使用 <code>call</code> 方法<strong>调用函数</strong>，同时指定函数中 <code>this</code> 的值</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(thisArg, [argsArray]) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//thisArg：在 fun 函数运行时指定的 this 值</span></span><br><span class="line"><span class="comment">//argsArray：传递的值，必须包含在数组里面</span></span><br><span class="line"><span class="comment">//返回值就是函数的返回值，因为它就是调用函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> student = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">16</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数并指定 this 的值</span></span></span><br><span class="line"><span class="language-javascript">  sayHi.<span class="title function_">apply</span>(user) <span class="comment">// this 值为 user</span></span></span><br><span class="line"><span class="language-javascript">  sayHi.<span class="title function_">apply</span>(student) <span class="comment">// this 值为 student</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 求和函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> x + y</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用 counter 函数，并传入参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> result = counter.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">5</span>, <span class="number">10</span>])</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//求数组最大值两个方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,arr))</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>apply</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li><li>使用 <code>apply</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>apply</code> 方法第2个参数为数组，数组的单元值依次自动传入函数做为函数的参数</li></ol><h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><p><code>bind</code> 方法并<strong>不会调用函数</strong>，而是创建一个指定了 <code>this</code> 值的新函数</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...) </span><br><span class="line">         </span><br><span class="line"><span class="comment">//thisArg：在 fun 函数运行时指定的 this 值</span></span><br><span class="line"><span class="comment">// arg1，arg2：传递的其他参数</span></span><br><span class="line"><span class="comment">//返回由指定的 this 值和初始化参数改造的 原函数拷贝 （新函数）</span></span><br><span class="line"><span class="comment">//因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind，比如改变定时器内部的this指向.</span></span><br><span class="line">         </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 需求，有一个按钮，点击里面就禁用，2秒钟之后开启</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 禁用按钮</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在这个普通函数里面，我们要this由原来的window 改为 btn</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">      &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>)   <span class="comment">// 这里的this 和 btn 一样</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用 bind 指定 this 的值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> sayHello = sayHi.<span class="title function_">bind</span>(user);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用使用 bind 创建的新函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHello</span>()   <span class="comment">//返回值是个函数，但是这个函数的this是更改过的obj</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：<code>bind</code> 方法创建新的函数，与原函数的唯一的变化是改变了 <code>this</code> 的值。</p><p>总结：</p><p>相同点：都可以改变函数内部的this指向.</p><p>区别点：</p><ol><li>call 和 apply  会调用函数, 并且改变函数内部this指向。</li><li>call 和 apply 传递的参数不一样, call 传递参数 aru1, aru2..形式  apply 必须数组形式[arg]</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ol><p>主要应用场景：</p><ol><li>call  调用函数并且可以传递参数</li><li>apply 经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</li></ol><h3 id="四、防抖节流"><a href="#四、防抖节流" class="headerlink" title="四、防抖节流"></a>四、防抖节流</h3><ol><li><p>防抖（debounce）<br>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p></li><li><p>节流（throttle）<br>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数</p></li></ol><p>Lodash 库 实现节流和防抖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">   <span class="comment">//先引入js文件</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> i = <span class="number">1</span>  <span class="comment">// 让这个变量++</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 鼠标移动函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      box.<span class="property">innerHTML</span> = ++i</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 如果里面存在大量操作 dom 的情况，可能会卡顿</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// lodash 节流写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, _.<span class="title function_">throttle</span>(mouseMove, <span class="number">500</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// lodash 防抖的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, _.<span class="title function_">debounce</span>(mouseMove, <span class="number">500</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>页面打开，可以记录上一次的视频播放位置</p><p>两个事件:<br>①：ontimeupdate   事件在视频&#x2F;音频（audio&#x2F;video）当前的播放位置发送改变时触发<br>②：onloadeddata  事件在当前帧的数据加载完成且还没有足够的数据播放视频&#x2F;音频（audio&#x2F;video）的下一帧时触发  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取元素  要对视频进行操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    video.<span class="property">ontimeupdate</span> = _.<span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(video.currentTime) 获得当前的视频时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 把当前的时间存储到本地存储</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;currentTime&#x27;</span>, video.<span class="property">currentTime</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 打开页面触发事件，就从本地存储里面取出记录的时间， 赋值给  video.currentTime</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    video.<span class="property">onloadeddata</span> = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(111)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      video.<span class="property">currentTime</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;currentTime&#x27;</span>) || <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express</title>
      <link href="/posts/852ea88.html"/>
      <url>/posts/852ea88.html</url>
      
        <content type="html"><![CDATA[<h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><p>概念：使用 express 本地软件包，快速搭建 Web 服务 （基于 HTTP 模块）</p><p>功能：</p><ol><li>提供数据接口</li><li>提供网页资源等</li></ol><p>使用：</p><ol><li><p>下载 express 软件包 <code> npm i express</code></p></li><li><p>导入 express 创建 Web 服务对象</p></li><li><p>监听请求方法 和 请求路径</p></li><li><p>对其他请求方法和请求路径，默认返回404提示</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于 express 创建 web 服务对象</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 get 请求路径为 / 时触发回调函数， 使用 send 响应内容</span></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你好，欢迎使用 Express&#x27;</span>)     <span class="comment">// 中文不需要自己设置响应头了</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听所有请求方法和任意路径， 统一返回 404 提示</span></span><br><span class="line">server.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你要访问的资源路径不存在&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口号</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;web 服务启动了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-初识express"><a href="#1-初识express" class="headerlink" title="1. 初识express"></a>1. 初识express</h3><p>概念：Express 是基于 <code>Node.js</code> 平台，快速、开放、极简的 Web 开发框架。</p><p>通俗的理解：Express 的作用和<code>Node.js</code>内置的 <code>http </code>模块类似，是<strong>专门用来创建 Web 服务器的。</strong></p><p><strong>Express 的本质</strong>：就是一个 <code>npm</code> 上的第三方<code>包</code>，提供了快速创建 Web 服务器的便捷方法。</p><p><strong>1.1 进一步理解 Express</strong></p><p><strong>不使用 Express 能否创建 Web 服务器?</strong>   </p><p> 能，使用 Node.js 提供的原生 http 模块即可。</p><p><strong>有了 http 内置模块，为什么还有用 Express？</strong> </p><p> http 内置模块用起来很复杂，开发效率低；Express 是基于内置的 http 模块进一步封装出来的，能够极大的提高开发效率。</p><p><strong>http 内置模块与 Express 是什么关系？</strong> </p><p> 后者是基于前者进一步封装出来的。</p><p><strong>1.2. Express 能做什么</strong></p><p>对于前端程序员来说，最常见的两种服务器，分别是：</p><p>⚫ Web 网站服务器：专门对外提供 Web 网页资源的服务器。</p><p>⚫ API 接口服务器：专门对外提供 API 接口的服务器。</p><p>使用 Express，我们可以方便、快速的创建 Web 网站的服务器或 API 接口的服务器。</p><h3 id="2-Express-的基本使用"><a href="#2-Express-的基本使用" class="headerlink" title="2. Express 的基本使用"></a><strong>2. Express 的基本使用</strong></h3><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.<strong>安装</strong></h5><p>在项目所处的目录中，运行如下的终端命令，即可将 express 安装到项目中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><h5 id="2-创建基本的-Web-服务器"><a href="#2-创建基本的-Web-服务器" class="headerlink" title="2.创建基本的 Web 服务器"></a>2.<strong>创建基本的 Web 服务器</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用 app.listen(端口号，启动成功后的回调函数)，启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server sunning at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-监听-GET-请求"><a href="#3-监听-GET-请求" class="headerlink" title="3. 监听 GET 请求"></a><strong>3. 监听</strong> <strong>GET 请求</strong></h5><p>通过 <code>app.get()</code> 方法，可以监听客户端的 GET 请求，具体的语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1：客户端请求的 URL 地址</span></span><br><span class="line"><span class="comment">// 参数2：请求对应的处理函数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求URL&#x27;</span>， <span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理函数</span></span><br><span class="line">    <span class="comment">// req: 请求对象（包含了与请求相关的属性与方法）</span></span><br><span class="line">    <span class="comment">// res：响应对象（包含了与响应相关的属性与方法）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-监听-POST-请求"><a href="#4-监听-POST-请求" class="headerlink" title="4. 监听 POST 请求"></a><strong>4. 监听</strong> <strong>POST 请求</strong></h5><p>通过 <code>app.post() </code>方法，可以监听客户端的 POST 请求，具体的语法格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1：客户端请求的 URL 地址</span></span><br><span class="line"><span class="comment">// 参数2：请求对应的处理函数</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求URL&#x27;</span>， <span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理函数</span></span><br><span class="line">    <span class="comment">// req: 请求对象（包含了与请求相关的属性与方法）</span></span><br><span class="line">    <span class="comment">// res：响应对象（包含了与响应相关的属性与方法）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5-把内容响应给客户端"><a href="#5-把内容响应给客户端" class="headerlink" title="5. 把内容响应给客户端"></a><strong>5. 把内容响应给客户端</strong></h5><p>通过 <code>res.send() </code>方法，可以把处理好的内容，发送给客户端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 向客户端发送 JSON 对象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> , <span class="attr">age</span>: <span class="number">20</span> , <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 向客户端发送文本内容</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="6-获取-URL-中携带的查询参数"><a href="#6-获取-URL-中携带的查询参数" class="headerlink" title="6. 获取 URL 中携带的查询参数"></a><strong>6. 获取 URL 中携带的查询参数</strong></h5><p>通过<code>req.query</code>对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.query 默认是一个空对象</span></span><br><span class="line">    <span class="comment">// 客户端使用 ?name=zs&amp;age=20 这种查询字符串形式，发送到服务器的参数</span></span><br><span class="line">    <span class="comment">// 可以通过 res.query 对象访问到,例如</span></span><br><span class="line">    <span class="comment">// req.query.name   req.query.age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-获取-URL-中的动态参数"><a href="#7-获取-URL-中的动态参数" class="headerlink" title="7. 获取 URL 中的动态参数"></a><strong>7. 获取 URL 中的动态参数</strong></h5><p>通过 <code>req.params </code>对象，可以访问到 URL 中，通过 <strong>:</strong> 匹配到的动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// URL 地址中，可以通过 ：参数名 的形式， 匹配动态参数值</span></span><br><span class="line"><span class="comment">// :id 是一个动态的参数  ：后面的id不是固定的  可以有多个动态参数！</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.params 默认是一个空对象</span></span><br><span class="line">    <span class="comment">// 里面存放着通过 ：动态匹配到的参数值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-托管静态资源"><a href="#3-托管静态资源" class="headerlink" title="3.托管静态资源"></a><strong>3.托管静态资源</strong></h3><h4 id="1-express-static"><a href="#1-express-static" class="headerlink" title="1. express.static()"></a><strong>1. <code>express.static()</code></strong></h4><p> <code>express.static()</code>，通过它，我们可以非常方便地创建一个静态资源服务器，</p><p>例如，通过如下代码就可以将 public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>Express 在指定的静态目录中查找文件，并对外提供资源的访问路径。</p><p>因此，<strong>存放静态文件的目录名(public)不会出现在 URL 中</strong>。<code> http://localhost:3000/index.js</code></p><h4 id="2-托管多个静态资源目录"><a href="#2-托管多个静态资源目录" class="headerlink" title="2. 托管多个静态资源目录"></a><strong>2. 托管多个静态资源目录</strong></h4><p>如果要托管多个静态资源目录，请多次调用 <code>express.static() </code>函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure><p>访问静态资源文件时，<code>express.static() </code>函数会<strong>根据目录的添加顺序查找所需的文件</strong>。</p><h4 id="3-挂载路径前缀"><a href="#3-挂载路径前缀" class="headerlink" title="3. 挂载路径前缀"></a><strong>3. 挂载路径前缀</strong></h4><p>如果希望在托管的<strong>静态资源访问路径之前</strong>，挂载路径前缀，则可以使用如下的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span> , express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在，你就可以通过带有 &#x2F;public 前缀地址来访问 public 目录中的文件了: <code>http://localhost:3000/clock/index.js</code></p><h3 id="4-nodemon"><a href="#4-nodemon" class="headerlink" title="4. nodemon"></a><strong>4. <code>nodemon</code></strong></h3><p><strong>1. 为什么要使用 <code>nodemon</code></strong></p><p>在编写调试 Node.js 项目的时候，如果修改了项目的代码，则需要频繁的手动 close 掉，然后再重新启动，非常繁琐。</p><p>现在，我们可以使用 nodemon（<a href="https://www.npmjs.com/package/nodemon%EF%BC%89">https://www.npmjs.com/package/nodemon）</a> 这个工具，它能<strong>够监听项目文件</strong></p><p><strong>的变动</strong>，当代码被修改后，<code>nodemon </code>会<strong>自动帮我们重启项目</strong>，极大方便了开发和调试。</p><p><strong>2. 安装 <code>nodemon</code></strong></p><p>在终端中，运行如下命令，即可将<code>nodemon</code>安装为全局可用的工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><p><strong>3. 使用 <code>nodemon</code></strong></p><p>当基于 Node.js 编写了一个网站应用的时候，传统的方式，是运行 node app.js 命令，来启动项目。这样做的坏处是：</p><p>代码被修改之后，需要手动重启项目。</p><p>现在，我们可以将 node 命令替换为 nodemon 命令，使用 nodemon app.js 来启动项目。这样做的好处是：<strong>代码</strong></p><p><strong>被修改之后，会被 <code>nodemon</code> 监听到，从而实现自动重启项目的效果。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node app.<span class="property">js</span></span><br><span class="line">#将上面的终端命令，替换为下面的终端命令，即可实现自动重启项目的效果</span><br><span class="line">nodemon app.<span class="property">js</span></span><br></pre></td></tr></table></figure><h3 id="5-Express-路由"><a href="#5-Express-路由" class="headerlink" title="5. Express 路由"></a><strong>5. Express 路由</strong></h3><h4 id="1-路由的概念"><a href="#1-路由的概念" class="headerlink" title="1. 路由的概念"></a><strong>1. 路由的概念</strong></h4><p>广义上来讲，路由就是映射关系。</p><p><strong>1.1. Express 中的路由</strong></p><p>在 Express 中，路由指的是<strong>客户端的请求</strong>与<strong>服务器处理函数</strong>之间的映射关系。</p><p>Express 中的路由分 3 部分组成，分别是请求的类型、请求的 URL 地址、处理函数，格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.METHOD(PATH,HANDLER)</span><br><span class="line">app.请求类型(url,处理函数)</span><br></pre></td></tr></table></figure><p><strong>1.2 . Express 中的路由的例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配 GET 请求，且请求 URL 为 /</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 POST 请求，且请求 URL 为 /</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) =&gt; &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a POST request&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>1.3. 路由的匹配过程</strong></p><p>每当一个请求到达服务器之后，<strong>需要先经过路由的匹配</strong>，只有匹配成功之后，才会调用对应的处理函数。</p><p>在匹配时，会按照路由的顺序进行匹配，如果<strong>请求类型</strong>和<strong>请求的 URL</strong> 同时匹配成功，则 Express 会将这次请求，转</p><p>交给对应的 function 函数进行处理。</p><p>路由匹配的注意点：</p><p>① 按照定义的先后顺序进行匹配</p><p>② <strong>请求类型</strong>和<strong>请求的URL</strong>同时匹配成功，才会调用对应的处理函数</p><h4 id="2-路由的使用"><a href="#2-路由的使用" class="headerlink" title="2. 路由的使用"></a><strong>2. 路由的使用</strong></h4><h5 id="1-最简单的用法"><a href="#1-最简单的用法" class="headerlink" title="1. 最简单的用法"></a><strong>1. 最简单的用法</strong></h5><p>(随着挂载的路由越多，不用)</p><p>在 Express 中使用路由最简单的方式，就是把路由挂载到 <code>app</code> 上，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 web 服务器， 命名为 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World&#x27;</span>) &#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Post Request&#x27;</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 web 服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server runnig at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-模块化路由"><a href="#2-模块化路由" class="headerlink" title="2. 模块化路由"></a><strong>2. 模块化路由</strong></h5><p>为了方便对路由进行模块化的管理，Express <strong>不建议</strong>将路由直接挂载到 app 上，而是推荐将路由抽离为单独的模块。</p><p>将路由抽离为单独模块的步骤如下：</p><p>① 创建路由模块对应的<code>.js</code>文件</p><p>② 调用 <strong>express.Router()</strong> 函数创建路由对象</p><p>③ 向路由对象上挂载具体的路由</p><p>④ 使用 module.exports 向外共享路由对象</p><p>⑤ 使用 <code>app.use() </code>函数注册路由模块</p><h5 id="3-创建路由模块"><a href="#3-创建路由模块" class="headerlink" title="3. 创建路由模块"></a><strong>3. 创建路由模块</strong></h5><p>创建 <code>user.js</code> 路由模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 挂载获取用户列表的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) =&gt; &#123;</span><br><span class="line">           res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list&#x27;</span>) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 挂载添加用户列表的路由</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) =&gt; &#123;</span><br><span class="line">           res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user&#x27;</span>) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><h5 id="4-注册路由模块"><a href="#4-注册路由模块" class="headerlink" title="4. 注册路由模块"></a><strong>4. 注册路由模块</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/user.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 app.use() 注册路由模块  app.use() 函数的作用，就是用来注册全局中间件!!!!</span></span><br><span class="line">app.<span class="title function_">use</span>(userRouter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的服务器已经启动localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5-为路由模块添加前缀"><a href="#5-为路由模块添加前缀" class="headerlink" title="5. 为路由模块添加前缀"></a><strong>5. 为路由模块添加前缀</strong></h5><p>类似于托管静态资源时，为静态资源统一挂载访问前缀一样，路由模块添加前缀的方式也非常简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter  = <span class="built_in">require</span>(<span class="string">&#x27;./router/user.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 app.use() 注册路由模块， 并统一添加的访问前缀 /api</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span> , userRouter)</span><br></pre></td></tr></table></figure><h3 id="6-中间件"><a href="#6-中间件" class="headerlink" title="6. 中间件"></a>6. 中间件</h3><h5 id="1-中间件的概念"><a href="#1-中间件的概念" class="headerlink" title="1.中间件的概念"></a>1.中间件的概念</h5><p><strong>1.1  什么是中间件</strong></p><p>中间件（<code>Middleware</code> ），特指业务流程的<strong>中间处理环节</strong>。</p><p><strong>1.2. Express 中间件的调用流程</strong></p><p><img src="/images%5C%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p><p><strong>1.3. Express 中间件的格式</strong></p><p><img src="/images%5C%E4%B8%AD%E9%97%B4%E4%BB%B62.png"></p><p><strong>1.4. next 函数的作用</strong></p><p><img src="/images%5C%E4%B8%AD%E9%97%B4%E4%BB%B63.png"></p><h5 id="2-Express-中间件的初体验"><a href="#2-Express-中间件的初体验" class="headerlink" title="2. Express 中间件的初体验"></a><strong>2. Express 中间件的初体验</strong></h5><h6 id="1-定义中间件函数"><a href="#1-定义中间件函数" class="headerlink" title="1. 定义中间件函数"></a><strong>1.</strong> <strong>定义中间件函数</strong></h6><p>可以通过如下的方式，定义一个最简单的中间件函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量 mw 所指向的，就是一个中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件函数&#x27;</span>)</span><br><span class="line">        <span class="comment">// 注意：</span></span><br><span class="line">        <span class="comment">// 在当前中间件的业务处理完毕后，必须调用 next() 函数</span></span><br><span class="line">        <span class="comment">// 表示把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-全局生效的中间件"><a href="#2-全局生效的中间件" class="headerlink" title="2. 全局生效的中间件"></a><strong>2.</strong> <strong>全局生效的中间件</strong></h6><p>客户端发起的<strong>任何请求</strong>，到达服务器之后，<strong>都会触发的中间件</strong>，叫做全局生效的中间件。</p><p>通过调用<code> app.use</code>(中间件函数)，即可定义一个<strong>全局生效</strong>的中间件，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量 mw 所指向的，就是一个中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件函数&#x27;</span>)</span><br><span class="line">        <span class="comment">// 注意：</span></span><br><span class="line">        <span class="comment">// 在当前中间件的业务处理完毕后，必须调用 next() 函数</span></span><br><span class="line">        <span class="comment">// 表示把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 mw 注册为全局生效的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了 / 这个路由&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hoem Page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User Page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="3-定义全局中间件的简化形式"><a href="#3-定义全局中间件的简化形式" class="headerlink" title="3. 定义全局中间件的简化形式"></a><strong>3. 定义全局中间件的简化形式</strong></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册中间件</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件和拿书&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="4-中间件的作用"><a href="#4-中间件的作用" class="headerlink" title="4. 中间件的作用"></a><strong>4. 中间件的作用</strong></h6><p><img src="/images%5C%E4%B8%AD%E9%97%B4%E4%BB%B65.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取到 请求到服务器的时间</span></span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        <span class="comment">// 为 req 对象，挂载自定义属性，从而把时间共享给后面的所有路由</span></span><br><span class="line">    req.<span class="property">startTime</span> = time</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span> + req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span> + req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="5-定义多个全局中间件"><a href="#5-定义多个全局中间件" class="headerlink" title="5. 定义多个全局中间件"></a><strong>5. 定义多个全局中间件</strong></h6><p>可以使用<code>app.use() </code><strong>连续定义多个全局中间件</strong>。客户端请求到达服务器之后，会按照中间件<strong>定义的先后顺序依次进行</strong></p><p><strong>调用</strong>，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123; <span class="comment">// 第一个全局中间件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第1个全局中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123; <span class="comment">// 第二个全局中间件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第2个全局中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">// 请求这个路由，会依次触发上述两个全局中间件</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User Page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="6-局部生效的中间件"><a href="#6-局部生效的中间件" class="headerlink" title="6. 局部生效的中间件"></a><strong>6.</strong> <strong>局部生效的中间件</strong></h6><p><strong>不使用</strong> <code>app.use() </code>定义的中间件，叫做局部生效的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数 mw1</span></span><br><span class="line"><span class="keyword">const</span> mw1 = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是中间件函数&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mw1 这个中间件只在 &#x27;当前路由中生效&#x27;，这种用法属于&quot;局部生效的中间件&quot;</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, <span class="keyword">function</span>(<span class="params">req,res</span>) =&gt; &#123;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)        </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mw1 这个中间件不会影响下面这个路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="7-定义多个局部中间件"><a href="#7-定义多个局部中间件" class="headerlink" title="7. 定义多个局部中间件"></a><strong>7. 定义多个局部中间件</strong></h6><p>可以在路由中，通过如下两种<strong>等价</strong>的方式，<strong>使用多个局部中间件</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下两种方法是&quot;完全等价&quot;的， 可个根据自己的喜好，选择任意一种方式进行使用</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , mw1,mw2, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>) &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , [mw1,mw2], <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure><h6 id="8-了解中间件的5个使用注意事项"><a href="#8-了解中间件的5个使用注意事项" class="headerlink" title="8. 了解中间件的5个使用注意事项"></a><strong>8. 了解中间件的5个使用注意事项</strong></h6><p>① 一定要在<strong>路由之前</strong>注册中间件 , 写在后面就不会调用了</p><p>② 客户端发送过来的请求，<strong>可以连续调用多个</strong>中间件进行处理</p><p>③ 执行完中间件的业务代码之后，<strong>不要忘记调用 next() 函数</strong></p><p>④ 为了<strong>防止代码逻辑混乱</strong>，调用 next() 函数后不要再写额外的代码</p><p>⑤ 连续调用多个中间件时，多个中间件之间，<strong>共享</strong> req 和 res 对象</p><h5 id="3-中间件的分类"><a href="#3-中间件的分类" class="headerlink" title="3. 中间件的分类"></a><strong>3. 中间件的分类</strong></h5><p>为了方便大家<strong>理解</strong>和<strong>记忆</strong>中间件的使用，Express 官方把<strong>常见的中间件用法</strong>，分成了 5 大类，分别是：</p><p>① <strong>应用级别</strong>的中间件</p><p>② <strong>路由级别</strong>的中间件</p><p>③ <strong>错误级别</strong>的中间件</p><p>④ <strong>Express 内置</strong>的中间件</p><p>⑤ <strong>第三方</strong>的中间件</p><h6 id="1-应用级别的中间件"><a href="#1-应用级别的中间件" class="headerlink" title="1. 应用级别的中间件"></a><strong>1. 应用级别的中间件</strong></h6><p>通过 <code>app.use() </code>或 <code>app.get() </code>或<code>app.post()</code>，绑定到 <code>app 实</code>例上的中间件，叫做应用级别的中间件，代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用级别的中间件（全局中间件）</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    next</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用级别的中间件（局部中间件）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="2-路由级别的中间件"><a href="#2-路由级别的中间件" class="headerlink" title="2. 路由级别的中间件"></a><strong>2. 路由级别的中间件</strong></h6><p>绑定到**<code> express.Router()</code>** 实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。只不</p><p>过，<strong>应用级别中间件是绑定到 <code>app</code> 实例上，路由级别中间件绑定到 router 实例上</strong>，代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级别的中间件</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time:&#x27;</span> , <span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><h6 id="3-错误级别的中间件"><a href="#3-错误级别的中间件" class="headerlink" title="3. 错误级别的中间件"></a><strong>3. 错误级别的中间件</strong></h6><p><strong>作用</strong>：专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。</p><p><strong>格式</strong>：错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是 **(err, req, res, next)**。</p><p><strong>注意：错误级别的中间件，必须注册在所有路由之后！</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) &#123;  </span><br><span class="line">    <span class="comment">// 1.1 抛出一个自定义的错误, 认为的制作错误</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;服务器内部发生了错误！&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 以下代码不能正常执行</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃（全局中间件）</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1 在服务器打印错误消息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误：&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.2 向客户端响应错误相关的内容</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Error! &#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="4-Express内置的中间件"><a href="#4-Express内置的中间件" class="headerlink" title="4.Express内置的中间件*"></a><strong>4.<code>Express</code>内置的中间件</strong>*</h6><p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p><p>①**<code> express.static</code> **快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等</p><p>②**<code> express.json</code> **解析<code> JSON</code> 格式的请求体数据</p><p>③ **<code>express.urlencoded</code> **解析 URL-encoded 格式的请求体数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置解析 application/json 格式数据的内置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析 application/x-www-form-urlencoded 格式数据的内置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure><p><code>express.json()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意： 处理错误的中间件，其他的中间件，必须在路由之前进行配置</span></span><br><span class="line"><span class="comment">// 通过 express.json() 这个中间件， 解析表单中的 JSON 格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在服务器， 可以使用 req.body 这个属性，来接收客户端发送过来的请求体数据</span></span><br><span class="line">    <span class="comment">// 默认情况下， 如果不配置解析表单数据的中间件，则 req.body 默认等于 undefined</span></span><br><span class="line">    <span class="comment">// console.log(req.body)  undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置了 express.json() 这个中间件 过后</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images%5C%E4%B8%AD%E9%97%B4%E4%BB%B66.png"></p><p><code>express.urlencoded()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意： 处理错误的中间件，其他的中间件，必须在路由之前进行配置</span></span><br><span class="line"><span class="comment">// 通过 express.urlencoded() 这个中间件， 来解析表单中的 url-encoded 格式中的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在服务器端， 可以通过 req.body 来获取 JSON 格式的表单数据 url-encoded 格式的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images%5C%E4%B8%AD%E9%97%B4%E4%BB%B68.png"></p><h6 id="5-第三方的中间件"><a href="#5-第三方的中间件" class="headerlink" title="5. 第三方的中间件"></a><strong>5. 第三方的中间件</strong></h6><p>非 Express 官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中，大家可以<strong>按需下载</strong>并<strong>配置</strong></p><p>第三方中间件，从而提高项目的开发效率。</p><p>例如：在 <a href="mailto:&#101;&#x78;&#112;&#114;&#101;&#115;&#x73;&#64;&#52;&#46;&#x31;&#54;&#x2e;&#48;">&#101;&#x78;&#112;&#114;&#101;&#115;&#x73;&#64;&#52;&#46;&#x31;&#54;&#x2e;&#48;</a> 之前的版本中，经常使用 body-parser 这个第三方中间件，来解析请求体数据。</p><p>使用步骤如下：</p><p>① 运行 <code>npm install body-parser </code>安装中间件</p><p>② 使用 require 导入中间件</p><p>③ 调用 <code>app.use() </code>注册并使用中间件</p><p><strong>注意：</strong>Express 内置的<code>express.urlencoded</code>中间件，就是基于 body-parser 这个第三方中间件进一步封装出来的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 导入解析表单数据的中间件 body-parser</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 app.use() 注册中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果没有配置任何解析表单数据的中间件，则 req.body 默认等于 undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-自定义中间件"><a href="#4-自定义中间件" class="headerlink" title="4. 自定义中间件"></a><strong>4. 自定义中间件</strong></h5><h6 id="1-需求描述与实现步骤"><a href="#1-需求描述与实现步骤" class="headerlink" title="1. 需求描述与实现步骤"></a><strong>1. 需求描述与实现步骤</strong></h6><p>自己手动模拟一个类似于 <code>express.urlencoded </code>这样的中间件，来解析 POST 提交到服务器的表单数据。</p><p>实现步骤：</p><p>① 定义中间件</p><p>② 监听 req 的 data 事件</p><p>③ 监听 req 的 end 事件</p><p>④ 使用 querystring 模块解析请求体数据</p><p>⑤ 将解析出来的数据对象挂载为 req.body</p><p>⑥ 将自定义中间件封装为模块</p><h6 id="2-定义中间件"><a href="#2-定义中间件" class="headerlink" title="2. 定义中间件"></a><strong>2. 定义中间件</strong></h6><p>使用<code>app.use()</code>来定义全局生效的中间件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 中间件的业务逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="3-监听-req-的data事件"><a href="#3-监听-req-的data事件" class="headerlink" title="3. 监听 req 的data事件"></a><strong>3. 监听 req 的data事件</strong></h6><p>在中间件中，需要监听 req 对象的 <strong>data</strong> 事件，来获取客户端发送到服务器的数据。</p><p>如果数据量比较大，无法一次性发送完毕，则客户端会<strong>把数据切割后</strong>，<strong>分批发送到服务器</strong>。所以 data 事件可能会触</p><p>发多次，每一次触发 data 事件时，<strong>获取到数据只是完整数据的一部分</strong>，需要手动对接收到的数据进行拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义变量， 用来存储客户端发送过来的请求体数据</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 监听 req 对象的 data 事件 （客户端发送过来的新的请求体数据）</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span> , <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拼接请求体数据，隐式转化为字符串</span></span><br><span class="line">    str += chunk</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="4-监听-req-的-end-事件"><a href="#4-监听-req-的-end-事件" class="headerlink" title="4. 监听 req 的 end 事件"></a><strong>4. 监听 req 的 end 事件</strong></h6><p>当请求体数据<strong>接收完毕</strong>之后，会自动触发 req 的 end 事件。</p><p>因此，我们可以在 req 的 end 事件中，<strong>拿到并处理完整的请求体数据</strong>。示例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 监听 req 对象的 end 事件 （请求体发送完毕后自动触发）</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span> , <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 打印完整的请求体数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="5-使用-querystring-模块解析请求体数据"><a href="#5-使用-querystring-模块解析请求体数据" class="headerlink" title="5. 使用 querystring 模块解析请求体数据"></a><strong>5. 使用 querystring 模块解析请求体数据</strong></h6><p>Node.js 内置了一个 <strong><code>querystring </code><strong>模块，</strong>专门用来处理查询字符串</strong>。通过这个模块提供的 <strong>parse()</strong> 函数，可以轻松把</p><p>查询字符串，解析成对象的格式。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入处理 querystring 的 Node.js 内置模块</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 qs.parse() 方法，把查询字符串解析为对象</span></span><br><span class="line"><span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br></pre></td></tr></table></figure><h6 id="6-将解析出来的数据对象挂载为req-body"><a href="#6-将解析出来的数据对象挂载为req-body" class="headerlink" title="6. 将解析出来的数据对象挂载为req.body"></a><strong>6. 将解析出来的数据对象挂载为req.body</strong></h6><p><strong>上游</strong>的中间件和<strong>下游</strong>的中间件及路由之间，<strong>共享同一份 req 和 res</strong>。因此，我们可以将解析出来的数据，挂载为 req </p><p>的自定义属性，命名为 <strong>req.body</strong>，供下游使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span> , <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)  <span class="comment">// 调用 qs.parse() 方法，把查询字符串解析为对象</span></span><br><span class="line">    req.<span class="property">body</span> = body             <span class="comment">// 将解析出来的请求体对象， 挂载为 req.body 属性</span></span><br><span class="line">    <span class="title function_">next</span>()                      <span class="comment">// 最后，一定要调用 next() 函数， 执行后续的业务逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="7-将自定义中间件封装为模块"><a href="#7-将自定义中间件封装为模块" class="headerlink" title="7. 将自定义中间件封装为模块"></a><strong>7. 将自定义中间件封装为模块</strong></h6><p>为了优化代码的结构，我们可以把自定义的中间件函数，<strong>封装为独立的模块</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// custom-body-parse.js 模块中的代码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 导入处理 querystring 的 Node.js 内置模块</span></span><br><span class="line">  <span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这是解析表单数据的中间件</span></span><br><span class="line">  <span class="keyword">const</span> bodyParser = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">      <span class="comment">// 实现中间件具体的业务逻辑</span></span><br><span class="line">      <span class="comment">// 1. 定义变量， 用来存储客户端发送过来的请求体数据</span></span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 监听 req 对象的 data 事件 （客户端发送过来的新的请求体数据）</span></span><br><span class="line">      req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 拼接请求体数据，隐式转化为字符串</span></span><br><span class="line">          str += chunk</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 监听 req 对象的 end 事件 （请求体发送完毕后自动触发）</span></span><br><span class="line">      req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 在 str 中存放的是完整的请求体数据</span></span><br><span class="line">          <span class="comment">// console.log(str)</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 调用 qs.parse() 方法，把查询字符串解析为对象</span></span><br><span class="line">          <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">              <span class="comment">//console.log(body)</span></span><br><span class="line">          req.<span class="property">body</span> = body <span class="comment">// 将解析出来的请求体对象， 挂载为 req.body 属性</span></span><br><span class="line">          <span class="title function_">next</span>() <span class="comment">// 最后，一定要调用 next() 函数， 执行后续的业务逻辑</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向外导出解析请求体数据的中间件函数</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = bodyParser</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images%5C%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p><h3 id="7-使用-Express-写接口"><a href="#7-使用-Express-写接口" class="headerlink" title="7. 使用 Express 写接口"></a><strong>7. 使用 Express 写接口</strong></h3><h5 id="1-创建基本的服务器"><a href="#1-创建基本的服务器" class="headerlink" title="1. 创建基本的服务器"></a><strong>1. 创建基本的服务器</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 express 的服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// write your code here...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-创建-API-路由模块"><a href="#2-创建-API-路由模块" class="headerlink" title="2. 创建 API 路由模块"></a><strong>2. 创建 API 路由模块</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userRouter.js 路由模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 router 的实例对象</span></span><br><span class="line"><span class="keyword">const</span> userRouter = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind your router here...</span></span><br><span class="line"><span class="comment">// 在这里挂载对应的路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = userRouter</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js  </span></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/userRouter.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把路由模块，注册到 app 上</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span> , userRouter)</span><br></pre></td></tr></table></figure><h5 id="3-编写-GET-接口"><a href="#3-编写-GET-接口" class="headerlink" title="3. 编写 GET 接口"></a><strong>3. 编写 GET 接口</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">userRouter.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取到客户端通过查询字符串，发送到服务器的数据</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 调用 res.send() 方法，把数据响应给客户端</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,        <span class="comment">// 业务状态码</span></span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;GET请求成功!&#x27;</span>,   <span class="comment">// 状态描述</span></span><br><span class="line">        <span class="attr">data</span>: query         <span class="comment">// 需要响应给客户端的具体数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-编写-POST-接口"><a href="#4-编写-POST-接口" class="headerlink" title="4. 编写 POST 接口"></a><strong>4. 编写 POST 接口</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">userRouter.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取客户端通过请求体，发送到服务器的 URL-encoded 数据</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 调用 res.send() 方法，把数据响应给客户端</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,        <span class="comment">// 业务状态码</span></span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;POST请求成功!&#x27;</span>,   <span class="comment">// 状态描述消息</span></span><br><span class="line">        <span class="attr">data</span>: body           <span class="comment">// 需要响应给客户端的具体数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：如果要获取<code>URL-encoded</code>格式的请求体数据，必须配置中间件 <strong>app.use(express.urlencoded({ extended: false }))</strong></p><p><strong>在全局导入路由模块之前配置中间件。</strong></p><h3 id="8-CORS-跨域资源共享"><a href="#8-CORS-跨域资源共享" class="headerlink" title="8. CORS 跨域资源共享"></a><strong>8. CORS 跨域资源共享</strong></h3><h5 id="1-接口的跨域问题"><a href="#1-接口的跨域问题" class="headerlink" title="1. 接口的跨域问题"></a><strong>1. 接口的跨域问题</strong></h5><p>刚才编写的 GET 和 POST接口，存在一个很严重的问题：<strong>不支持跨域请求。</strong></p><p>解决接口跨域问题的方案主要有两种：</p><p>① CORS（主流的解决方案，推荐使用）</p><p>② JSONP（有缺陷的解决方案：只支持 GET 请求）</p><h5 id="2-使用cors-中间件解决跨域问题"><a href="#2-使用cors-中间件解决跨域问题" class="headerlink" title="2. 使用cors 中间件解决跨域问题"></a><strong>2. 使用cors 中间件解决跨域问题</strong></h5><p>cors 是 Express 的一个第三方中间件。通过安装和配置 cors 中间件，可以很方便地解决跨域问题。</p><p>使用步骤分为如下 3 步：</p><p>① 运行 <strong>npm install cors</strong>   安装中间件</p><p>② 使用 <strong>const cors &#x3D; require(‘cors’)</strong>   导入中间件</p><p>③ <strong>在路由之前调用 app.use(cors())   配置中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要在路由之前， 配置 cors 中间件，从而解决接口跨域的问题</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router/user&#x27;</span>)</span><br><span class="line"><span class="comment">// 把路由模块注册到 app 上</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-什么是-CORS"><a href="#3-什么是-CORS" class="headerlink" title="3. 什么是 CORS"></a><strong>3. 什么是 CORS</strong></h5><p><img src="/images%5Ccors1.png"></p><h5 id="4-CORS-的注意事项"><a href="#4-CORS-的注意事项" class="headerlink" title="4. CORS 的注意事项"></a><strong>4. CORS 的注意事项</strong></h5><p>① CORS 主要在<strong>服务器端</strong>进行配置。客户端浏览器<strong>无须做任何额外的配置</strong>，即可请求开启了 CORS 的接口。</p><p>② CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口。</p><h5 id="5-CORS-响应头部"><a href="#5-CORS-响应头部" class="headerlink" title="**5. CORS 响应头部 **"></a>**5. CORS 响应头部 **</h5><h6 id="1-Access-Control-Allow-Origin"><a href="#1-Access-Control-Allow-Origin" class="headerlink" title="1. Access-Control-Allow-Origin"></a><strong>1. Access-Control-Allow-Origin</strong></h6><p><img src="/images%5Ccors2.png"></p><p><img src="/images%5Ccors3.png"></p><h6 id="2-Access-Control-Allow-Headers"><a href="#2-Access-Control-Allow-Headers" class="headerlink" title="2. Access-Control-Allow-Headers"></a><strong>2. Access-Control-Allow-Headers</strong></h6><p><img src="/images%5Ccors4.png"></p><h6 id="3-Access-Control-Allow-Methods"><a href="#3-Access-Control-Allow-Methods" class="headerlink" title="3. Access-Control-Allow-Methods"></a><strong>3. Access-Control-Allow-Methods</strong></h6><p><img src="/images%5Ccors5.png"></p><h5 id="6-CORS请求的分类"><a href="#6-CORS请求的分类" class="headerlink" title="6. CORS请求的分类"></a><strong>6. CORS请求的分类</strong></h5><p>客户端在请求 CORS 接口时，根据<strong>请求方式</strong>和<strong>请求头</strong>的不同，可以将 CORS 的请求分为两大类，分别是：</p><p>① 简单请求</p><p>② 预检请求</p><h6 id="1-简单请求"><a href="#1-简单请求" class="headerlink" title="1. 简单请求"></a><strong>1. 简单请求</strong></h6><p>同时满足以下两大条件的请求，就属于简单请求：</p><p>① <strong>请求方式</strong>：GET、POST、HEAD 三者之一</p><p>② <strong>HTTP 头部信息</strong>不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、</p><p>Downlink、Save-Data、Viewport-Width、Width 、<strong>Content-Type</strong>（只有三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain）</p><h6 id="2-预检请求"><a href="#2-预检请求" class="headerlink" title="2. 预检请求"></a><strong>2. 预检请求</strong></h6><p>只要符合以下任何一个条件的请求，都需要进行预检请求：</p><p>① 请求方式为 GET、POST、HEAD 之外的请求 Method 类型</p><p>② 请求头中<strong>包含自定义头部字段</strong></p><p>③ 向服务器发送了 <strong>application&#x2F;json 格式的数据</strong></p><p>在浏览器与服务器正式通信之前，浏览器会<strong>先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求</strong>，所以这一</p><p>次的 OPTION 请求称为“预检请求”。<strong>服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据。</strong></p><p><strong>区别</strong></p><p><strong>简单请求的特点</strong>：客户端与服务器之间只会发生一次请求。</p><p><strong>预检请求的特点</strong>：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求。</p><h5 id="7-JSONP接口"><a href="#7-JSONP接口" class="headerlink" title="7. JSONP接口"></a>7. JSONP接口</h5><p><strong>JSONP 的概念与特点</strong></p><p><strong>概念</strong>：浏览器端通过 <code>&lt;script&gt;</code> 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。</p><p>这种请求数据的方式叫做 JSONP。</p><p><strong>特点</strong>：</p><p>① JSONP 不属于真正的 Ajax 请求，因为它没有使用 XMLHttpRequest 这个对象。</p><p>② JSONP 仅支持 GET 请求，不支持 POST、PUT、DELETE 等请求。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/posts/882ea85.html"/>
      <url>/posts/882ea85.html</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h3 id="1-数据库的基本概念"><a href="#1-数据库的基本概念" class="headerlink" title="1. 数据库的基本概念"></a><strong>1. 数据库的基本概念</strong></h3><h4 id="1-1-什么是数据库"><a href="#1-1-什么是数据库" class="headerlink" title="1.1 什么是数据库"></a><strong>1.1 什么是数据库</strong></h4><p>数据库（database）是用来<strong>组织</strong>、<strong>存储</strong>和<strong>管理</strong>数据的仓库。</p><p>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。数据的来源有很多，比如出行记录、消费记录、</p><p>浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据。</p><p>为了方便管理互联网世界中的数据，就有了数据库管理系统的概念（简称：数据库）。用户可以对数据库中的数</p><p>据进行<strong>新增、查询、更新、删除</strong>等操作。</p><h4 id="1-2-常见的数据库及分类"><a href="#1-2-常见的数据库及分类" class="headerlink" title="1.2 常见的数据库及分类"></a><strong>1.2 常见的数据库及分类</strong></h4><p>市面上的数据库有很多种，最常见的数据库有如下几个：</p><p>⚫ MySQL 数据库（目前使用最广泛、流行度最高的开源免费数据库；Community + Enterprise）</p><p>⚫ Oracle 数据库（收费）</p><p>⚫ SQL Server 数据库（收费）</p><p>⚫ Mongodb 数据库（Community + Enterprise）</p><p>其中，MySQL、Oracle、SQL Server 属于<strong>传统型数据库</strong>（又叫做：关系型数据库 或 SQL 数据库），这三者的</p><p>设计理念相同，用法比较类似。</p><p>而 <strong>Mongodb</strong> 属于<strong>新型数据库</strong>（又叫做：非关系型数据库 或 NoSQL 数据库），它在一定程度上弥补了传统型</p><p>数据库的缺陷。</p><h4 id="1-3-传统型数据库的数据组织结构"><a href="#1-3-传统型数据库的数据组织结构" class="headerlink" title="1.3 传统型数据库的数据组织结构"></a><strong>1.3 传统型数据库的数据组织结构</strong></h4><p>数据的组织结构：指的就是数据以什么样的结构进行存储。</p><p>传统型数据库的数据组织结构，与 Excel 中数据的组织结构比较类似。</p><p>因此，我们可以对比着 Excel 来了解和学习传统型数据库的数据组织结构。</p><h6 id="1-Excel-的数据组织结构"><a href="#1-Excel-的数据组织结构" class="headerlink" title="1. Excel 的数据组织结构"></a><strong>1. Excel 的数据组织结构</strong></h6><p><img src="/images%5Cexcel1.png"></p><h6 id="2-传统型数据库的数据组织结构"><a href="#2-传统型数据库的数据组织结构" class="headerlink" title="2. 传统型数据库的数据组织结构"></a><strong>2. 传统型数据库的数据组织结构</strong></h6><p><img src="/images%5Cexcel2.png"></p><h6 id="3-实际开发中库、表、行、字段的关系"><a href="#3-实际开发中库、表、行、字段的关系" class="headerlink" title="3. 实际开发中库、表、行、字段的关系"></a><strong>3. 实际开发中库、表、行、字段的关系</strong></h6><p>① 在实际项目开发中，一般情况下，每个项目都对应独立的数据库。</p><p>② 不同的数据，要存储到数据库的不同表中，例如：用户数据存储到 users 表中，图书数据存储到 books 表中。</p><p>③ 每个表中具体存储哪些信息，由字段来决定，例如：我们可以为 users 表设计 id、username、password 这 3 个字段。</p><p>④ 表中的行，代表每一条具体的数据。</p><h6 id="4-安装并配置-MySQL"><a href="#4-安装并配置-MySQL" class="headerlink" title="4. 安装并配置 MySQL"></a><strong>4. 安装并配置 MySQL</strong></h6><p>对于开发人员来说，只需要安装 MySQL Server 和 MySQL Workbench 这两个软件，就能满足开发的需要了。</p><p>⚫ <strong>MySQL Server</strong>：专门用来提供数据存储和服务的软件。</p><p>⚫ <strong>MySQL Workbench</strong>：可视化的 MySQL 管理工具，通过它，可以方便的操作存储在 MySQL Server 中的数据。</p><h3 id="2-MySQL-的基本使用"><a href="#2-MySQL-的基本使用" class="headerlink" title="2. MySQL 的基本使用"></a><strong>2. MySQL 的基本使用</strong></h3><h4 id="2-1-使用-MySQL-Workbench-管理数据库"><a href="#2-1-使用-MySQL-Workbench-管理数据库" class="headerlink" title="2.1 使用 MySQL Workbench 管理数据库"></a><strong>2.1 使用 MySQL Workbench 管理数据库</strong></h4><h6 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1. 连接数据库"></a><strong>1.</strong> <strong>连接数据库</strong></h6><p><img src="/images%5Cmysql1.png"></p><h6 id="2-了解主界面的组成部分"><a href="#2-了解主界面的组成部分" class="headerlink" title="2. 了解主界面的组成部分"></a><strong>2. 了解主界面的组成部分</strong></h6><p><img src="/images%5Cmysql2.png"></p><h6 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3. 创建数据库"></a><strong>3. 创建数据库</strong></h6><p><img src="/images%5Cmysql3.png"></p><p><img src="/images%5Cmysql5.png"></p><h6 id="4-创建数据表"><a href="#4-创建数据表" class="headerlink" title="4. 创建数据表"></a><strong>4. 创建数据表</strong></h6><p><img src="/images%5Cmysql6.png"></p><h6 id="5-向表中写入数据"><a href="#5-向表中写入数据" class="headerlink" title="5. 向表中写入数据"></a><strong>5. 向表中写入数据</strong></h6><p><img src="/images%5Cmysql7.png"></p><h4 id="2-2-使用-SQL-管理数据库"><a href="#2-2-使用-SQL-管理数据库" class="headerlink" title="2.2 使用 SQL 管理数据库"></a><strong>2.2 使用 SQL 管理数据库</strong></h4><p><strong>1. 什么是 SQL</strong></p><p>SQL（英文全称：Structured Query Language）是结构化查询语言，专门用来访问和处理数据库的编程语言。能够让我们<strong>以编程的形式</strong>，<strong>操作数据库里面的数据</strong>。</p><p>① SQL 是一门<strong>数据库编程语言</strong></p><p>② 使用 SQL 语言编写出来的代码，叫做 <strong>SQL 语句</strong></p><p>③ SQL 语言<strong>只能在关系型数据库中使用</strong>（例如 MySQL、Oracle、SQL Server）。非关系型数据库（例如 Mongodb）不支持 SQL 语言</p><p><strong>2. SQL 能做什么</strong></p><p>① 从数据库中<strong>查询数据</strong></p><p>② 向数据库中<strong>插入新的数据</strong></p><p>③ <strong>更新</strong>数据库中的<strong>数据</strong></p><p>④ 从数据库<strong>删除数据</strong></p><p>⑤ 可以创建新数据库</p><p>⑥ 可在数据库中创建新表</p><p>⑦ 可在数据库中创建存储过程、视图</p><p>⑧ etc…</p><p><strong>3. SQL 的学习目标</strong></p><p>重点掌握如何使用 SQL 从数据表中：</p><p><strong>查询数据（select） 、插入数据（insert into） 、更新数据（update） 、删除数据（delete）</strong></p><p>额外需要掌握的 4 种 SQL 语法：</p><p><strong>where 条件、and 和 or 运算符、order by 排序、count(*) 函数</strong></p><h4 id="2-3-SELECT"><a href="#2-3-SELECT" class="headerlink" title="**2.3 SELECT **"></a>**2.3 SELECT **</h4><p><img src="/images%5Cselect1.png"></p><p><img src="/images%5Cselect2.png"></p><p><img src="/images%5Cselect3.png"></p><h4 id="2-4-INSERT-INTO"><a href="#2-4-INSERT-INTO" class="headerlink" title="2.4 INSERT INTO"></a><strong>2.4 INSERT INTO</strong></h4><p><img src="/images%5Cinsert1.png"></p><p><img src="/images%5Cinsert2.png"></p><h4 id="2-5-UPDATE"><a href="#2-5-UPDATE" class="headerlink" title="2.5 UPDATE"></a><strong>2.5 UPDATE</strong></h4><p><img src="/images%5Cupdate.png"></p><p><img src="/images%5Cupdate2.png"></p><p><img src="/images%5Cupdate3.png"></p><h4 id="2-6-DELETE"><a href="#2-6-DELETE" class="headerlink" title="2.6 DELETE"></a><strong>2.6 DELETE</strong></h4><p><img src="/images%5Cdelete.png"></p><p><img src="/images%5Cdelete1.png"></p><h4 id="2-7-WHERE"><a href="#2-7-WHERE" class="headerlink" title="2.7 WHERE"></a><strong>2.7 WHERE</strong></h4><p><img src="/images%5Cwhere1.png"></p><p><img src="/images%5Cwhere2.png"></p><p><img src="/images%5Cwhere3.png"></p><h4 id="2-8-AND-和-OR"><a href="#2-8-AND-和-OR" class="headerlink" title="2.8 AND 和 OR"></a><strong>2.8 AND</strong> <strong>和</strong> <strong>OR</strong></h4><p><img src="/images%5Cand1.png"></p><p><img src="/images%5Cand2.png"></p><p><img src="/images%5Cand3.png"></p><h4 id="2-9-ORDER-BY"><a href="#2-9-ORDER-BY" class="headerlink" title="2.9 ORDER BY"></a><strong>2.9 ORDER BY</strong></h4><p><img src="/images%5Corder1.png"></p><p><img src="/images%5Corder2.png"></p><p><img src="/images%5Corder3.png"></p><p><img src="/images%5Corder4.png"></p><h4 id="2-10-COUNT"><a href="#2-10-COUNT" class="headerlink" title="2.10 COUNT(*)"></a><strong>2.10 COUNT(*)</strong></h4><p><img src="/images%5Ccount1.png"></p><p><img src="/images%5Ccount2.png"></p><p><img src="/images%5Ccount3.png"></p><h3 id="3-在项目中操作-MySQL"><a href="#3-在项目中操作-MySQL" class="headerlink" title="3. 在项目中操作 MySQL"></a><strong>3. 在项目中操作 MySQL</strong></h3><h4 id="3-1-在项目中操作数据库的步骤"><a href="#3-1-在项目中操作数据库的步骤" class="headerlink" title="3.1 在项目中操作数据库的步骤"></a><strong>3.1 在项目中操作数据库的步骤</strong></h4><p>① 安装操作 MySQL 数据库的第三方模块（<strong>mysql</strong>）</p><p>② 通过 mysql 模块<strong>连接到 MySQL 数据库</strong></p><p>③ 通过 mysql 模块<strong>执行 SQL 语句</strong></p><p><img src="/images%5Clian1.png"></p><h4 id="3-2-安装与配置-mysql-模块"><a href="#3-2-安装与配置-mysql-模块" class="headerlink" title="3.2 安装与配置 mysql 模块"></a><strong>3.2 安装与配置 mysql 模块</strong></h4><h6 id="1-安装-mysql-模块"><a href="#1-安装-mysql-模块" class="headerlink" title="1. 安装 mysql 模块"></a><strong>1.</strong> <strong>安装</strong> <strong>mysql 模块</strong></h6><p><strong>mysql</strong> 模块是托管于 npm 上的<strong>第三方模块</strong>。它提供了在 Node.js 项目中<strong>连接</strong>和<strong>操作</strong> <strong>MySQL</strong> 数据库的能力。</p><p>想要在项目中使用它，需要先运行如下命令，将 mysql 安装为项目的依赖包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h6 id="2-配置-mysql-模块"><a href="#2-配置-mysql-模块" class="headerlink" title="2. 配置 mysql 模块"></a><strong>2.</strong> <strong>配置</strong> <strong>mysql 模块</strong></h6><p>在使用 mysql 模块操作 MySQL 数据库之前，<strong>必须先对 mysql 模块进行必要的配置</strong>，主要的配置步骤如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 mysql 模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 建立与 mysql 数据的链接</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,      <span class="comment">// 数据库的 IP 地址</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,           <span class="comment">// 登录数据库的账号</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;admin123&#x27;</span>,   <span class="comment">// 登录数据库的密码</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;my_db_01&#x27;</span>    <span class="comment">// 指定要操作那个数据库</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="3-测试-mysql-模块能否正常工作"><a href="#3-测试-mysql-模块能否正常工作" class="headerlink" title="3. 测试 mysql 模块能否正常工作"></a><strong>3. 测试 mysql 模块能否正常工作</strong></h6><p>调用 <strong>db.query()</strong> 函数，指定要执行的 SQL 语句，通过回调函数拿到执行的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测 mysql 模块能否正常工作</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select 1&#x27;</span> , <span class="function">(<span class="params">err , results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只要能打印出 [ RowDataPacket &#123; &#x27;1&#x27; : 1 &#125; ] 的结果，就证明数据库连接正常</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-3-使用-mysql-模块操作-MySQL-数据库"><a href="#3-3-使用-mysql-模块操作-MySQL-数据库" class="headerlink" title="3.3 使用 mysql 模块操作 MySQL 数据库"></a><strong>3.3 使用 mysql 模块操作 MySQL 数据库</strong></h4><h6 id="1-查询数据"><a href="#1-查询数据" class="headerlink" title="1. 查询数据"></a><strong>1. 查询数据</strong></h6><p>查询 users 表中所有的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 users 表中的所有的用户数据</span></span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select * from users&#x27;</span> , <span class="function">(<span class="params">err , results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 查询失败</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="comment">// 查询成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：如果执行的是 select 查询语句，则执行的结果是数组！</strong></p><h6 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a><strong>2. 插入数据</strong></h6><p>向 users 表中新增数据， 其中 <strong>username</strong> 为 Spider-Man，<strong>password</strong> 为 pcc321。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 要插入到 users 表中的数据对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">username</span>: <span class="string">&#x27;Spider-Man&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;pcc321&#x27;</span>, <span class="attr">status</span>: <span class="number">105</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 待执行的 sql 语句， 其中英文的 ? 代表占位符</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users (username , password, status) values (?,?,?)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用数组的形式， 依次为 ? 占位符指定具体的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">status</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>) <span class="comment">// 失败</span></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：如果执行的是 insert into 插入语句，则 results 是一个对象</strong></p><p><strong>可以通过 results.affectedRows 属性，来判断是否插入数据成功</strong></p><h6 id="3-插入数据的便捷方式"><a href="#3-插入数据的便捷方式" class="headerlink" title="3. 插入数据的便捷方式"></a><strong>3. 插入数据的便捷方式</strong></h6><p>向表中新增数据时，如果<strong>数据对象的每个属性</strong>和<strong>数据表的字段****一一对应</strong>，则可以通过如下方式快速插入数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 要插入到 users 表中的数据对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">username</span>: <span class="string">&#x27;dapeng&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;aao321&#x27;</span>, <span class="attr">status</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 待执行的 sql 语句， 其中英文的 ? 代表占位符</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27; insert into users set ? &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 直接将数据对象当作占位符的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>) <span class="comment">// 失败</span></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4. 更新数据"></a><strong>4. 更新数据</strong></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 要更新的数据对象 (更新 id 为 105的数据)</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">105</span>, <span class="attr">username</span>: <span class="string">&#x27;xiaohei&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123abc&#x27;</span>, <span class="attr">status</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 要执行的 sql 语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set username = ? , password = ? , status = ? where id = ?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 调用 db.query() 执行 sql 语句的同时，使用数组依次为占位符指定具体的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">status</span>, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>) <span class="comment">// 失败</span></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意： 执行了 update 语句之后，执行的结果，也是一个对象，可以通过 affectedRows 判断是否更新成功！</strong></p><h6 id="5-更新数据的便捷方式"><a href="#5-更新数据的便捷方式" class="headerlink" title="5. 更新数据的便捷方式"></a><strong>5. 更新数据的便捷方式</strong></h6><p>更新表数据时，如果<strong>数据对象的每个属性</strong>和<strong>数据表的字段</strong>一一对应，则可以通过如下方式快速更新表数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 要更新的数据对象 </span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">105</span>, <span class="attr">username</span>: <span class="string">&#x27;xiaobai&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="attr">status</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 要执行的 sql 语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set ? where id = ?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 调用 db.query() 执行 sql 语句的同时，使用数组依次为占位符指定具体的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>) <span class="comment">// 失败</span></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6. 删除数据"></a><strong>6. 删除数据</strong></h6><p>在删除数据时，推荐根据 id 这样的<strong>唯一标识</strong>，来删除对应的数据。示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 要执行的 sql 语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from users where id = ?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用 db.query() 执行 sql 语句的同时，为占位符指定具体的值</span></span><br><span class="line"><span class="comment">// 注意： 如果 sql 语句中有多个占位符，则必须使用数组为，为每个占位符指定具体的值</span></span><br><span class="line"><span class="comment">//       如果 sql 语句中只有一个占位符，则可以省略数组</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="number">106</span> , <span class="function">(<span class="params">err , results</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>) <span class="comment">// 失败</span></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除数据成功!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="7-标记删除"><a href="#7-标记删除" class="headerlink" title="7. 标记删除"></a><strong>7.</strong> <strong>标记删除</strong></h6><p>使用 DELETE 语句，会把真正的把数据从表中删除掉。为了保险起见，<strong>推荐使用</strong>标记删除的形式，来<strong>模拟删除的动作</strong>。</p><p>所谓的标记删除，就是在表中设置类似于 <strong>status</strong> 这样的<strong>状态字段</strong>，来<strong>标记</strong>当前这条数据是否被删除。</p><p>当用户执行了删除的动作时，我们并没有执行 DELETE 语句把数据删除掉，而是执行了 UPDATE 语句，将这条数据对应</p><p>的 status 字段标记为删除即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标记删除</span></span><br><span class="line"><span class="comment">// 使用 update 语句替代 delete 语句 ， 只更新数据的状态，并没有真正的删除</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;update users set status =? where id = ?&#x27;</span> , [<span class="number">1</span> , <span class="number">101</span>] , <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>) <span class="comment">// 失败</span></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标记删除数据成功!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-前后端的身份认证"><a href="#4-前后端的身份认证" class="headerlink" title="4. 前后端的身份认证"></a><strong>4. 前后端的身份认证</strong></h3><h5 id="1-Web-开发模式"><a href="#1-Web-开发模式" class="headerlink" title="1. Web 开发模式"></a><strong>1. Web 开发模式</strong></h5><p>目前主流的 Web 开发模式有两种，分别是：</p><p>① 基于<strong>服务端渲染</strong>的传统 Web 开发模式</p><p>② 基于<strong>前后端分离</strong>的新型 Web 开发模式</p><p>前后端分离的概念：前后端分离的开发模式，<strong>依赖于 Ajax 技术的广泛应用</strong>。简而言之，前后端分离的 Web 开发模式，</p><p>就是<strong>后端只负责提供 API 接口，前端使用 Ajax 调用接口</strong>的开发模式。</p><p>优点：</p><p>① <strong>开发体验好。</strong>前端专注于 UI 页面的开发，后端专注于api 的开发，且前端有更多的选择性。</p><p>② <strong>用户体验好。</strong>Ajax 技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。</p><p>③ <strong>减轻了服务器端的渲染压力。</strong>因为页面最终是在每个用户的浏览器中生成的。</p><p>缺点：</p><p>① <strong>不利于 SEO。</strong>因为完整的 HTML 页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。（解决方</p><p>案：利用 Vue、React 等前端框架的 <strong>SSR</strong> （server side render）技术能够很好的解决 SEO 问题！）</p><h5 id="2-身份认证"><a href="#2-身份认证" class="headerlink" title="2. 身份认证"></a><strong>2. 身份认证</strong></h5><p><strong>1. 什么是身份认证</strong></p><p><strong>身份认证</strong>（Authentication）又称“<strong>身份验证</strong>”、“<strong>鉴权</strong>”，是指<strong>通过一定的手段，完成对用户身份的确认</strong>。</p><p>⚫ 日常生活中的身份认证随处可见，例如：高铁的验票乘车，手机的密码或指纹解锁，支付宝或微信的支付密码等。</p><p>⚫ 在 Web 开发中，也涉及到用户身份的认证，例如：各大网站的<strong>手机验证码登录</strong>、<strong>邮箱密码登录</strong>、<strong>二维码登录</strong>等。</p><p><strong>2. 为什么需要身份认证</strong></p><p>身份认证的目的，是为了<strong>确认当前所声称为某种身份的用户，确实是所声称的用户</strong>。</p><p>在互联网项目开发中，如何对用户的身份进行认证，是一个值得深入探讨的问题。</p><p><strong>3. 不同开发模式下的身份认证</strong></p><p>对于服务端渲染和前后端分离这两种开发模式来说，分别有着不同的身份认证方案：</p><p>① 服务端渲染推荐使用 <strong>Session 认证机制</strong></p><p>② 前后端分离推荐使用 <strong>JWT 认证机制</strong></p><h5 id="3-Session-认证机制"><a href="#3-Session-认证机制" class="headerlink" title="3. Session 认证机制"></a><strong>3. Session 认证机制</strong></h5><h6 id="1-HTTP-协议的无状态性"><a href="#1-HTTP-协议的无状态性" class="headerlink" title="1. HTTP 协议的无状态性"></a><strong>1. HTTP 协议的无状态性</strong></h6><p>HTTP 协议的无状态性，指的是客户端<strong>的每次 HTTP 请求都是独立的</strong>，连续多个请求之间没有直接的关系，<strong>服务器不会</strong></p><p><strong>主动保留每次 HTTP 请求的状态</strong>。</p><h6 id="2-如何突破-HTTP-无状态的限制"><a href="#2-如何突破-HTTP-无状态的限制" class="headerlink" title="2. 如何突破 HTTP 无状态的限制"></a><strong>2.</strong> <strong>如何突破 HTTP 无状态的限制</strong></h6><p><img src="/images%5Csession1.png"></p><h6 id="3-什么是-Cookie"><a href="#3-什么是-Cookie" class="headerlink" title="3. 什么是 Cookie"></a><strong>3. 什么是 Cookie</strong></h6><p>Cookie 是<strong>存储在用户浏览器中的一段不超过 4 KB 的字符串</strong>。它由一个名称（Name）、一个值（Value）和其它几个用</p><p>于控制 Cookie 有效期、安全性、使用范围的可选属性组成。</p><p>不同域名下的 Cookie 各自独立，每当客户端发起请求时，会<strong>自动</strong>把<strong>当前域名下</strong>所有<strong>未过期的 Cookie</strong> 一同发送到服务器。</p><p><strong>Cookie的几大特性：</strong></p><p>① 自动发送</p><p>② 域名独立</p><p>③ 过期时限</p><p>④ 4KB 限制</p><h6 id="4-Cookie-在身份认证中的作用"><a href="#4-Cookie-在身份认证中的作用" class="headerlink" title="4. Cookie 在身份认证中的作用"></a><strong>4. Cookie 在身份认证中的作用</strong></h6><p><img src="/images%5Ccookies.png"></p><h6 id="5-Cookie不具有安全性"><a href="#5-Cookie不具有安全性" class="headerlink" title="5. Cookie不具有安全性"></a><strong>5. Cookie不具有安全性</strong></h6><p><img src="/images%5Ccookie2.png"></p><h6 id="6-提高身份认证的安全性"><a href="#6-提高身份认证的安全性" class="headerlink" title="6. 提高身份认证的安全性"></a><strong>6.</strong> <strong>提高身份认证的安全性</strong></h6><p><img src="/images%5Ccookie3.png"></p><h6 id="7-Session的工作原理"><a href="#7-Session的工作原理" class="headerlink" title="7. Session的工作原理"></a><strong>7.</strong> <strong>Session的工作原理</strong></h6><p><img src="/images%5Csession.png"></p><h3 id="5-在-Express-中使用-Session-认证"><a href="#5-在-Express-中使用-Session-认证" class="headerlink" title="5. 在 Express 中使用 Session 认证"></a><strong>5. 在 Express 中使用 Session 认证</strong></h3><h5 id="1-安装-express-session-中间件"><a href="#1-安装-express-session-中间件" class="headerlink" title="1. 安装 express-session 中间件"></a><strong>1.</strong> <strong>安装</strong> <strong>express-session 中间件</strong></h5><p>在 Express 项目中，只需要安装 <strong>express-session</strong> 中间件，即可在项目中使用 Session 认证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><h5 id="2-配置-express-session-中间件"><a href="#2-配置-express-session-中间件" class="headerlink" title="2. 配置 express-session 中间件"></a><strong>2.</strong> <strong>配置</strong> <strong>express-session 中间件</strong></h5><p>express-session 中间件安装成功后，需要通过 <strong>app.use()</strong> 来注册 <strong>session 中间件</strong>，示例代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 session 中间件</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 配置 session 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,  <span class="comment">// secret 属性的值可以为任意字符串</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,           <span class="comment">// 固定写法</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>  <span class="comment">// 固定写法</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h5 id="3-向-session-中存数据"><a href="#3-向-session-中存数据" class="headerlink" title="3. 向 session 中存数据"></a><strong>3. 向 session 中存数据</strong></h5><p>当 <strong>express-session</strong> 中间件配置成功后，即可通过 <strong>req.session</strong> 来访问和使用 session 对象，从而存储用户的关键信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;.api/login&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断用户提交的登录信息是否正确</span></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> !== <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span> , <span class="attr">msg</span>:<span class="string">&#x27;登陆失败&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span>  <span class="comment">// 将用户的信息，存储到 session 中</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">islogin</span> = <span class="literal">true</span>   <span class="comment">// 将用户的登录状态， 存储到 session 中</span></span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span> , <span class="attr">msg</span>:<span class="string">&#x27;登录成功</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="4-从-session-中取数据"><a href="#4-从-session-中取数据" class="headerlink" title="4. 从 session 中取数据"></a><strong>4. 从 session 中取数据</strong></h5><p>可以直接从 <strong>req.session</strong> 对象上获取之前存储的数据，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户姓名的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断用户是否登录</span></span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">islogin</span>) <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span> , <span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">send</span>( &#123; <span class="attr">status</span>: <span class="number">0</span> , <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span> , <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span> &#125; )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5-清空-session"><a href="#5-清空-session" class="headerlink" title="5. 清空 session"></a><strong>5. 清空 session</strong></h5><p>调用 <strong>req.session.destroy()</strong> 函数，即可清空服务器保存的 session 信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 清空当前客户端对应的 session 信息</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="6-了解-Session-认证的局限性"><a href="#6-了解-Session-认证的局限性" class="headerlink" title="6. 了解 Session 认证的局限性"></a><strong>6. 了解 Session 认证的局限性</strong></h5><p>Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接</p><p>口的时候，<strong>需要做很多额外的配置</strong>，才能实现跨域 Session 认证。</p><p>注意：</p><p>⚫ 当前端请求后端接口<strong>不存在跨域问题</strong>的时候，<strong>推荐使用 Session</strong> 身份认证机制。</p><p>⚫ 当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制。</p><h3 id="6-JWT-认证机制"><a href="#6-JWT-认证机制" class="headerlink" title="6. JWT 认证机制"></a><strong>6. JWT 认证机制</strong></h3><p>JWT（英文全称：JSON Web Token）是目前<strong>最流行</strong>的<strong>跨域认证解决方案</strong></p><h5 id="1-JWT-的工作原理"><a href="#1-JWT-的工作原理" class="headerlink" title="1. JWT 的工作原理"></a><strong>1. JWT 的工作原理</strong></h5><p><img src="/images%5Cjwt.png"></p><h5 id="2-JWT-的组成部分"><a href="#2-JWT-的组成部分" class="headerlink" title="2. JWT 的组成部分"></a><strong>2. JWT 的组成部分</strong></h5><p><img src="/images%5Cjwt1.png"></p><h5 id="3-JWT-的三个部分各自代表的含义"><a href="#3-JWT-的三个部分各自代表的含义" class="headerlink" title="3. JWT 的三个部分各自代表的含义"></a><strong>3. JWT 的三个部分各自代表的含义</strong></h5><p><img src="/images%5Cjwt2.png"></p><h5 id="4-JWT-的使用方式"><a href="#4-JWT-的使用方式" class="headerlink" title="4. JWT 的使用方式"></a><strong>4. JWT 的使用方式</strong></h5><p><img src="/images%5Cjwt3.png"></p><h3 id="7-在-Express-中使用-JWT"><a href="#7-在-Express-中使用-JWT" class="headerlink" title="7. 在 Express 中使用 JWT"></a><strong>7. 在 Express 中使用 JWT</strong></h3><h5 id="1-安装-JWT-相关的包"><a href="#1-安装-JWT-相关的包" class="headerlink" title="1. 安装 JWT 相关的包"></a><strong>1.</strong> <strong>安装</strong> <strong>JWT 相关的包</strong></h5><p>运行如下命令，安装如下两个 JWT 相关的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p>其中：</p><p>⚫ <strong>jsonwebtoken</strong> 用于<strong>生成 JWT 字符串</strong></p><p>⚫ <strong>express-jwt</strong> 用于<strong>将 JWT 字符串解析还原成 JSON 对象</strong></p><h5 id="2-导入-JWT-相关的包"><a href="#2-导入-JWT-相关的包" class="headerlink" title="2. 导入 JWT 相关的包"></a><strong>2.</strong> <strong>导入</strong> <strong>JWT 相关的包</strong></h5><p>使用 <strong>require()</strong> 函数，分别导入 JWT 相关的两个包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入用于生成 jwt 字符串的包</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 导入用于将客户端发送过来的 jwt 字符串，解析还原成 json 对象的包</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-定义-secret-密钥"><a href="#3-定义-secret-密钥" class="headerlink" title="3. 定义 secret 密钥"></a><strong>3. 定义 secret 密钥</strong></h5><p>为了<strong>保证 JWT 字符串的安全性</strong>，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于<strong>加密</strong>和<strong>解密</strong></p><p>的 secret 密钥：</p><p>① 当生成 JWT 字符串的时候，需要使用 <strong>secret 密钥</strong>对用户的信息进行<strong>加密</strong>，最终得到加密好的 JWT 字符串</p><p>② 当把 JWT 字符串解析还原成 JSON 对象的时候，需要使用 secret 密钥<strong>进行解密</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// secret 密钥的本质： 就是一个字符串</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;xiaoheizi No1 ++_++&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="4-在登录成功后生成-JWT-字符串"><a href="#4-在登录成功后生成-JWT-字符串" class="headerlink" title="4. 在登录成功后生成 JWT 字符串"></a><strong>4. 在登录成功后生成 JWT 字符串</strong></h5><p>调用 <strong>jsonwebtoken</strong> 包提供的 <strong>sign()</strong> 方法，<strong>将用户的信息加密成 JWT 字符串</strong>，<strong>响应给客户端：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) =&gt; &#123;</span><br><span class="line">         <span class="comment">// ...省略登录失败情况下的代码</span></span><br><span class="line">         <span class="comment">// 用户登录成功后， 生成 JWT 字符串， 通过 token 属性响应给客户端</span></span><br><span class="line">         </span><br><span class="line">         res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;登录成功!&#x27;</span>,</span><br><span class="line">            <span class="comment">// 调用 jwt.sign() 生成 JWT 字符串， 三个参数分别是：用户信息对象、加密密钥、配置对象</span></span><br><span class="line">            <span class="attr">token</span>: jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125; , secretKey , &#123; expiresIn : <span class="string">&#x27;30s&#x27;</span>&#125;)</span><br><span class="line">         &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="5-将-JWT-字符串还原为JSON-对象"><a href="#5-将-JWT-字符串还原为JSON-对象" class="headerlink" title="5. 将 JWT 字符串还原为JSON 对象"></a><strong>5. 将</strong> <strong>JWT 字符串还原为JSON 对象</strong></h5><p>客户端每次在访问那些有权限接口的时候，都需要主动通过<strong>请求头中的 Authorization 字段</strong>，将 Token 字符串发</p><p>送到服务器进行身份认证。</p><p>此时，服务器可以通过 <strong>express-jwt</strong> 这个中间件，自动将客户端发送过来的 Token 解析还原成 JSON 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 app.use() 来注册中间件</span></span><br><span class="line"><span class="comment">// expressJWT(&#123; secret: secretKey &#125;)  就是用来解析 Token 的中间件</span></span><br><span class="line"><span class="comment">// .unless(&#123; path: [/^\/api\//] &#125;)  用来指定哪些接口不需要访问权限  /api开头的接口不需要访问权限</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br></pre></td></tr></table></figure><h5 id="6-使用-req-user-获取用户信息"><a href="#6-使用-req-user-获取用户信息" class="headerlink" title="6. 使用 req.user 获取用户信息"></a><strong>6. 使用 req.user 获取用户信息</strong></h5><p>当 express-jwt 这个中间件配置成功之后，即可在那些有权限的接口中，使用 <strong>req.user</strong> 对象，来访问从 JWT 字符串</p><p>中解析出来的用户信息了，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个有权限的 api 接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;admin/getinfo&#x27;</span> , <span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: req.<span class="property">user</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-捕获解析-JWT-失败后产生的错误"><a href="#7-捕获解析-JWT-失败后产生的错误" class="headerlink" title="7. 捕获解析 JWT 失败后产生的错误"></a><strong>7. 捕获解析 JWT 失败后产生的错误</strong></h5><p>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串<strong>过期</strong>或<strong>不合法</strong>，会产生一个<strong>解析失败</strong></p><p>的错误，影响项目的正常运行。我们可以通过 <strong>Express 的错误中间件</strong>，捕获这个错误并进行相关的处理，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// token 解析失败导致的错误</span></span><br><span class="line">    <span class="keyword">if</span>(err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span> , <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他原因导致的错误</span></span><br><span class="line">    re.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;未知错误&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 express 的服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域资源共享</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 post 表单数据的中间件</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;xiaoheizi No1 ++_++&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span></span><br><span class="line"><span class="comment">// 注意： 只要这个express-jwt中间件配置成功之后，就可以把解析出来的用户信息，挂载到 req.user 属性上!!!!</span></span><br><span class="line"><span class="comment">// .unless(&#123; path: [/^\/api\//] &#125;)  用来指定哪些接口不需要访问权限  /api开头的接口不需要访问权限</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span></span><br><span class="line">    <span class="keyword">const</span> userinfo = req.<span class="property">body</span></span><br><span class="line">        <span class="comment">// 登录失败</span></span><br><span class="line">    <span class="keyword">if</span> (userinfo.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span> || userinfo.<span class="property">password</span> !== <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">400</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;登录失败！&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 登录成功</span></span><br><span class="line">    <span class="comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span><br><span class="line">    <span class="comment">// 注意： 千万不要把密码加密到 token 字符串中</span></span><br><span class="line">    <span class="comment">// 调用 jwt.sign() 生成 JWT 字符串， 三个参数分别是：用户信息对象、加密密钥、配置对象,可以配置 token 有效期(30s后作废)</span></span><br><span class="line">    <span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;300s&#x27;</span> &#125;)</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">        <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">        <span class="attr">token</span>: tokenStr</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个有权限的 API 接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功！&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: req.<span class="property">user</span> <span class="comment">// 要发送给客户端的用户信息</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目最后注册错误的中间件</span></span><br><span class="line"><span class="comment">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// token 解析失败导致的错误</span></span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他原因导致的错误</span></span><br><span class="line">    re.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;未知错误&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:8888&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images%5Ctoken1.png"></p><p><img src="/images%5Ctoken2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化&amp;webpack</title>
      <link href="/posts/882ea81.html"/>
      <url>/posts/882ea81.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-ES6-模块化"><a href="#1-ES6-模块化" class="headerlink" title="1. ES6 模块化"></a>1. ES6 模块化</h1><h2 id="1-1-回顾：node-js-模块化"><a href="#1-1-回顾：node-js-模块化" class="headerlink" title="1.1 回顾：node.js 模块化"></a>1.1 回顾：node.js 模块化</h2><p>node.js 遵循了 CommonJS 的模块化规范。其中：</p><ul><li>导入其它模块使用 <strong>require()</strong> 方法</li><li>模块对外共享成员使用 <strong>module.exports</strong>  对象</li></ul><p><strong>模块化的好处：</strong></p><p>大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p><h2 id="1-2-前端模块化的分类-了解"><a href="#1-2-前端模块化的分类-了解" class="headerlink" title="1.2 前端模块化的分类 (了解)"></a>1.2 前端模块化的分类 (了解)</h2><p>在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 <strong>AMD (国外 requirejs)、CMD (国内 seajs 淘宝)、CommonJS (nodejs)</strong> 等模块化规范</p><p>但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块化标准</p><p>例如:</p><ul><li>AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li><li>CommonJS 适用于服务器端的 Javascript 模块化</li></ul><p>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的  <strong>ES6 模块化</strong>  规范诞生了！</p><h2 id="1-3-什么是-ES6-模块化规范-统一"><a href="#1-3-什么是-ES6-模块化规范-统一" class="headerlink" title="1.3 什么是 ES6 模块化规范 (统一)"></a>1.3 什么是 ES6 模块化规范 (统一)</h2><p>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。</p><p>它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范</p><p>ES6 模块化规范中定义：</p><ul><li>每个 js 文件都是一个独立的模块</li><li>导入其它模块成员使用 <strong><code>import</code></strong>  关键字</li><li>向外共享模块成员使用 <strong><code>export</code></strong> 关键字</li></ul><h2 id="1-4-在-node-js-中体验-ES6-模块化"><a href="#1-4-在-node-js-中体验-ES6-模块化" class="headerlink" title="1.4 在 node.js 中体验 ES6 模块化"></a>1.4 在 node.js 中体验 ES6 模块化</h2><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，</p><p>可以按照如下两个步骤进行配置：</p><ol><li>确保安装了 v14.15.1 或更高版本的 node.js</li><li><strong>在 package.json 的根节点中添加 “type”: “module” 节点</strong></li></ol><p><img src="/images/image-20201211122954570.png" alt="image-20201211122954570"></p><h2 id="1-5-模块化的基本语法"><a href="#1-5-模块化的基本语法" class="headerlink" title="1.5 模块化的基本语法"></a>1.5 模块化的基本语法</h2><p>ES6 的模块化主要包含如下 3 种用法：</p><ul><li>默认导出 和 默认导入</li><li>按需导出 和 按需导入</li><li>直接导入 并 执行模块中的代码</li></ul><h3 id="1-5-1-默认导出-和-默认导入"><a href="#1-5-1-默认导出-和-默认导入" class="headerlink" title="1.5.1 默认导出 和 默认导入"></a>1.5.1 默认导出 和 默认导入</h3><p>默认导出的语法： <code>export default  值</code>   （只能导出一个）</p><p>默认导入的语法： <code>import 接收名称 from &#39;模块标识符&#39;</code></p><p>默认导出</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span>  = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="comment">// export default a  // 导出一个值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  a,</span><br><span class="line">  b,</span><br><span class="line">  fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不允许 不允许一个一个的导出</span></span><br><span class="line"><span class="comment">//export default a</span></span><br><span class="line"><span class="comment">//export default b</span></span><br></pre></td></tr></table></figure><p>默认导入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> result <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">//console.log(result.a)</span></span><br><span class="line"><span class="comment">//console.log(result.b)</span></span><br><span class="line"></span><br><span class="line">前提： 要在node 环境下使用<span class="title class_">ES6</span>语法，必须在 package.<span class="property">json</span>文件中配置：<span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意点:</strong> </p><ul><li><strong>每个模块中，只允许使用唯一的一次 export default !</strong></li><li>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可</li></ul><h3 id="1-5-2-按需导入与按需导出"><a href="#1-5-2-按需导入与按需导出" class="headerlink" title="1.5.2 按需导入与按需导出"></a>1.5.2 按需导入与按需导出</h3><p>按需导出的语法： <code>export const a = 10</code></p><p>按需导入的语法： <code>import &#123; a &#125; from &#39;模块标识符&#39;</code></p><p>按需导出</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export 修饰定义语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">20</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按需导入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#123;同名变量&#125; from &#x27;模块名或路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; a, b <span class="keyword">as</span> c, fn &#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"><span class="comment">// as 重命名</span></span><br></pre></td></tr></table></figure><p><strong>注意点:</strong></p><ul><li><strong>每个模块中可以使用多次按需导出</strong></li><li><strong>按需导入的成员名称必须和按需导出的名称保持一致</strong></li><li><strong>按需导入时，可以使用as 关键字进行重命名</strong></li><li>按需导入可以和默认导入一起使用</li></ul><p><img src="/images%5Cimage-20230201132840242.png" alt="image-20230201132840242"></p><h3 id="1-5-3-直接导入执行模块代码"><a href="#1-5-3-直接导入执行模块代码" class="headerlink" title="1.5.3 直接导入执行模块代码"></a>1.5.3 直接导入执行模块代码</h3><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。</p><p>此时，可以直接导入并执行模块代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/images%5Cimage-20230201133945160.png" alt="image-20230201133945160"></p><h1 id="2-前置-yarn-包管理器"><a href="#2-前置-yarn-包管理器" class="headerlink" title="2. 前置 - yarn 包管理器"></a>2. 前置 - yarn 包管理器</h1><p>快速、可靠、安全的依赖管理工具。和 npm 类似, 都是包管理工具, 可以用于下载包 </p><p>比 npm 下载包， 更 稳定、快速</p><p>下载地址: <a href="https://yarn.bootcss.com/docs/install/#windows-stable">https://yarn.bootcss.com/docs/install/#windows-stable</a> </p><p>windows本  <strong>推荐通过软件包</strong>  安装 (教学资料中)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i yarn -g</span><br></pre></td></tr></table></figure><p>mac本通过命令全局安装</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i yarn -g</span><br></pre></td></tr></table></figure><p>基本命令:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 初始化</span><br><span class="line">yarn init  /  yarn init -y          </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 添加依赖</span><br><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 移除包</span><br><span class="line">yarn remove [package]</span><br><span class="line">             </span><br><span class="line"><span class="number">4.</span> 安装项目全部依赖            </span><br><span class="line">yarn 或者 yarn install</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 全局</span><br><span class="line">安装: yarn <span class="variable language_">global</span> add [package]</span><br><span class="line">卸载: yarn <span class="variable language_">global</span> remove [package]</span><br><span class="line"></span><br><span class="line">yarn -v 查看版本</span><br><span class="line">yarn <span class="variable language_">global</span> dir 全局安装路径  <span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="variable constant_">ASUS</span>\<span class="title class_">AppData</span>\<span class="title class_">Local</span>\<span class="title class_">Yarn</span>\<span class="title class_">Data</span>\<span class="variable language_">global</span></span><br></pre></td></tr></table></figure><h1 id="3-webpack概述"><a href="#3-webpack概述" class="headerlink" title="3. webpack概述"></a>3. webpack概述</h1><blockquote><p>webpack 是一个基于 NodeJS 的 <strong>静态模块打包器 (module bundler)</strong></p><p>打包基本认知：<strong>将多个文件 压缩 合并 处理的过程</strong>，就可以称之为是打包。<br>好处：可以<strong>减少请求次数，减轻服务器压力，加快页面访问速度。</strong>（但其实，现在意义上的打包，可以做更多事情）</p><p>将来要学的 vue-cli 脚手架环境, 集成了 webpack, 所以才能对各类文件进行打包处理 </p></blockquote><p><a href="https://webpack.js.org/">webpack官网</a></p><p><img src="/images%5Cimage-20230201141635130.png" alt="image-20230201141635130"></p><h2 id="3-1-webpack-能做什么"><a href="#3-1-webpack-能做什么" class="headerlink" title="3.1 webpack 能做什么"></a>3.1 webpack 能做什么</h2><p>webpack是一个 静态模块 打包器</p><ol><li><p>语法转换</p><ul><li>less&#x2F;sass&#x2F;stylus 转换成css</li><li>ES6转换成ES5</li><li>typescript转换成原生js</li><li>…</li></ul></li><li><p>html&#x2F;css&#x2F;js&#x2F;图片等 代码压缩合并 (打包)</p></li><li><p>webpack可以在开发期间提供一个开发服务器， 提高开发效率</p><p><img src="/images%5Cgjscripts.png" alt="image-20230202122241599"></p></li></ol><p><strong>项目一般先打包再上线</strong></p><h2 id="3-2-webpack-基本使用"><a href="#3-2-webpack-基本使用" class="headerlink" title="3.2 webpack - 基本使用"></a>3.2 webpack - 基本使用</h2><p>注意: 文档有可能不全的, 先按照我们笔记步骤, 先配置, 先上手</p><p>以后开发: 对着官网, 对着博客, 去配 (博客的时间, 找近几年的)</p><p><a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p><h2 id="3-3-webpack-打包演示"><a href="#3-3-webpack-打包演示" class="headerlink" title="3.3 webpack 打包演示"></a>3.3 webpack 打包演示</h2><blockquote><p>需求：将多个js文件打包成一个js文件 —-&gt;webpack</p></blockquote><ol><li><p>新建项目文件夹，构建项目目录  dist    src&#x2F;main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist目录：存放打包后代码的目录</span><br><span class="line">src：存放源代码的目录</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure></li><li><p>安装依赖包  </p><p>dependencies    不加 -D，将包记录为项目依赖，表示开发上线都要用（如：vue 或 jquery）</p><p>devDependencies  加-D将包记录为开发依赖，表示只在开发中使用，上线就不需要了（如：webpack 以及 webpack相关插件包）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack  webpack-cli  -D</span><br></pre></td></tr></table></figure></li><li><p>package.json 中，配置 scripts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>--config  webpack.config.js</code> 这个配置文件名为默认值, 不加也会默认找这个文件</p></li><li><p>提供 webpack.config.js  根文件下</p><p>基础版本</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  这是webpack的配置文件</span></span><br><span class="line"><span class="comment">  后续所有的配置都在这个js文件中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  注意：这里只能使用commonJS规范的语法，不能使用ES6模块化语法!!!!!!!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口: 从哪个文件开始打包</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行脚本，根目录</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure></li></ol><p>小测试:</p><p>​假定在main.js中导入一个  a.js,  多个文件需要打包, webpack会打包成一个文件, 可以节约请求的次数</p><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">以后项目的入口文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./js/a.js&#x27;</span>  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./js/b.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span>  <span class="comment">//webpack默认只认识js和JSON文件，不认识其他文件，比如css文件 配置loader来处理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是main模块&#x27;</span>)</span><br></pre></td></tr></table></figure><p>完成了一个什么过程？</p><ol><li>先构建了webpack 的打包环境</li><li>再将多个文件打包成一个文件</li></ol><h2 id="3-4-package-json-中-scripts的使用说明"><a href="#3-4-package-json-中-scripts的使用说明" class="headerlink" title="3.4 package.json 中 scripts的使用说明"></a>3.4 package.json 中 scripts的使用说明</h2><p>在package.json文件中, 可以配置 scripts … </p><p>1.配置命令： 在package.json 文件中，可以配置 scripts,  配置我们自己的命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;pp&quot;</span>: <span class="string">&quot;yarn add jquery&quot;</span>,</span><br><span class="line">     <span class="string">&quot;命令名&quot;</span>:<span class="string">&quot;要执行的脚本&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.执行脚本：npm  run   命令名 </p><p><strong>运行方式:  npm  run  xx</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn xxx</span><br><span class="line">npm run pp</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>特殊的命令:  start &#x2F; stop  可以省略 run</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run start  =&gt; npm start      =&gt;  yarn start</span><br><span class="line">npm run stop  =&gt; npm stop        =&gt;  yarn stop</span><br></pre></td></tr></table></figure><p>使用 yarn 直接不需要加 run  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run pp  =&gt;  yarn pp</span><br><span class="line">npm run build =&gt; yarn build</span><br></pre></td></tr></table></figure><h2 id="3-5-基本配置-配置入口出口模式"><a href="#3-5-基本配置-配置入口出口模式" class="headerlink" title="3.5 基本配置 - 配置入口出口模式"></a>3.5 基本配置 - 配置入口出口模式</h2><p>参考文档:   <a href="https://webpack.docschina.org/concepts/#entry">https://webpack.docschina.org/concepts/#入口-entry-</a> </p><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// entry: 配置入口文件 (从哪个文件开始打包) </span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// output: 配置输出 (打包到哪去)</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 打包输出的目录 (必须是绝对路径)</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 打包生成的文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 打包模式 production 压缩/development 不压缩</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//production（生产环境，代码压缩）</span></span><br><span class="line"><span class="comment">//development （开发环境，代码不压缩）</span></span><br></pre></td></tr></table></figure><p>重新 yarn build 打包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打包模式</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;build&quot;</span> : <span class="string">&quot;webpack --mode=production&quot;</span>       压缩</span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve --mode=development&quot;</span>   不压缩</span><br></pre></td></tr></table></figure><p>从 yarn build 开始都走了哪些流程呢?</p><p><img src="/images%5Cbuild.png" alt="image-20230202144021365"></p><p><strong>执行webpack命令, 找到配置文件, 从入口文件开始，基于依赖关系, 打包代码输出到指定位置</strong></p><h2 id="3-6-案例：基于-webpack-实现隔行变色"><a href="#3-6-案例：基于-webpack-实现隔行变色" class="headerlink" title="3.6 案例：基于 webpack 实现隔行变色"></a>3.6 案例：基于 webpack 实现隔行变色</h2><p><img src="/images/image-20210604170920609.png" alt="image-20210604170920609"></p><ol><li>准备页面 新建  public&#x2F;index.html</li></ol><p><img src="/images/image-20191126112505518.png" alt="image-20191126112505518"></p><ol start="2"><li>准备页面结构，在 index.html 中新建一些 li</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ul&gt;li&#123;我是第$个li&#125;*10 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第7个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第8个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第9个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编辑功能</li></ol><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现隔行变色</span></span><br><span class="line"><span class="keyword">const</span> allLis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#app li&#x27;</span>)</span><br><span class="line">allLis.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        item.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        item.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>执行打包命令</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><ol start="5"><li>手动复制，将 public&#x2F;index.html 手动拷贝到 dist 目录， 手动引入打包后的 js</li></ol><p><img src="/images/image-20210604171243128.png" alt="image-20210604171243128"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./bundle.js&quot;</span>&gt;&lt;<span class="regexp">/script&gt; /</span><span class="regexp">/下面加</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/defer 延迟 在DOMContentLoaded事件触发之前加载</span></span><br><span class="line"><span class="regexp">&lt;script defer src=&quot;bundle.js&quot;&gt;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-7-webpack-插件-和-loaders的配置"><a href="#3-7-webpack-插件-和-loaders的配置" class="headerlink" title="3.7 webpack - 插件 和 loaders的配置"></a>3.7 webpack - 插件 和 loaders的配置</h2><h3 id="3-7-1-自动生成html-html-webpack-plugin-插件"><a href="#3-7-1-自动生成html-html-webpack-plugin-插件" class="headerlink" title="3.7.1 自动生成html - html-webpack-plugin 插件"></a>3.7.1 <strong>自动生成html</strong> - <code>html-webpack-plugin</code> 插件</h3><p>每次都要将 public&#x2F;index.html 手动拷贝到 dist 目录， 手动引入打包后的 js， 太麻烦</p><p>所以一般会用一个插件, 会自动拷贝到 dist下, 并自动引入</p><ol><li><p>下载  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin  -D</span><br></pre></td></tr></table></figure></li><li><p><strong>在<code>webpack.config.js</code>文件中，引入这个模块</strong> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入自动生成 html 的插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span> &#125;) <span class="comment">//从&#x27;./public/index.html&#x27;里面去拷贝</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>配置好了之后, public 目录的 index.html 就不需要引入打包后的文件了, 会自动被插件生成 html 引入</strong></p></blockquote><h3 id="3-7-2-webpack中处理-css-文件-css-loader"><a href="#3-7-2-webpack中处理-css-文件-css-loader" class="headerlink" title="3.7.2 webpack中处理 css 文件 - css-loader"></a>3.7.2 webpack中处理 css 文件 - <code>css-loader</code></h3><p>webpack默认只认识 js 文件和 json文件, 但是webpack 可以使用 <a href="https://www.webpackjs.com/concepts/loaders">loader</a> 来加载预处理文件, 允许webpack也可以打包 js之外的静态资源。</p><p>所以webpack如果要处理其他文件类型, <strong>记得要先配置对应的 loader</strong></p><p><strong>需求: 去掉小圆点, 新建 css 目录</strong></p><ol><li><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add style-loader css-loader -D</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123; <span class="comment">// 加载器</span></span><br><span class="line">  <span class="comment">// loader的规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 正则表达式，用于匹配所有的css文件</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// 先用 css-loader 让webpack能够识别 css 文件的内容</span></span><br><span class="line">      <span class="comment">// 再用 style-loader 将样式, 以动态创建style标签的方式添加到页面中去</span></span><br><span class="line">      <span class="attr">use</span>: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>导入main.js里面</p></li></ol><h3 id="3-7-3-分离-css-文件-mini-css-extract-plugin"><a href="#3-7-3-分离-css-文件-mini-css-extract-plugin" class="headerlink" title="3.7.3 分离 css 文件 mini-css-extract-plugin"></a>3.7.3 分离 css 文件 <code>mini-css-extract-plugin</code></h3><p>我们上面的操作，使得<code>css</code>和<code>js</code>文件混杂在一起了，那有没有什么办法把<code>css</code>分离出来呢？ </p><p>插件: <code>mini-css-extract-plugin</code></p><ol><li><p>安装依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure></li><li><p><strong>在<code>webpack.config.js</code>文件中，引入这个模块</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入分离 css 文件的 模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置loaders</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块加载</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="comment">// loader的规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    <span class="comment">// 配置 css 文件的解析</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">       <span class="comment">// 根据官方文档写的，注意&#x27;css-loader&#x27;的书写位置</span></span><br><span class="line">       <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插件的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span> &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 定义打包好的文件的存放路径和文件名</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123; </span><br><span class="line"> <span class="attr">filename</span>:<span class="string">&#x27;css/index.css&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-7-4-webpack-中处理-less-less-loader"><a href="#3-7-4-webpack-中处理-less-less-loader" class="headerlink" title="3.7.4 webpack 中处理 less - less-loader"></a>3.7.4 webpack 中处理 less - <code>less-loader</code></h3><ol><li><p>下载依赖包</p><p>注意: 解析less文件需要识别 less 语法, 所以除了 <code>less-loader</code>  需要额外下载 <code>less</code> 包  </p><p>less-loader: 将less转换成 css</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less  less-loader  -D</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置 less 文件的解析</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      <span class="comment">// 分离出 css 内容</span></span><br><span class="line">  <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入less文件</p></li></ol><h3 id="3-7-5-webpack-中处理图片-内置的-asset-module"><a href="#3-7-5-webpack-中处理图片-内置的-asset-module" class="headerlink" title="3.7.5 webpack 中处理图片 - 内置的 asset module"></a>3.7.5 webpack 中处理图片 - 内置的 asset module</h3><p>我们试了一下，在项目中使用一下 img 图片。结果就报错了，难道<code>webpack</code>连图片也认不出来吗？</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.使用图片</span></span><br><span class="line"><span class="comment">//默认导入</span></span><br><span class="line"><span class="keyword">import</span> one <span class="keyword">from</span> <span class="string">&#x27;./images/01.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgE = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">imgE.<span class="property">src</span> = one</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="title function_">appendChild</span>(imgE)</span><br></pre></td></tr></table></figure><p>没有错，的确认不出来,   此时需要用webpack5 内置的 <strong>asset</strong> 资源处理模块，来处理图片资源。</p><p>webpack5 处理资源： <a href="https://webpack.docschina.org/guides/asset-modules/">https://webpack.docschina.org/guides/asset-modules/</a></p><p><code>tips</code>: webpack4 中来处理图片的问题,  主要用到 <code>url-loader</code>  和   <code>file-loader</code> 两个模块， 现 webpack5 已集成，无需安装。</p><p>**配置 rules 基本规则： **</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置解析图片</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）对于小于 8k 的图片，会自动转 base64 字符串（节约请求次数，成本：放大约30%的图片体积大小）</p><p>（2）对于大于 8k 的图片，会生成单独文件引入。</p><p><strong>配置图片的打包输出目录：</strong></p><p>默认是直接输出到了 dist 根目录, 可以通过  generator  进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;images/[hash][ext]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-webpack-配置字体图标-和图片一致"><a href="#3-8-webpack-配置字体图标-和图片一致" class="headerlink" title="3.8 webpack 配置字体图标 - 和图片一致"></a>3.8 webpack 配置字体图标 - 和图片一致</h2><p>字体图标 和 图片的配置一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理字体图标的解析</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;fonts/[hash][ext]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-webpack-使用-babel-处理高版本的-js-语法"><a href="#3-9-webpack-使用-babel-处理高版本的-js-语法" class="headerlink" title="3.9 webpack 使用 babel 处理高版本的 js 语法"></a>3.9 webpack 使用 babel 处理高版本的 js 语法</h2><p>webpack 默认仅内置了 模块化的 兼容性处理   <code>import  export</code></p><p><strong>babel</strong> 的介绍 &#x3D;&gt; 用于处理高版本 js语法 的兼容性</p><ol><li><p>安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure></li><li><p>配置规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>配置完成</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  webpack.config.js文件</span></span><br><span class="line"><span class="comment">  这是webpack的配置文件 </span></span><br><span class="line"><span class="comment">  后续所有的配置都在这个js文件中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  注意：这里只能使用commonJS规范的语法，不能使用ES6模块化语法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="comment">// 引入自动生成 html 的插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line">    <span class="comment">// 引入分离 css 文件的 模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 1.entry: 配置入口文件 (从哪个文件开始打包) </span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.output: 配置输出 (打包到哪去)</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 打包输出的目录 (必须是绝对路径)</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 打包生成的文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;js/bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.打包模式 production 压缩/development 不压缩</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">//4.配置插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">//4.1 配置自动引入html插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span> &#125;),</span><br><span class="line">        <span class="comment">//4.2 配置css抽离到单独文件中</span></span><br><span class="line">        <span class="comment">// 定义打包好的文件的存放路径和文件名</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;css/index.css&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//5.配置loader</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// loader的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="comment">// 正则表达式，用于匹配所有的css文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// 先用 css-loader 让webpack能够识别 css 文件的内容</span></span><br><span class="line">                <span class="comment">// 再用 style-loader 将样式, 以动态创建style标签的方式添加到页面中去</span></span><br><span class="line">                <span class="comment">//use: [&quot;style-loader&quot;, &quot;css-loader&quot;]</span></span><br><span class="line">                <span class="comment">// 根据官方文档写的，注意&#x27;css-loader&#x27;的书写位置</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置 less 文件的解析</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// 分离出 css 内容</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//配置解析图片</span></span><br><span class="line">            <span class="comment">//对于小于 8k 的图片，会自动转 base64 字符串（节约请求次数，成本：放大约30%的图片体积大小）</span></span><br><span class="line">            <span class="comment">//对于大于 8k 的图片，会生成单独文件引入。</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;images/[hash][ext]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理字体图标的解析</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;fonts/[hash][ext]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//配置babel</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//配置开发服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>, <span class="comment">// 端口号</span></span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span> <span class="comment">// 自动打开浏览器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">main.js</span></span><br><span class="line"><span class="comment">以后项目的入口文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.引入js文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./js/a.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./js/b.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是main.js文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现隔行变色</span></span><br><span class="line"><span class="keyword">const</span> allLis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#app li&#x27;</span>)</span><br><span class="line">allLis.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        item.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        item.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.引入css文件</span></span><br><span class="line"><span class="comment">//直接导入</span></span><br><span class="line"><span class="comment">// webpack 默认只认识js和json文件，不认识其他文件，比如： css文件</span></span><br><span class="line"><span class="comment">// 怎么办？配置 loader 让 loader 插件来帮助处理</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.引入less文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./less/index.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使用图片</span></span><br><span class="line"><span class="comment">//默认导入</span></span><br><span class="line"><span class="comment">//import one from &#x27;./images/01.jpg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> two <span class="keyword">from</span> <span class="string">&#x27;./images/02.gif&#x27;</span></span><br><span class="line"><span class="keyword">let</span> imgE = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">imgE.<span class="property">src</span> = two</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="title function_">appendChild</span>(imgE)</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.使用字体图标</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./fonts/iconfont.css&#x27;</span></span><br><span class="line"><span class="keyword">let</span> spanE = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">spanE.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;iconfont&#x27;</span>)</span><br><span class="line">spanE.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;icon-auto&#x27;</span>)</span><br><span class="line">spanE.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;green&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="title function_">appendChild</span>(spanE)</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.高版本语法，转成 低版本语法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">myFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是箭头函数，我很高级&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myFn</span>()</span><br></pre></td></tr></table></figure><h1 id="4-webpack-Source-Map"><a href="#4-webpack-Source-Map" class="headerlink" title="4. webpack - Source Map"></a>4. webpack - Source Map</h1><h3 id="4-1-什么是Source-Map"><a href="#4-1-什么是Source-Map" class="headerlink" title="4.1 什么是Source Map?"></a>4.1 什么是Source Map?</h3><p><strong>Source Map 就是一个信息文件，里面储存着位置信息。</strong></p><p><strong>开发环境调错</strong>： <strong>可以准确追踪error 和 warning 在原始代码的位置。</strong></p><p>也就是说，Source Map 文件中存储着代码压缩混淆前后的对应关系。有了它，出错的时候，除错工具将<strong>直接显示原始代码，而不是转换后的代码</strong>，能够极大的方便后期的调试。</p><h3 id="4-2-开发环境下的-Source-Map"><a href="#4-2-开发环境下的-Source-Map" class="headerlink" title="4.2 开发环境下的 Source Map?"></a>4.2 开发环境下的 Source Map?</h3><p>在开发环境下，webpack 默认启用了 Source Map 功能。当程序运行出错时，可以直接在控制台提示错误行的位置，并定位到具体的源代码, 但错误行数有时会对不上:</p><p><img src="/images/ty-5.png" alt="ty-5"></p><p><img src="/images/ty-6.png" alt="ty-6"></p><p>需要配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eval-source-map 仅限在&quot;开发模式&quot;下使用, 不建议在&quot;生产模式&quot;下使用</span></span><br><span class="line"><span class="comment">// 此选项生产的Source Map能够保证&quot;运行时报错的行数&quot;与&quot;源代码的行数&quot;保持一直</span></span><br><span class="line"><span class="comment">// devtool: &#x27;eval-source-map&#x27;,</span></span><br><span class="line"><span class="attr">devtool</span>: <span class="string">&#x27;eval-source-map&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line"><span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span>  <span class="comment">// 开发环境下： 设置记录原始代码位置信息的功能</span></span><br><span class="line">                              <span class="comment">// 仅适用于开发环境，不要在生产环境下使用（防止被轻易查看源码位置）</span></span><br></pre></td></tr></table></figure><h3 id="4-3-生产环境下的-Source-Map"><a href="#4-3-生产环境下的-Source-Map" class="headerlink" title="4.3 生产环境下的 Source Map?"></a>4.3 生产环境下的 Source Map?</h3><p>在生产环境下，如果没有配置devtool 选项，则最终生成的文件中不启用Source Map功能。这能够防止原始代码通过Source Map 的形式暴露给别有所图之人。</p><p><img src="/images/ty-7.png" alt="ty-7"></p><p><img src="/images/ty-8.png" alt="ty-8"></p><p><strong>需求:  在生产环境下，只想定位报错的具体行数，但不想暴露源码。主要是方便快速定位到bug, 快速修复!</strong></p><p>此时可以配置:</p><p>先配置production（生产环境，代码压缩）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtool</span>: <span class="string">&#x27;nosources-source-map&#x27;</span></span><br></pre></td></tr></table></figure><p>实际效果如图所示：</p><p><img src="/images/ty-9.png" alt="ty-9"></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/images/ty-10.png" alt="ty-10"></h3><h3 id="4-4-Source-Map-的最佳实践"><a href="#4-4-Source-Map-的最佳实践" class="headerlink" title="4.4 Source Map 的最佳实践"></a>4.4 Source Map 的最佳实践</h3><ul><li><p>开发环境下： </p><p>建议把 <code>devtool </code>的值设置为 <code>eval-source-map</code>  </p><p>好处：可以精准定位到具体的错误行。</p></li><li><p>生产环境下：</p><p>建议关闭 <code>Source Map </code>或将 <code>devtool </code>的值设置为 <code>nosources-source-map</code> </p><p>好处：防止源码泄露，提高网站的安全性。</p></li></ul><h1 id="5-webpack-watch"><a href="#5-webpack-watch" class="headerlink" title="5. webpack - watch"></a>5. webpack - watch</h1><h3 id="使用watch-mode-观察模式"><a href="#使用watch-mode-观察模式" class="headerlink" title="使用watch mode(观察模式)"></a>使用watch mode(观察模式)</h3><p>直接执行<code>yarn build</code>命令的话，就是执行一次编译一次, 多次调试会显得很麻烦,  我们可以配置<code>watch</code>模式,  来监视项目中的文件更改，并在文件更改时重新编译; </p><p>换句话说，修改了内容之后只要刷新浏览器就可以看到最新的效果,  不需要再手动执行<code>yarn build</code>命令重新编译了。</p><ol><li>运行时在命令后面加<code>--watch</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build --watch</span><br></pre></td></tr></table></figure><ol start="2"><li>webpack.config.js中配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">watch</span>: <span class="literal">true</span>, <span class="comment">// 启用 watch 模式</span></span><br><span class="line">  <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">    <span class="comment">// 忽略监视node_modules文件夹中的内容变化</span></span><br><span class="line">    <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><blockquote><p>执行一次编译多次</p><p>只要你修改了相关的文件，就会重新触发编译。这个比较适合多次反复调试的情况。</p></blockquote><h1 id="6-webpack-开发服务器"><a href="#6-webpack-开发服务器" class="headerlink" title="6. webpack - 开发服务器"></a>6. webpack - 开发服务器</h1><blockquote><p>配置本地服务器</p></blockquote><blockquote><p>问题: 每次修改代码, 重新 yarn build 打包, 才能看到最新的效果, 实际工作中, 打包 yarn build 非常费时 </p><p>解决: 起一个开发服务器, 缓存一些已经打包过的内容, 只重新打包修改的文件, 最终运行在内存中给浏览器使用</p></blockquote><blockquote><p><strong>webpack开发服务器：把代码运行在内存中, 保存自动更新, 实时返回给浏览器显示</strong></p></blockquote><h3 id="6-1-webpack-dev-server自动刷新"><a href="#6-1-webpack-dev-server自动刷新" class="headerlink" title="6.1 webpack-dev-server自动刷新"></a>6.1 webpack-dev-server自动刷新</h3><p>作用：启动web服务，打包输出源码在内存，并检测代码变化热更新到网页</p><ol><li>下载</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure><ol start="2"><li>配置scripts</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve --config webpack.config.js&quot;</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-webpack-dev-server-的配置"><a href="#6-2-webpack-dev-server-的配置" class="headerlink" title="6.2 webpack-dev-server 的配置"></a>6.2 webpack-dev-server 的配置</h3><p>webpack-dev-server配置文档:  <a href="https://webpack.docschina.org/configuration/dev-server/#devserverafter">https://webpack.docschina.org/configuration/dev-server/#devserverafter</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>, <span class="comment">// 端口号</span></span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span> <span class="comment">// 自动打开浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>启动服务器开发：  npm run dev &#x2F; yarn dev</li></ol><blockquote><p>webpack-dev-server和watch的区别:</p><p>webpack-dev-server 监测到代码变化后，浏览器可以看到及时更新的效果，但是并没有自动打包修改的代码</p><p>yarn build –watch 在监测到代码变化后自动打包修改的代码</p></blockquote><h1 id="7-解析别名-alias"><a href="#7-解析别名-alias" class="headerlink" title="7. 解析别名 alias"></a>7. 解析别名 alias</h1><p>配置模块如何解析， 创建 import 或 require 的别名，来确保模块引入变得更简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="title class_">Mytils</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/utils&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;  &#125;  <span class="keyword">from</span> <span class="string">&#x27;../src/utils/check.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;  &#125;  <span class="keyword">from</span> <span class="string">&#x27;@/utils/check.js&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs</title>
      <link href="/posts/882ea80.html"/>
      <url>/posts/882ea80.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-nodejs基本介绍"><a href="#1-nodejs基本介绍" class="headerlink" title="1. nodejs基本介绍"></a>1. <code>nodejs</code>基本介绍</h1><h2 id="1-1-为什么要学习nodejs"><a href="#1-1-为什么要学习nodejs" class="headerlink" title="1.1 为什么要学习nodejs?"></a>1.1 为什么要学习<code>nodejs</code>?</h2><p>① 为什么要学习服务端的开发？</p><ol><li><p>通过学习<code>Node.js</code>开发理解<strong>服务器开发</strong>、<strong>Web请求和响应过程</strong>、 <strong>了解服务器端如何与客户端配合</strong></p></li><li><p>作为前端开发工程师（FE - front-end engineer）需要具备一定的服务端开发能力</p></li><li><p>全栈工程师的必经之路</p></li></ol><p>② 服务器端开发语言有很多，为什么要选择<code>node.js</code> ?</p><ol><li>降低编程语言切换的成本(<code>node.js</code>实质上用的还是<code>javascript</code>) </li><li><code>NodeJs</code>是前端项目的基础设施，不仅仅是做服务端开发， 前端项目中用到的<em>大量工具都是基于Node的</em>, 比如: <code>webpack</code> … </li><li><code>nodejs</code>在处理<strong>高并发</strong>上有得天独厚的优势, 大型项目经常会用Node做<code>web服务器上层的中间件</code>,  <code>web服务器上层网关</code>…</li><li><strong>对于前端工程师，面试时可能对于<code>nodejs</code>有一定的要求</strong></li></ol><p>（高并发：很多人同时访问服务器）</p><h2 id="1-2-浏览器与javaScript"><a href="#1-2-浏览器与javaScript" class="headerlink" title="1.2 浏览器与javaScript"></a>1.2 浏览器与<code>javaScript</code></h2><blockquote><p>思考问题：为什么浏览器能够执行<code>js</code>代码?</p></blockquote><h3 id="js的组成部分"><a href="#js的组成部分" class="headerlink" title="js的组成部分"></a><code>js</code>的组成部分</h3><p><img src="/images/image-20210511124905844.png" alt="image-20210511124905844"></p><h3 id="浏览器的组成部分"><a href="#浏览器的组成部分" class="headerlink" title="浏览器的组成部分"></a>浏览器的组成部分</h3><p><img src="/images/image-20210510154247797.png" alt="image-20210510154247797"></p><p><strong>浏览器引擎</strong>:  </p><ul><li>负责在用户界面和渲染引擎之间传送指令</li><li>在客户端本地缓存中读写数据</li><li>是浏览器中各个部分之间相互通信的核心</li></ul><p><strong>渲染引擎</strong>：负责解析<code>html</code>和<code>css</code></p><p><strong><code>js</code>引擎</strong>：负责解析<code>javascript</code>代码</p><h3 id="JS可以操作”网页内容”和”浏览器功能”"><a href="#JS可以操作”网页内容”和”浏览器功能”" class="headerlink" title="JS可以操作”网页内容”和”浏览器功能”?"></a><code>JS</code>可以操作”网页内容”和”浏览器功能”?</h3><p><img src="/images/Snipaste_2020-10-08_17-29-12.png"></p><p>每个浏览器都内置了<code>DOM</code>、<code>BOM </code>这样的<code>API</code></p><p>因此，浏览器中的JavaScript 才可以调用它们。</p><p><strong>浏览器中的JavaScript运行环境</strong></p><p><img src="/images/Snipaste_2020-10-08_17-33-05.png"></p><p>总结：</p><ul><li>运行环境指的是代码正常运行所需的必要环境。</li><li>浏览器是<code>javascript</code>的运行环境。</li></ul><blockquote><p>思考:  是不是只要一个软件的运行环境中有<code>JS</code>引擎, 就可以执行<code>JS</code>代码?  true</p></blockquote><h2 id="1-3-nodejs简介"><a href="#1-3-nodejs简介" class="headerlink" title="1.3 nodejs简介"></a>1.3 <code>nodejs</code>简介</h2><h3 id="什么是nodejs"><a href="#什么是nodejs" class="headerlink" title="什么是nodejs?"></a>什么是<code>nodejs</code>?</h3><p><code>Node.js</code>® is a JavaScript runtime built on Chrome’s <code>V8 </code>JavaScript engine.</p><p><code>Node.js </code>是一个基于 Chrome <code>V8</code> 引擎的 JavaScript 运行环境。</p><p>通俗的理解：<code>Node.js </code>为 JavaScript 代码的正常运行，提供的必要的环境。</p><p><code>Node.js </code>的官网地址： <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><img src="/images/Snipaste_2020-10-08_17-37-30.png"></p><p>注意：</p><p>① 浏览器是 JavaScript 的前端运行环境。</p><p>② <code>Node.js</code> 是 JavaScript 的后端运行环境。</p><p>③ <code>Node.js</code> 中无法调用 <code>DOM </code>和 <code>BOM</code> 等 浏览器内置 <code>API</code>。</p><h3 id="nodejs与浏览器的区别"><a href="#nodejs与浏览器的区别" class="headerlink" title="nodejs与浏览器的区别?"></a><code>nodejs</code>与浏览器的区别?</h3><p>相同点：<code>nodejs</code>浏览器都是<code>javascript</code>的运行环境，都能够解析<code>js</code>程序。</p><p>不同点：<code>nodejs</code>无法使用<code>DOM</code>和<code>BOM</code>的操作，浏览器无法执行<code>nodejs</code>中的文件操作等功能</p><p><img src="/images/jh-node.png"></p><p><strong>问题小结：</strong></p><ol><li><p>在浏览器端，可以使用<code>javascript</code>操作文件么？可以</p></li><li><p>在<code>nodejs</code>端，可以使用<code>BOM</code>和<code>DOM</code>的方法么？不可以</p></li></ol><h3 id="Node-js可以做什么"><a href="#Node-js可以做什么" class="headerlink" title="Node.js可以做什么?"></a><code>Node.js</code>可以做什么?</h3><p><code>Node.js</code> 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和<code>API</code>。</p><p>然而，基于<code>Node.js </code>提供的这些基础能，很多强大的工具和框架如雨后春笋，层出不穷。</p><p>所以学会了<code>Node.js</code> ，可以让前端程序员胜任更多的工作和岗位：</p><p>① 基于 <code>Express/Koa/Egg</code> 等框架（<a href="http://www.expressjs.com.cn/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAWeb">http://www.expressjs.com.cn/），可以快速构建Web</a> 应用   </p><p>② 基于 Electron框架（<a href="https://electronjs.org/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8">https://electronjs.org/），可以构建跨平台的桌面应用</a></p><p>③ 基于<code>restify</code>框架（<a href="http://restify.com/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%60API">http://restify.com/），可以快速构建`API</a> &#96;接口项目</p><p>④ 读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</p><p>总之：</p><p><code>Node.js</code> 是大前端时代的“<strong>大宝剑</strong>”，有了<code>Node.js </code>这个超级 <strong>buff</strong> 的加持，前端程序员的行业竞争力会越来越强！</p><h3 id="Node-js怎么学"><a href="#Node-js怎么学" class="headerlink" title="Node.js怎么学?"></a><code>Node.js</code>怎么学?</h3><p>浏览器中的 JavaScript 学习路径：<br>JavaScript 基础语法 + 浏览器内置<code>API</code>（<code>DOM </code>+ <code>BOM</code>） + 第三方库（<code>Echarts</code>、<code>AntD</code> 等）</p><p><code>Node.js</code> 的学习路径：<br>JavaScript 基础语法 + <code>**Node.js </code>内置 <code>API</code> 模块（<code>fs</code>、<code>path</code>、<code>http</code>等）**+ 第三方框架（Express、Electron等）</p><h1 id="2-nodejs环境的安装"><a href="#2-nodejs环境的安装" class="headerlink" title="2. nodejs环境的安装"></a>2. <code>nodejs</code>环境的安装</h1><p>如果希望通过<code>Node.js</code> 来运行 <code>Javascript </code>代码，则必须在计算机上安装<code>Node.js </code>环境才行。</p><p>安装包可以从<code>Node.js </code>的官网首页直接下载，进入到<code>Node.js </code>的官网首页（<a href="https://nodejs.org/zh-cn/%EF%BC%89%EF%BC%8C%E7%82%B9">https://nodejs.org/zh-cn/），点</a> 击绿色的按钮，下载所需的版本后，双击直接安装即可。</p><p><img src="/images/image-node.png" alt="image-20210510170806920"></p><h2 id="2-1-版本说明"><a href="#2-1-版本说明" class="headerlink" title="2.1 版本说明"></a>2.1 版本说明</h2><ul><li><code>LTS</code> 为长期稳定版，对于追求稳定性的企业级项目来说，推荐安装<code>LTS</code> 版本的<code>Node.js</code>。</li><li>Current 为新特性尝鲜版，对于热衷于尝试新特性的用户来说，推荐安装Current 版本的 <code>Node.js</code>。但是，Current 版本 中可能存在隐藏的Bug 或安全性漏洞，因此不推荐在企业级项目中使用Current 版本的 <code>Node.js</code>。</li></ul><h2 id="2-2-安装nodejs"><a href="#2-2-安装nodejs" class="headerlink" title="2.2 安装nodejs"></a>2.2 安装<code>nodejs</code></h2><h3 id="windows安装步骤"><a href="#windows安装步骤" class="headerlink" title="windows安装步骤"></a>windows安装步骤</h3><p>打开终端测试</p><p>使用快捷键（Windows徽标键+ R）打开运行面板，输入<code>cmd </code>后直接回车，即可打开终端。</p><h3 id="mac安装步骤"><a href="#mac安装步骤" class="headerlink" title="mac安装步骤"></a>mac安装步骤</h3><ol><li>选择安装包</li></ol><p><img src="/images/image-20210510171319260.png" alt="image-20210510171319260"></p><ol start="2"><li>如图</li></ol><p><img src="/images/image-20210510171357404.png" alt="image-20210510171357404"></p><ol start="3"><li>点击继续</li></ol><p><img src="/images/image-20210510171418285.png" alt="image-20210510171418285"></p><ol start="4"><li>点击继续</li></ol><p><img src="/images/image-20210510171439220.png" alt="image-20210510171439220"></p><ol start="5"><li>点击同意</li></ol><p><img src="/images/image-20210510171508041.png" alt="image-20210510171508041"></p><ol start="6"><li>点击继续</li></ol><p><img src="/images/image-20210510171537415.png" alt="image-20210510171537415"></p><ol start="7"><li>点击安装</li></ol><p><img src="/images/image-20210510171612177.png" alt="image-20210510171612177"></p><ol start="8"><li>使用指纹或者输入密码进行安装</li></ol><p><img src="/images/image-20210510171648170.png" alt="image-20210510171648170"></p><p>能够看到如图，说明安装成功了。</p><ol start="9"><li>打开终端测试node是否安装成功</li></ol><p><img src="/images/image-20210510171804256.png" alt="image-20210510171804256"></p><ol start="10"><li><p>输入<code>node -v</code>查看node安装的版本</p><p><img src="/images/node-version.png" alt="image-20210510171911844"></p></li></ol><blockquote><p>测试是否安装成功</p></blockquote><p>打开终端，在终端输入命令node –v 后，按下回车键，即可查看已安装的<code>Node.js</code> 的版本号。</p><h2 id="2-3-终端的使用"><a href="#2-3-终端的使用" class="headerlink" title="2.3 终端的使用"></a>2.3 终端的使用</h2><p>终端（英文：Terminal）是专门为开发人员设计的，用 于实现人机交互的一种方式。</p><p><code>nodejs</code>和普通的程序运行不一样，需要在终端中使用node命令来使用。</p><p>windows终端和mac电脑的终端打开方式稍微有些不同。</p><h3 id="windows打开终端的方式"><a href="#windows打开终端的方式" class="headerlink" title="windows打开终端的方式"></a>windows打开终端的方式</h3><ol><li>window + R:  <code>cmd</code>     <code>powershell </code> 默认在C盘的用户目录打开</li><li>在任意的文件夹下，按住shift键，使用鼠标右键  （好处：可以在任意的文件夹下打开命令窗口）</li></ol><p><img src="/images/image-20210512100917960.png" alt="image-20210512100917960"></p><ol start="3"><li>使用<code>vscode</code>集成的终端，在js文件或者在文件夹上右键</li></ol><p></p><p><img src="/images/node-o.png" alt="node-o.png"></p><p><code>shift + Escape</code></p><h3 id="mac打开终端的方式"><a href="#mac打开终端的方式" class="headerlink" title="mac打开终端的方式"></a>mac打开终端的方式</h3><p><img src="/images/image-20210512101308687.png" alt="image-20210512101308687"></p><ol start="2"><li><p>在文件夹上右键，可以打开当前文件夹的终端</p></li><li><p>在<code>vscode</code>中使用</p></li></ol><h2 id="2-4-终端常见操作"><a href="#2-4-终端常见操作" class="headerlink" title="2.4 终端常见操作"></a>2.4 终端常见操作</h2><p>终端命令</p><ul><li><code>ls</code>        list 查看 ，查看当前文件夹下所有的目录列表</li><li><code>cd </code>        切换到某个文件夹下，  change directory</li><li><code>cd ../</code>    退回上级文件夹</li><li>clear    清屏 ( <code>cls</code> )</li><li><code>esc</code>      清除当前这一行</li></ul><p>常用快捷键</p><p>在 Windows 的命令行中，我们可以通过如下快捷键，来提高命令行的操作效率：<br>① 使用 ↑ 键，可以快速定位到上一次执行的命令<br>② 使用 tab 键，能够快速补全路径<br>③ 使用 <code>esc</code> 键，能够快速清空当前已输入的命令</p><h1 id="3-nodejs基本使用"><a href="#3-nodejs基本使用" class="headerlink" title="3. nodejs基本使用"></a>3. <code>nodejs</code>基本使用</h1><p>在 <code>Node.js</code> 中需要通过终端才能执行 JavaScript 代码</p><p>① 打开终端</p><p>② 输入 node 要执行的<code>js</code>文件的路径，即可通过<code>Node.js</code>，来执行存放于**<code>.js</code>** 文件中的代码</p><ul><li><p>创建<code>js</code>文件 <code>helloNode.js</code></p></li><li><p>写<code>nodejs</code>的内容：<code>console.log(&#39;hello nodejs&#39;)</code></p></li><li><p>打开终端</p></li><li><p>执行命令：<code>node helloNode.js</code></p></li></ul><blockquote><p> 注意：在<code>nodejs</code>中是无法使用<code>DOM</code>和<code>BOM</code>的内容的，因此<code>document, window</code>等内容是无法使用的。</p></blockquote><h1 id="二：node核心模块"><a href="#二：node核心模块" class="headerlink" title="二：node核心模块"></a>二：node核心模块</h1><h1 id="1-global模块"><a href="#1-global模块" class="headerlink" title="1. global模块"></a>1. global模块</h1><p>global模块，是node的全局模块，在使用时不需要引入，直接使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * window: 浏览器中的全局对象</span></span><br><span class="line"><span class="comment">  * global: nodejs中的全局对象</span></span><br><span class="line"><span class="comment">  * 注意 : node里面使用 global里面的变量,不需要引入</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//1. console.log()  打印</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. setTimeout 和setInterval ，node 中的延时器和定时器</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我在node中使用定时器~&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ctrl + c 停止执行！！！</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块作用域下的属性 </span></span><br><span class="line">  <span class="comment">//3. __dirname  当前文件夹的绝对路径</span></span><br><span class="line">  <span class="comment">//4. __filename 当前文件的完整路径, 包含当前文件</span></span><br><span class="line">  <span class="comment">//从当前所在磁盘盘符一直到当前文件夹的路径</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(__filename)</span><br><span class="line"><span class="comment">//作用：方便后面本地文件的读取。</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-fs模块"><a href="#2-fs模块" class="headerlink" title="2. fs模块"></a>2. <code>fs</code>模块</h1><blockquote><p><code>fs</code>模块是<code>nodejs</code>中最常用的一个模块，因此掌握<code>fs</code>模块非常的有必要，<code>fs</code>模块的方法非常多,用到了哪个查哪个即可。</p><p>文档地址：<a href="http://nodejs.cn/api/fs.html">http://nodejs.cn/api/fs.html</a></p></blockquote><p>  在<code>nodejs</code>中，提供了<code>fs</code>模块，这是node的核心模块</p><p>  注意：</p><ol><li>除了global模块中的内容可以直接使用，其他模块都是需要加载的。</li><li><code>fs</code>模块不是全局的，不能直接使用。因此需要导入才能使用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-1-读取文件"><a href="#2-1-读取文件" class="headerlink" title="2.1 读取文件"></a>2.1 读取文件</h2><blockquote><p>语法：**<code>fs.readFile</code>(path[, options], callback)**</p></blockquote><p>方式一：不传编码参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.调用fs模块中的方法 fs.readFile(path[, options], callback)</span></span><br><span class="line">    <span class="comment">//参数1：文件的路径</span></span><br><span class="line">    <span class="comment">//参数2：配置项(可选)</span></span><br><span class="line">    <span class="comment">//参数3：读取文件的回调函数</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;静夜思.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一个err参数：错误对象，如果读取失败，err会包含错误信息，如果读取成功，err是null</span></span><br><span class="line">    <span class="comment">//第二个data参数：读取成功后的数据（是一个Buffer对象）</span></span><br><span class="line">    <span class="comment">//console.log(err) //null</span></span><br><span class="line">    <span class="comment">//console.log(data) </span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件出错&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)  <span class="comment">// Buffer对象  是Nodejs用于处理二进制数据的。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// no such file or directory  没有这样的文件或目录</span></span><br></pre></td></tr></table></figure><p>方式二：传编码参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置以什么编码读取文件中的内容（只适用于读取文本类型的文件）</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>,<span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件错误&#x27;</span>, err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>关于Buffer对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="title class_">Buffer</span>对象是<span class="title class_">Nodejs</span>用于处理二进制数据的。</span><br><span class="line"><span class="number">2.</span> 其实任意的数据在计算机底层都是二进制数据，因为计算机只认识二进制。</span><br><span class="line"><span class="number">3.</span> 所以读取任意的文件，返回的结果都是二进制数据，即<span class="title class_">Buffer</span>对象</span><br><span class="line"><span class="number">4.</span> <span class="title class_">Buffer</span>对象可以调用<span class="title function_">toString</span>()方法转换成字符串。</span><br></pre></td></tr></table></figure><h2 id="2-2-写文件"><a href="#2-2-写文件" class="headerlink" title="2.2 写文件"></a>2.2 写文件</h2><blockquote><p>语法：**<code>fs.writeFile</code>(file, data[, options], callback)**</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：写入的文件名(如果文件不存在，会自动创建)</span></span><br><span class="line"><span class="comment">//参数2：写入的文件内容（注意：写入的内容会覆盖以前的内容）</span></span><br><span class="line"><span class="comment">//参数3：配置项</span></span><br><span class="line"><span class="comment">//参数4：回调函数 只有一个参数err 错误对象</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;2.txt&quot;</span>, <span class="string">&quot;hello world, 我是一个中国人&quot;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入文件失败&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入文件成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>写文件的时候，会把原来的内容给覆盖掉！！</li><li>不想覆盖 配置 <code>&#123; flag: &#39;a&#39; &#125;</code></li><li>如果文件不存在，会自动创建</li></ol><h2 id="2-3-追加文件"><a href="#2-3-追加文件" class="headerlink" title="2.3 追加文件"></a>2.3 追加文件</h2><blockquote><p>语法：**<code>fs.appendFile</code>(path, data[, options], callback)**</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：追加的文件名(如果文件不存在，会自动创建)</span></span><br><span class="line"><span class="comment">//参数2：追加的文件内容（注意：写入的内容会覆盖以前的内容）</span></span><br><span class="line"><span class="comment">//参数3：追加文件后的回调函数</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&quot;2.txt&quot;</span>, <span class="string">&quot;\n我是追加的内容&quot;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;追加文件内容失败&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;追加文件内容成功&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>思考：如果没有<code>appendFile</code>，通过<code>readFile</code>与<code>writeFile</code>应该怎么实现？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//追加写入</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;短歌行1.txt&#x27;</span>, <span class="string">&#x27;我是追加的~&#x27;</span>, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span> &#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加文件失败&#x27;</span>, err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加文件成功&#x27;</span>)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>需求：把a 文件夹中的图片，写入到b文件夹中，换个名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：先读取，后写入</span></span><br><span class="line"><span class="comment">//读</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./a/01.jpg&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取图片失败&#x27;</span>, err)</span><br><span class="line">        <span class="comment">//console.log(data)</span></span><br><span class="line">        <span class="comment">//写</span></span><br><span class="line">        <span class="comment">//异步,必须放在回调函数里面</span></span><br><span class="line">        <span class="comment">//写入的文件夹要先创建出来</span></span><br><span class="line">        <span class="comment">//同级的文件：./ </span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./b/b-boy.jpg&#x27;</span>, data, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>, err)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片写入成功&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-4-练习-考试成绩整理"><a href="#2-4-练习-考试成绩整理" class="headerlink" title="2.4 练习-考试成绩整理"></a>2.4 练习-考试成绩整理</h2><p>把<code>成绩.txt</code>中的数据： <code>小红=99 小白=100 小黄=70 小黑=66 小绿=88</code></p><p><img src="/images/image-20210511130034124.png" alt="image-20210511130034124"></p><p>整理成为下列各式并保存成<code>成绩-ok.txt</code>： </p><p><code>小红:99</code></p><p><code>小白:100</code></p><p><code>小黄:70</code></p><p><code>小黑:66</code></p><p><code>小绿:88</code></p><p><img src="/images/image-20210511130054287.png" alt="image-20210511130054287"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;小红=99 小白=100 小黄=70 小黑=66 小绿=88&#x27;</span></span><br><span class="line"><span class="keyword">let</span> newStr = str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">replace</span>(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;:&#x27;</span>)).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">//console.log(newStr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  常规写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 1. 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 读取 成绩.txt 中的数据</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;成绩.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 2.1 获取读取的内容并转化</span></span><br><span class="line">   <span class="keyword">let</span> newData = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> item.<span class="title function_">replace</span>(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">   &#125;).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.2 把新的内容写入 成绩-ok 文件</span></span><br><span class="line">   fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;成绩-OK.txt&#x27;</span>, newData, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成绩写入失败&#x27;</span>, err)</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成绩写入成功!&#x27;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  正则写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="comment">// 2.1 内容存储格式转化</span></span><br><span class="line">   <span class="keyword">let</span> newData = data.<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;:&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-5-fs-模块-路径动态拼接的问题"><a href="#2-5-fs-模块-路径动态拼接的问题" class="headerlink" title="2.5 fs 模块-路径动态拼接的问题"></a>2.5 <code>fs</code> 模块-路径动态拼接的问题</h2><p>在使用 <code>fs</code> 模块操作文件时，如果提供的操作路径是以.&#x2F; 或 ..&#x2F; 开头的相对路径时，很容易出现路径动态拼接错误的问题。<br>原因：代码在运行的时候，会以执行node 命令时所处的目录，动态拼接出被操作文件的完整路径。<br>解决方案：在使用<code>fs </code>模块操作文件时，直接提供绝对路径，不要提供.&#x2F; 或 ..&#x2F; 开头的相对路径，从而防止路径动态拼接的问题。</p><p>注意：使用<code>__dirname </code>获取当前文件所在的绝对路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 1) 存在问题:</span></span><br><span class="line"><span class="comment"> 在使用 fs 模块操作文件时</span></span><br><span class="line"><span class="comment"> 如果提供的操作路径是以./ 或 ../ 开头的相对路径时</span></span><br><span class="line"><span class="comment"> 很容易出现路径动态拼接错误的问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 2) 原因：</span></span><br><span class="line"><span class="comment"> 代码在运行的时候，会以执行node 命令时所处的目录，动态拼接出被操作文件的完整路径</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 3) 解决方案：</span></span><br><span class="line"><span class="comment"> 在使用fs 模块操作文件时，直接提供绝对路径</span></span><br><span class="line"><span class="comment"> 不要提供./ 或 ../ 开头的相对路径，从而防止路径动态拼接的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 拼接要读取文件的绝对路径</span></span><br><span class="line"><span class="keyword">let</span> filepath = __dirname +<span class="string">&#x27;/hello.txt&#x27;</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(filepath, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-path路径模块"><a href="#3-path路径模块" class="headerlink" title="3. path路径模块"></a>3. path路径模块</h1><h2 id="3-1-什么是path路径模块"><a href="#3-1-什么是path路径模块" class="headerlink" title="3.1 什么是path路径模块?"></a>3.1 什么是path路径模块?</h2><p>path 模块是 <code>Node.js </code>官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理 需求。<br>例如：<br>⚫ <code>path.join()</code> 方法，用来将多个路径片段拼接成一个完整的路径字符串<br>⚫ <code>path.basename() </code>方法，用来从路径字符串中，将文件名解析出来</p><p>如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-路径拼接"><a href="#3-2-路径拼接" class="headerlink" title="3.2 路径拼接"></a>3.2 路径拼接</h2><h3 id="path-join-的语法格式"><a href="#path-join-的语法格式" class="headerlink" title="path.join()的语法格式"></a><code>path.join()</code>的语法格式</h3><p>使用 <code>path.join() </code>方法，可以把多个路径片段拼接为完整的路径字符串，语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure><p>参数解读：<br>⚫ …paths <string> 路径片段的序列<br>⚫ 返回值: <string></p><h3 id="path-join-的代码示例"><a href="#path-join-的代码示例" class="headerlink" title="path.join()的代码示例"></a><code>path.join()</code>的代码示例</h3><p>使用<code>path.join()</code>方法，可以把多个路径片段拼接为完整的路径字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">join</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) ) <span class="comment">//      a/b/c</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">join</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;/b/&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) ) <span class="comment">//    a/b/c</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">join</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;/b/&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>) ) <span class="comment">//       a/b/c/index.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">join</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;../c&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>) ) <span class="comment">//      a/c/index.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname) <span class="comment">// node自带的全局变量，表示当前js文件所在的绝对路径</span></span><br><span class="line"><span class="comment">// 拼接成绩.txt的绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;成绩.txt&#x27;</span>) ) <span class="comment">// ------ 最常用的</span></span><br></pre></td></tr></table></figure><h2 id="3-3-获取路径中的文件名"><a href="#3-3-获取路径中的文件名" class="headerlink" title="3.3 获取路径中的文件名"></a>3.3 获取路径中的文件名</h2><h3 id="path-basename-的语法格式"><a href="#path-basename-的语法格式" class="headerlink" title="path.basename()的语法格式"></a><code>path.basename</code>()的语法格式</h3><p>使用 <code>path.basename()</code> 方法，可以获取路径中的最后一部分，经常通过这个方法<code>获取路径中的文件名</code>，语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br></pre></td></tr></table></figure><p>参数解读：<br>⚫ path <string> 必选参数，表示一个路径的字符串<br>⚫ ext <string> 可选参数，表示可选的文件扩展名<br>⚫ 返回: <string> 表示路径中的最后一部分</p><h3 id="path-basename-的代码示例"><a href="#path-basename-的代码示例" class="headerlink" title="path.basename()的代码示例"></a><code>path.basename()</code>的代码示例</h3><p>使用<code>path.basename()</code>方法，可以从一个文件路径中，获取到文件的名称部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找文件名 最后一部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">basename</span>(<span class="string">&#x27;index.html&#x27;</span>) ) <span class="comment">//         index.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">basename</span>(<span class="string">&#x27;a/b/c/index.html&#x27;</span>) ) <span class="comment">//   index.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(<span class="string">&#x27;/a.jpg&#x27;</span>)) <span class="comment">//                a.jpg</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(<span class="string">&#x27;https&quot;//www.baidu.com.//aa//dd&#x27;</span>))  <span class="comment">//dd</span></span><br></pre></td></tr></table></figure><h2 id="3-4-获取路径中的文件扩展名"><a href="#3-4-获取路径中的文件扩展名" class="headerlink" title="3.4 获取路径中的文件扩展名"></a>3.4 获取路径中的文件扩展名</h2><h3 id="path-extname-的语法格式"><a href="#path-extname-的语法格式" class="headerlink" title="path.extname()的语法格式"></a><code>path.extname()</code>的语法格式</h3><p>使用<code>path.extname()</code>方法，<code>可以获取路径中的扩展名部分</code>，语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure><p>参数解读：<br>⚫ path <string>必选参数，表示一个路径的字符串<br>⚫ 返回: <string> 返回得到的扩展名字符串</p><h3 id="path-extname-的代码示例"><a href="#path-extname-的代码示例" class="headerlink" title="path.extname()的代码示例"></a><code>path.extname()</code>的代码示例</h3><p>使用 <code>path.extname() </code>方法，可以获取路径中的扩展名部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找字符串中，最后一个点及之后的字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">extname</span>(<span class="string">&#x27;index.html&#x27;</span>) ) <span class="comment">// .html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">extname</span>(<span class="string">&#x27;a.b.c.d.html&#x27;</span>) ) <span class="comment">// .html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">extname</span>(<span class="string">&#x27;asdfas/asdfa/a.b.c.d.html&#x27;</span>) ) <span class="comment">// .html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">extname</span>(<span class="string">&#x27;adf.adsf&#x27;</span>) ) <span class="comment">// .adsf</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( path.<span class="title function_">extname</span>(<span class="string">&#x27;adf/adsf/aa&#x27;</span>) ) <span class="comment">//&#x27; &#x27;空串  只会在路径里面找</span></span><br></pre></td></tr></table></figure><h1 id="4-http模块"><a href="#4-http模块" class="headerlink" title="4. http模块"></a>4. <code>http</code>模块</h1><p>前置知识: 当我们在浏览器中输入了<a href="http://www.baidu.com的时候,发生了什么/">www.baidu.com的时候,发生了什么</a>?</p><ul><li><p><code>ip</code>地址 域名 端口三者之间的关系?</p><ul><li><code>ip</code>地址:</li></ul></li><li><p>任何一台设备(计算机, 手机, …)想要接入到网络中(互联网,局域网)，就会被分配一个唯一的<code>ip</code>地址</p></li><li><p>通过这个<code>ip</code>地址就能找到这台设备 <code>ipconfig</code></p></li><li><p>域名:</p><ul><li>比如 <a href="http://www.jd.com/">www.jd.com</a> 就是域名 ，方便记忆  ping  <a href="http://www.jd.com/">www.jd.com</a><ul><li>我们购买了云服务器之后, 服务器会有一个<code>IP</code>地址,  我们可以通过域名解析让域名指向当前<code>IP</code></li><li>域名和<code>ip</code>地址绑定后，通过域名就可以找到对应的<code>ip</code>地址, 从而访问到该服务器</li></ul></li></ul></li><li><p>端口: </p><ul><li><p>一台计算机能运行很多程序, 一般一个程序会占用一个或者多个端口</p></li><li><p><code>http</code>协议的默认端口是80</p><ul><li><code>https</code>协议的默认端口是443</li><li>数据库的默认端口3306</li></ul></li></ul></li><li><p>浏览器与服务器的交互过程</p><ol><li>根据相关域名, 去查询<code>dns</code>服务器,得到对应的<code>ip</code>地址</li><li>根据<code>IP</code>地址, 找到对应的计算机</li><li>根据端口找到对应的服务器程序</li><li>根据<code>url</code>请求具体的信息</li><li>服务器根据请求进行处理</li><li>浏览器接收到了服务器的响应, 把结果响应出来</li></ol></li></ul><p><img src="/images/lct.png" alt="image-20210511130054287"></p><h2 id="4-1-什么是http模块"><a href="#4-1-什么是http模块" class="headerlink" title="4.1 什么是http模块"></a>4.1 什么是<code>http</code>模块</h2><p><code>http</code> 模块是 <code>Node.js</code> 官方提供的、用来创建web 服务器的模块。它提供了一系列的方法和属性，例如：</p><p>⚫ <code>http.createServer()</code> 方法，用来创建一个web 服务器，从而对外提供web 资源<br>⚫ <code>http.request(</code>) 方法，用来发起<code>http</code>网络请求，请求其它web 服务器上的资源</p><p>如果要在 JavaScript 代码中使用<code>http</code>模块，则需要先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-2-创建最基本的web服务器"><a href="#4-2-创建最基本的web服务器" class="headerlink" title="4.2 创建最基本的web服务器"></a>4.2 创建最基本的web服务器</h2><h3 id="创建web服务器的基本步骤"><a href="#创建web服务器的基本步骤" class="headerlink" title="创建web服务器的基本步骤"></a>创建web服务器的基本步骤</h3><p>① 导入 <code>http</code> 模块<br>② 创建 web 服务器实例<br>③ 启动服务器<br>④ 为服务器实例绑定request 事件，监听客户端的请求</p><h3 id="创建web实现"><a href="#创建web实现" class="headerlink" title="创建web实现"></a>创建web实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建 web 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.启动服务器</span></span><br><span class="line"><span class="comment">//参数1：端口号 1-65535 前100不要用（分配给系统程序）,用3000往后</span></span><br><span class="line"><span class="comment">//参数2：主机地址 本地：127.0.0.1 --&gt; localhost(不写则默认)</span></span><br><span class="line"><span class="comment">//参数3：回调函数</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)  <span class="comment">// 随便打印</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   如何访问？</span></span><br><span class="line"><span class="comment">   127.0.0.1：3000</span></span><br><span class="line"><span class="comment">   localhost:3000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.为服务器实例绑定 request 事件，监听客户端的请求   （node 当中绑定事件是 on）</span></span><br><span class="line"><span class="comment">// 当客户端发送请求到服务器的时候，会触发这个事件</span></span><br><span class="line"><span class="comment">//参数1：req 接收的是一个request对象，它包含了所有请求相关的信息</span></span><br><span class="line"><span class="comment">//参数2：res 接收的是一个response对象，它包含了所有响应相关的信息,可以通过该对象给客户端返回响应</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里要处理客户端的请求</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求进来了~&#x27;</span>)   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一个响应</span></span><br><span class="line">    <span class="comment">//res.end()方法 结束并返回响应结果</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;this is ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点：</span></span><br><span class="line"><span class="comment">//1.端口被占用</span></span><br><span class="line"><span class="comment">//2.当修改了服务器的东西，要重启服务器！！！！</span></span><br></pre></td></tr></table></figure><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖 送到你的手中。<br>同样的道理，在一台服务器中，可以运行成百上千个web 服务。此时，通过端口号，客户端发送过来的网络请求，可以被准 确地交给端口号对应的web 服务进行处理。</p><p><img src="/images/Snipaste_2020-10-09_10-58-59.png"></p><h2 id="4-3-request对象详解"><a href="#4-3-request对象详解" class="headerlink" title="4.3 request对象详解"></a>4.3 request对象详解</h2><blockquote><p>request对象，包含了所有请求相关的信息。</p></blockquote><p>文档地址：<a href="http://nodejs.cn/api/http.html#http_request_method">http://nodejs.cn/api/http.html#http_request_method</a></p><p>常见属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">headers</span>: 所有的请求头信息</span><br><span class="line">method： 请求的方式</span><br><span class="line">url： 请求的地址</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求进来了&#x27;</span>)</span><br><span class="line">        <span class="comment">//请求常用的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>) <span class="comment">//获取请求头信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>) <span class="comment">//获取请求的方法 比如：get/post/put</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>) <span class="comment">//获取请求的url</span></span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;this is ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3000</span>端口的web服务器已经启动</span><br><span class="line">请求进来了</span><br><span class="line">--------------------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="attr">connection</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;;Not A Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;94&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36 Core/1.94.190.400 QQBrowser/11.5.5240.400&#x27;</span>,</span><br><span class="line">  <span class="attr">accept</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-fetch-user&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;accept-encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">GET</span></span><br><span class="line">/adbc/aa/bb?name=xx&amp;age=<span class="number">19</span></span><br><span class="line">--------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>注意</code>：在发送请求的时候，可能会出现两次请求的情况，这是因为谷歌浏览器会自动增加一个<code>favicon.ico</code>的请求。<code> /favicon.ico</code></p><p>小结：request对象中，常用的就是method和<code>url</code>两个参数</p><p>简化写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需求：根据用户的请求,    响应不同的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据用户的请求,    响应不同的内容</span></span><br><span class="line"><span class="comment">    /index.html       this is index.html</span></span><br><span class="line"><span class="comment">    /login.html       this is login.html</span></span><br><span class="line"><span class="comment">    /register.html    this is register.html</span></span><br><span class="line"><span class="comment">    其他地址           this is 404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//根据不同请求，响应不同内容</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;this is index.html&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/login.html&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;this is login.html&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;register.html&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;this is register.html&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;this is 404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-4-response对象详解"><a href="#4-4-response对象详解" class="headerlink" title="4.4 response对象详解"></a>4.4 response对象详解</h2><blockquote><p>response对象，包含了所有响应相关的信息。</p></blockquote><p>文档地址：<a href="http://nodejs.cn/api/http.html#http_class_http_serverresponse">http://nodejs.cn/api/http.html#http_class_http_serverresponse</a></p><p>常见的属性和方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">write</span>(data): 给浏览器发送响应体，可以调用多次，从而提供连续的请求体</span><br><span class="line">res.<span class="title function_">end</span>():   通知浏览器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。</span><br><span class="line">res.<span class="title function_">end</span>(data): 结束请求，并且响应一段内容，相当于res.<span class="title function_">write</span>(data) + res.<span class="title function_">end</span>()</span><br><span class="line">res.<span class="property">statusCode</span>: 响应的的状态码 <span class="number">200</span> <span class="number">404</span> <span class="number">500</span></span><br><span class="line">res.<span class="property">statusMessage</span>: 响应的状态信息， <span class="variable constant_">OK</span> <span class="title class_">Not</span> <span class="title class_">Found</span> ,会根据statusCode自动设置。</span><br><span class="line">res.<span class="title function_">setHeader</span>(name, value): 设置响应头信息， 比如content-type</span><br><span class="line">res.<span class="title function_">writeHead</span>(statusCode, statusMessage, options): 设置响应头，同时可以设置状态码和状态信息。</span><br></pre></td></tr></table></figure><p><strong>注意：必须先设置响应头，才能设置响应。</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建web服务器，并运行在3000端口上</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.1 res.write(data) 给浏览器发送响应体，可以调用多次，从而提供连续的请求体</span></span><br><span class="line">    <span class="comment">//res.write(&#x27;hello&#x27;)</span></span><br><span class="line">    <span class="comment">//res.end()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.2 res.end(data) 结束请求，并且响应一段内容，相当于res.write(data) + res.end()</span></span><br><span class="line">    <span class="comment">//res.end(&#x27;hello world&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.3 res.statusCode 响应的的状态码 200 404 500</span></span><br><span class="line">    <span class="comment">//2.31正常情况 默认200</span></span><br><span class="line">    <span class="comment">//res.statusCode = 200</span></span><br><span class="line">    <span class="comment">//res.end(&#x27;status is ok&#x27;)</span></span><br><span class="line">    <span class="comment">//2.32资源找不到(路径错误)</span></span><br><span class="line">    <span class="comment">//res.statusCode = 404</span></span><br><span class="line">    <span class="comment">//res.end(&#x27;this is 404&#x27;)</span></span><br><span class="line">    <span class="comment">//2.33服务器内部错误</span></span><br><span class="line">    <span class="comment">//res.statusCode = 500</span></span><br><span class="line">    <span class="comment">//res.end(&#x27;this is 500,server is err&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.4 res.setHeader(name, value): 设置响应头信息， 比如content-type</span></span><br><span class="line">    <span class="comment">//res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;)</span></span><br><span class="line">    <span class="comment">//res.end(&#x27;hello,我是清&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.5 res.writeHead(statusCode, statusMessage, options): 设置响应头，同时可以设置状态码和状态信息。</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&#x27;Not found~&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=utf-8&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;页面404错误&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h3><p>当调用<code> res.end()</code> 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);    <span class="comment">// 设置响应头的信息</span></span><br></pre></td></tr></table></figure><h3 id="根据不同的url响应不同的html内容"><a href="#根据不同的url响应不同的html内容" class="headerlink" title="根据不同的url响应不同的html内容"></a>根据不同的<code>url</code>响应不同的<code>html</code>内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  根据用户的请求, 响应不同的内容</span></span><br><span class="line"><span class="comment">  /index.html    响应:   这是一个首页</span></span><br><span class="line"><span class="comment">  /login.html    响应:   这是一个登录页</span></span><br><span class="line"><span class="comment">  其他           响应:   404你访问的页面不存在</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.引入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建一个web服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.运行到3000端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.监听request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//4.1 设置响应头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)  <span class="comment">// 解决res.end()的中文乱码问题</span></span><br><span class="line">        <span class="comment">//4.2 根据url地址返回不同的内容</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span> || req.<span class="property">url</span> === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;这是一个首页&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/login.html&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;这是一个登录页&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;404你访问的页面不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="案例：时钟案例"><a href="#案例：时钟案例" class="headerlink" title="案例：时钟案例"></a>案例：时钟案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  把时钟案例部署在本地服务器上</span></span><br><span class="line"><span class="comment">  通过localhost:3000能够访问</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(req.url)   //index.css  /index.js</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//1.从本地读取index.html文件中的内容</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;clock&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败&#x27;</span>, err)</span><br><span class="line">                <span class="comment">//2.响应给浏览器端</span></span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">            res.<span class="title function_">end</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/index.css&#x27;</span>) &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;clock&#x27;</span>, <span class="string">&#x27;index.css&#x27;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败&#x27;</span>, err)</span><br><span class="line">                <span class="comment">//2.响应给浏览器端</span></span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/css&#x27;</span>)</span><br><span class="line">            res.<span class="title function_">end</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/index.js&#x27;</span>) &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;clock&#x27;</span>, <span class="string">&#x27;index.js&#x27;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败&#x27;</span>, err)</span><br><span class="line">                <span class="comment">//2.响应给浏览器端</span></span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/javascript&#x27;</span>)</span><br><span class="line">            res.<span class="title function_">end</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="5-实现静态WEB服务器"><a href="#5-实现静态WEB服务器" class="headerlink" title="5. 实现静态WEB服务器"></a>5. 实现静态WEB服务器</h1><h2 id="5-1-服务器响应首页"><a href="#5-1-服务器响应首页" class="headerlink" title="5.1 服务器响应首页"></a>5.1 服务器响应首页</h2><ul><li>注意：浏览器中输入的URL地址，仅仅是一个标识，不与服务器中的目录一致。也就是说：返回什么内容是由服务端的逻辑决定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//从本地读取index.html文件中的内容</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./index.html&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(err) <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;您访问的资源不存在~&#x27;</span>)</span><br><span class="line">      res.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-2-根据不同url，响应不同文件"><a href="#5-2-根据不同url，响应不同文件" class="headerlink" title="5.2 根据不同url，响应不同文件"></a>5.2 根据不同<code>url</code>，响应不同文件</h2><h3 id="content-type设置-MIME类型"><a href="#content-type设置-MIME类型" class="headerlink" title="content-type设置-MIME类型"></a>content-type设置-MIME类型</h3><ul><li>MIME(Multipurpose Internet Mail Extensions)多用途Internet邮件扩展类型 是一种表示文档性质和格式的标准化方式</li><li>浏览器通常使用MIME类型（而不是文件扩展名）来确定如何处理文档；因此<strong>服务器将正确的MIME类型附加到响应对象的头部是非常重要的</strong></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_Types">MIME 类型</a></li></ul><h3 id="静态资源的通用处理"><a href="#静态资源的通用处理" class="headerlink" title="静态资源的通用处理"></a>静态资源的通用处理</h3><h3 id="MIME类型的通用处理-mime模块"><a href="#MIME类型的通用处理-mime模块" class="headerlink" title="MIME类型的通用处理-mime模块"></a>MIME类型的通用处理-mime模块</h3><ul><li>作用：获取文件的MIME类型</li><li>安装：<code>npm i mime</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//终端：npm init -y   npm i mime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.引入三方模块</span></span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径对应的MIME类型</span></span><br><span class="line">mime.<span class="title function_">getType</span>(<span class="string">&#x27;txt&#x27;</span>)                    <span class="comment">// ⇨ &#x27;text/plain&#x27; 纯文本</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mime.<span class="title function_">getType</span>(<span class="string">&#x27;/index.html&#x27;</span>)) <span class="comment">//text/html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mime.<span class="title function_">getType</span>(<span class="string">&#x27;/index.js&#x27;</span>)) <span class="comment">//application/javascript</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mime.<span class="title function_">getType</span>(<span class="string">&#x27;/index.css&#x27;</span>)) <span class="comment">//text/css</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mime.<span class="title function_">getType</span>(<span class="string">&#x27;/logo.png&#x27;</span>)) <span class="comment">//image/png</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mime.<span class="title function_">getType</span>(<span class="string">&#x27;静夜思.txt&#x27;</span>)) <span class="comment">//text/plain</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据MIME获取到文件后缀名</span></span><br><span class="line">mime.<span class="title function_">getExtension</span>(<span class="string">&#x27;text/plain&#x27;</span>)        <span class="comment">// ⇨ &#x27;txt&#x27;</span></span><br></pre></td></tr></table></figure><p>把可视化静态网站 部署到 3000端口的 web服务器上</p><p><img src="/assets%5Cbushu.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  把 可视化静态网站 部署到 3000端口的 web服务器上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//index.html</span></span><br><span class="line">    <span class="comment">//1.拼接读取资源的完整路径</span></span><br><span class="line">    <span class="keyword">let</span> reqUrl = req.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : req.<span class="property">url</span>   <span class="comment">//3000直接是首页</span></span><br><span class="line">    <span class="keyword">const</span> fullPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;project&#x27;</span>, reqUrl)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fullPath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.根据路径读取本地文件</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(fullPath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">//如果访问的页面不存在，则返回404页面</span></span><br><span class="line">            fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;project&#x27;</span>, <span class="string">&#x27;404.html&#x27;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取404页面失败&#x27;</span>, err)</span><br><span class="line">                    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">                res.<span class="title function_">end</span>(data)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//响应给浏览器</span></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, mime.<span class="title function_">getType</span>(req.<span class="property">url</span>))</span><br><span class="line">        res.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="三：npm与模块化"><a href="#三：npm与模块化" class="headerlink" title="三：npm与模块化"></a>三：npm与模块化</h1><h1 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1. 模块化"></a>1. 模块化</h1><p><code>问题: 当一个文件的js代码越来越多的时候,会出现什么问题?</code></p><h2 id="1-1-什么是模块化"><a href="#1-1-什么是模块化" class="headerlink" title="1.1 什么是模块化"></a>1.1 什么是模块化</h2><blockquote><p>一个模块其实指的就是一个独立的js文件</p></blockquote><p><strong>模块化</strong>是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。 对于整个系统来说，模块是可组合、分解和更换的单元。</p><h3 id="编程中的模块化"><a href="#编程中的模块化" class="headerlink" title="编程中的模块化"></a>编程中的模块化</h3><p>编程领域中的模块化，就是<strong>遵守固定的规则</strong>，把一个大文件拆成独立并互相依赖的多个小模块。</p><p>把代码进行模块化拆分的好处: </p><ul><li>提高了代码的复用性</li><li>提高了代码的可维护性</li><li>可以实现按需加载</li></ul><h2 id="1-2-模块化规范"><a href="#1-2-模块化规范" class="headerlink" title="1.2 模块化规范"></a>1.2 模块化规范</h2><p><strong>模块化规范</strong>就是对代码进行模块化的拆分与组合时，需要遵守的那些规则。</p><p>例如:</p><ul><li>使用什么样的语法格式来引用模块   比如: <code>require(&#39;fs&#39;)</code></li><li>在模块中使用什么样的语法格式向外暴露成员 (目前没有学习，马上学习)</li></ul><p><strong>模块化规范的好处</strong>:</p><ol><li>大家都遵守同样的模块化规范写代码，降低了沟通的成本</li><li>极大方便了各个模块之间的相互调用， 利人利己</li></ol><blockquote><p><strong>我们自己写模块，也要遵守模块化的标准</strong>。</p></blockquote><h2 id="1-3-了解CommonJS规范"><a href="#1-3-了解CommonJS规范" class="headerlink" title="1.3 了解CommonJS规范"></a>1.3 了解CommonJS规范</h2><blockquote><p>早期, js没有模块化规范, js越来越火, 想要用js开发大型项目, 必须要有模块化的规范。</p><p>民间出现了大量的<code>js</code>的模块化规范</p><p>——–最终演变成———-</p><p>浏览器端的模块化规范</p><p>服务端的模块化规范</p></blockquote><p>模块化规范的种类：</p><ul><li><code>AMD</code>   浏览器端（国外 - 代表：<code>requirejs</code>）</li><li><code>CMD </code> 浏览器端（国内 - 代表：<code>seajs</code>）</li><li>CommonJS  服务器端 (代表: nodejs)</li><li><code>ES6 </code> 大一统,  将来浏览器和服务器端统一的模块化语法标准</li></ul><p><code>Node.js</code> 遵循了<code>CommonJS</code>模块化规范，<code>CommonJS</code> 规定了模块的特性和各模块之间如何相互依赖。</p><h2 id="1-4-Node-js-中模块的分类"><a href="#1-4-Node-js-中模块的分类" class="headerlink" title="1.4 Node.js 中模块的分类"></a>1.4 Node.js 中模块的分类</h2><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是:</p><ul><li><p>内置模块(内置模块是由 <code>Node.js</code> 官方提供的，例如 <code>fs</code>、<code>path</code>、<code>http</code> 等)</p></li><li><p>自定义模块(用户创建的每个 <code>.js</code> 文件，都是自定义模块)</p></li><li><p>第三方模块(由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载)</p></li></ul><h2 id="1-5-加载模块"><a href="#1-5-加载模块" class="headerlink" title="1.5 加载模块"></a>1.5 加载模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载核心(内置)模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载第三方模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载自定义模块</span></span><br><span class="line"><span class="comment">//加载自定义模块需要加上 &#x27;./&#x27; ,可以省略后缀</span></span><br><span class="line"><span class="keyword">const</span> custom = <span class="built_in">require</span>(<span class="string">&#x27;./custom&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li>无论是什么模块，我们都要使用 <code>require()</code> 去加载，然后才能使用。</li><li>加载自定义的模块，需要加 <code>./</code> ，而且可以省略后缀 <code>.js</code></li></ul><h2 id="1-6-自定义模块的实现（重点）"><a href="#1-6-自定义模块的实现（重点）" class="headerlink" title="1.6 自定义模块的实现（重点）"></a>1.6 自定义模块的实现（重点）</h2><h3 id="Node-js中的模块作用域"><a href="#Node-js中的模块作用域" class="headerlink" title="Node.js中的模块作用域"></a><code>Node.js</code>中的模块作用域</h3><p>在 <code>Node.js</code> 中，用户创建的每个 <code>.js</code> 文件都是自定义模块。 在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做<strong>模块作用域</strong>。</p><blockquote><p>模块作用域的好处是避免了全局变量污染。</p></blockquote><p>由于模块具有一个模块级别的作用域，则另一个JS文件就无法使用当前模块定义的内容，如下图所示。</p><p><img src="/images/image-20200402000708938.png" alt="image-20200402000708938"></p><p>需求：一个模块中如何去使用其他模块中的属性和方法？</p><p><code>CommonJS </code><strong>规定</strong>:</p><ol><li><p>每个模块内部，<code>module</code> 变量代表当前模块。</p></li><li><p>module 变量是一个对象，它的 <code>exports</code> 属性(即 module.exports)是对外的接口。</p></li><li><p>加载某个模块，其实是加载该模块的 <code>module.exports</code> 属性。</p></li><li><p>require() 方法用于加载模块。</p></li></ol><h3 id="导出导入模块"><a href="#导出导入模块" class="headerlink" title="导出导入模块"></a>导出导入模块</h3><p>为了能正常使用加载的模块中的成员，<code>CommonJS</code>给出了<strong>标准</strong>，即</p><ul><li>一个模块需要使用 <code>module.exports</code> 导出需要共享的内容。</li><li>使用模块的<code>JS</code>文件需要使用 <code>require()</code> 导入模块。</li></ul><p><img src="/images%5Cimage-20200402001657713.png" alt="image-20200402001657713"></p><blockquote><p>模块导出的是什么，另一个使用模块的JS文件得到的就是什么。</p></blockquote><p><img src="/assets%5Cimage-20230131133633239.png" alt="image-20230131133633239"></p><h2 id="1-7-require-加载模块的机制"><a href="#1-7-require-加载模块的机制" class="headerlink" title="1.7 require()加载模块的机制"></a>1.7 require()加载模块的机制</h2><p>加载自定义模块和其他模块的机制有相同之处，也有不同之处，所以这里分开来看。</p><h3 id="加载自定义模块"><a href="#加载自定义模块" class="headerlink" title="加载自定义模块"></a>加载自定义模块</h3><ol><li><p>首次加载成功，会缓存模块</p></li><li><p>下次从缓存中加载，速度更快</p></li><li><p>加载自定义模块必须加 <code>./</code> ，如果是其他路径，对应变化，否则会把它当做核心模块或者第三方模块</p></li><li><p>加载自定义模块的时候，如果是 <code>require(&#39;./abc&#39;)</code></p><ol><li>优先加载相同名字的文件，加载一个叫做 abc 的文件</li><li>自动补 <code>.js</code> 后缀，然后加载 <code>abc.js</code> 文件</li><li>自动补 <code>.json</code> 后缀，然后加载 <code>abc.json</code> 文件</li><li>自动补 <code>.node</code> 后缀，然后加载 <code>abc.node</code> 文件</li><li>以上文件都没有，则报错 <code>Cannot find module &#39;./abc&#39;</code></li></ol></li></ol><p><strong><code>commonJS</code>的底层实现</strong></p><p><img src="/assets%5Cimage-20230131150937117.png" alt="image-20230131150937117"></p><h3 id="加载核心模块和第三方模块"><a href="#加载核心模块和第三方模块" class="headerlink" title="加载核心模块和第三方模块"></a>加载核心模块和第三方模块</h3><ol><li><p>首次加载成功，会缓存模块</p></li><li><p>下次从缓存中加载，速度更快</p></li><li><p>加载模块一定<code>不能</code>加 <code>./</code> ，否则会把它当做自定义模块</p></li><li><p>加载模块的时候，如果是 <code>require(&#39;haha&#39;)</code></p><ol><li><p>优先加载核心模块</p></li><li><p>去查找并加载第三方模块，查找第三方模块的路径可以通过 <code>module.paths</code> 查看</p><p>[</p><p> ‘C:\Users\yjh\Desktop\99-框架前置课\day2\04-案例\01-模块化\03-自定义模块加载细节\node_modules’,<br>  ‘C:\Users\yjh\Desktop\99-框架前置课\day2\04-案例\01-模块化\node_modules’,<br>  ‘C:\Users\yjh\Desktop\99-框架前置课\day2\04-案例\node_modules’,<br>  ‘C:\Users\yjh\Desktop\99-框架前置课\day2\node_modules’,<br>  ‘C:\Users\yjh\Desktop\99-框架前置课\node_modules’,<br>  ‘C:\Users\yjh\Desktop\node_modules’,<br>  ‘C:\Users\yjh\node_modules’,l<br>  ‘C:\Users\node_modules’,<br>  ‘C:\node_modules’</p><p>]</p></li><li><p>加载第三方模块会从当前目录开始寻找node_modules文件夹， 如果找到进入node_modules文件夹寻找对应的模块。如果没找到，进入上一级目录继续寻找node_modules，一直到根目录。如果一直没有找到，提示未找到模块。</p></li></ol></li></ol><h1 id="2-npm初步使用"><a href="#2-npm初步使用" class="headerlink" title="2. npm初步使用"></a>2. npm初步使用</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>npm（node  package  manager）node包管理器。</p><p>包是什么？包就是模块。</p><p>npm这个工具，在安装node的时候，就已经安装到你的计算机中了。</p><p>命令行中执行： <code>npm -v</code> ，如果看到版本号，说明安装成功了。</p><p>npm中文网: <a href="https://www.npmjs.com/">https://www.npmjs.com</a></p><h2 id="2-2-作用"><a href="#2-2-作用" class="headerlink" title="2.2 作用"></a>2.2 作用</h2><p>npm的作用是：管理node模块的工具。</p><ul><li>下载并安装第三方的模块</li><li>卸载第三方模块</li><li>….</li></ul><p>第三方模块：</p><ul><li>非内置模块，安装完node，还不能使用的模块，需要从网上下载安装，才能使用的模块</li><li>第三方模块是个人、公司、组织编写的模块，发布到网上，供我们使用</li></ul><blockquote><p>npm 就是一个管理（下载安装、卸载…）第三方模块的工具</p></blockquote><h2 id="2-3-初始化"><a href="#2-3-初始化" class="headerlink" title="2.3 初始化"></a>2.3 初始化</h2><p>使用npm工具之前，必须先初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm init</span><br><span class="line"><span class="comment"># 然后一路回车</span></span><br></pre></td></tr></table></figure><p>初始化之后，会在项目目录中生成 package.json 的文件。</p><p>注意：</p><ol><li>上述命令只能在英文的目录下运行成功！所以，项目文件夹的名称一定要使用英文命名，<strong>不要使用中文，不能出现空格。</strong></li><li><strong>运行 npm install 命令安装包的时候，npm包管理工具会把包的名称和版本号，记录到 package.json中</strong>。</li></ol><p>​      </p><h2 id="2-4-什么第三方模块"><a href="#2-4-什么第三方模块" class="headerlink" title="2.4 什么第三方模块"></a>2.4 什么第三方模块</h2><p>非node自带的模块。</p><p>是别人写的模块，然后发布到npm网站，我们可以使用npm工具来下载安装别人写的模块。</p><p>第三方模块，都是在node核心模块的基础之上，封装了一下，实现了很多非常方便快速简洁的方法。</p><p>目前，npm网站收录了超过 150万个第三方模块。</p><h2 id="2-5-安装卸载项目模块"><a href="#2-5-安装卸载项目模块" class="headerlink" title="2.5 安装卸载项目模块"></a>2.5 安装卸载项目模块</h2><p>下载安装第三方模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install 模块名</span><br><span class="line">npm i 模块名</span><br><span class="line"></span><br><span class="line">npm i 模块名@版本号   安装固定版本 使用 `npm i` 命令安装包的时候，会自动安装最新版本的包，可以手动安装指定版本的包</span><br></pre></td></tr></table></figure><p>卸载模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall 模块名</span><br><span class="line">npm un 模块名</span><br><span class="line">npm uni 软件包名</span><br></pre></td></tr></table></figure><p><img src="/assets%5Cnpm1.png" alt="image-20230131150937117"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_modules文件夹用来存放所有已安装到项目中的包。require()导入第三方包时，就是从这个目录中查找并加载包。</span><br><span class="line">package-lock.json配置文件用来记录 node_modules目录下的每一个包的下载信息，例如包的名字，版本号，下载地址等。</span><br><span class="line">注意：程序员不要手动修改 node_modules或package-lock.json文件中的任何代码，npm包管理工具会自动维护它们。</span><br><span class="line"></span><br><span class="line">dependencies: 依赖</span><br><span class="line">version: 版本</span><br><span class="line">description: 描述</span><br><span class="line">author: 作者</span><br></pre></td></tr></table></figure><h2 id="2-6-关于项目模块的说明"><a href="#2-6-关于项目模块的说明" class="headerlink" title="2.6 关于项目模块的说明"></a>2.6 关于项目模块的说明</h2><ul><li>下载安装的模块，存放在当前文件夹的 <code>node_modules</code> 文件夹中，同时还会生成一个记录下载的文件 <code>package-lock.json</code></li><li>下载的模块，在哪里可以使用<ul><li>在当前文件夹</li><li>在当前文件夹的子文件夹</li><li>在当前文件夹的子文件夹的子文件夹</li><li>……</li></ul></li><li>怎样使用第三方模块<ul><li>和使用内置模块一样，需要使用 <code>require</code> 加载模块</li><li>调用模块提供的方法完成工作（一般好的模块都会用使用文档的）</li></ul></li></ul><h2 id="2-7-演示下载安装第三方模块"><a href="#2-7-演示下载安装第三方模块" class="headerlink" title="2.7 演示下载安装第三方模块"></a>2.7 演示下载安装第三方模块</h2><p>这里演示一个处理时间日期的模块 – moment</p><p><a href="http://momentjs.cn/">http://momentjs.cn/</a></p><p>下载安装moment模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i moment</span><br></pre></td></tr></table></figure><p>演示使用moment模块处理时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>))</span><br><span class="line"><span class="comment">// 官网：http://momentjs.cn</span></span><br></pre></td></tr></table></figure><h2 id="2-8-dependencies说明"><a href="#2-8-dependencies说明" class="headerlink" title="2.8 dependencies说明"></a>2.8 dependencies说明</h2><p> 1、作用：保存依赖包的记录。</p><p> 2、以后如果看到我们项目中 没有node_modules目录， 但是有 <code>package.json</code>。说明我们项目是完整的。执行 <strong>npm i</strong> 会找 <code>package.json</code> 里面的 dependencies， 并且安装里面的所有依赖包</p><p> 3、执行 <code>npm i</code> 命令 要在 <code>package.json</code> 同级目录。</p><h2 id="2-9-全局模块"><a href="#2-9-全局模块" class="headerlink" title="2.9 全局模块"></a>2.9 全局模块</h2><ul><li><p>全局安装的模块，不能通过 <code>require()</code> 加载使用。</p></li><li><p>全局安装的模块，一般都是命令或者工具。用管理员身份打开 windows PowerShell</p></li><li><p>安装方法，在安装模块的命令后面，加 <code>-g</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i 模块名 -g</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm i -g 模块名</span><br></pre></td></tr></table></figure></li><li><p>查看全局安装的模块 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list -g --depth 0</span><br></pre></td></tr></table></figure></li><li><p>卸载方法（也是多一个 <code>-g</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm un 模块名 -g</span><br></pre></td></tr></table></figure></li><li><p>全局安装的模块，在系统盘（C盘）</p><ul><li>通过命令 <code>npm root -g</code> 可以查看全局安装路径</li></ul></li></ul><blockquote><p>mac安装过程可能出现权限问题，可以使用 sudo npm i xxx -g</p></blockquote><h2 id="2-10-全局安装nodemon模块"><a href="#2-10-全局安装nodemon模块" class="headerlink" title="2.10 全局安装nodemon模块"></a>2.10 全局安装nodemon模块</h2><ul><li><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure></li><li><p><code>nodemon</code>的作用：</p></li><li><p>代替node命令，启动服务的，当更改代码之后，<code>nodemon</code>会自动帮我们重启服务。</p></li><li><p>运行nodemon，如果报错如下：</p></li></ul><p><img src="/images/1585472428055.png" alt="158547242055"></p><ul><li>解决办法是：<ul><li><code>管理员</code>方式，打开命令行窗口</li><li>执行 <code> set-ExecutionPolicy RemoteSigned</code> </li><li>在出现的选项中，输入 <code>A</code>，回车。即可</li></ul></li></ul><h2 id="2-11-本地安装和全局安装区别"><a href="#2-11-本地安装和全局安装区别" class="headerlink" title="2.11 本地安装和全局安装区别"></a>2.11 本地安装和全局安装区别</h2><p>有两种方式用来安装 <code>npm</code> 包：本地安装和全局安装。选用哪种方式来安装，取决于你如何使用这个包。 </p><ol><li>本地安装</li></ol><ul><li>说明 : 想把我们用的包,安装到当前本地项目中使用 </li><li>比如 : <code>npm i jquery </code>, <code>npm i moment</code></li><li>要求 : 执行的安装命令<code>(npm i moment) </code>位置,必须在当前项目下执行 </li><li>包位置 :  本地安装的包 &#x3D;&gt; 当前项目下的 node_modules</li><li>使用包 :  <code>const moment = require(&#39;moment&#39;)  </code></li></ul><ol start="2"><li>全局安装</li></ol><ul><li><p>说明 : 想把一个包&#x2F;库,当成一个<code>工具</code>来使用, 就采用全局安装 </p></li><li><p>比如 : <code>npm i  -g live-server </code></p></li><li><p>要求 : 可以在任意地方, 都可以执行命令  </p></li><li><p>包位置 : <code>C:\Users\用户名\AppData\Roaming\npm</code></p></li><li><p>使用包 :  在<code>终端命令行</code>里使用, 不能在代码里</p></li></ul><h2 id="2-12-更改镜像源"><a href="#2-12-更改镜像源" class="headerlink" title="2.12 更改镜像源"></a>2.12 更改镜像源</h2><p>镜像源，就是下载安装第三方模块的网站。</p><p>我们下载的第三方模块都是从国外的npm主站下载的，速度比较慢。</p><p>淘宝在国内对npm上的第三方模块做了一个备份，也就是说，我们可以从国内下载第三方模块。</p><p>除了淘宝之外，还有很多其他镜像源。</p><p>简单的更改镜像源方法：</p><ul><li>全局安装 nrm 的模块<ul><li>nrm  用于管理镜像源</li></ul></li><li>使用nrm<ul><li><code>nrm ls</code> 通过这个命令，可以查看可用的镜像源</li><li><code>nrm use taobao</code> ，切换下载模块的网站为淘宝</li></ul></li></ul><p><a href="https://www.jianshu.com/p/90893d947432">https://www.jianshu.com/p/90893d947432</a></p><p><img src="/assets%5Cjxy.png"></p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="1-包的语义化版本"><a href="#1-包的语义化版本" class="headerlink" title="1.包的语义化版本"></a>1.包的语义化版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如 <span class="number">2.24</span><span class="number">.0</span></span><br><span class="line">其中每一位数字所代表的含义如下：</span><br><span class="line">第一位数字：大版本</span><br><span class="line">第二位数字：功能版本</span><br><span class="line">第三位数字：<span class="title class_">Bug</span>修复版本</span><br><span class="line"></span><br><span class="line">版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零。</span><br></pre></td></tr></table></figure><h4 id="2-包管理配置文件"><a href="#2-包管理配置文件" class="headerlink" title="2.包管理配置文件"></a>2.包管理配置文件</h4><p><code>npm</code>规定，在项目跟目录中，必须提供一个叫做 <code>package.json</code>的包管理配置文件。用来记录与项目相关的一些配置信息。</p><ul><li>项目的名称，版本号，描述等</li><li>项目中都用到了那些包</li><li>那些包只在开发期间会用到</li><li>那些包在开发和部署时都需要用到</li></ul><h4 id="3-多人协作的问题"><a href="#3-多人协作的问题" class="headerlink" title="3.多人协作的问题"></a>3.多人协作的问题</h4><p>遇到的问题：第三方包的体积过大，不方便成员之间共享项目源代码。</p><p>解决方案：共享时剔除<code>node_modules</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如何记录项目中安装了那些包：</span><br><span class="line">在项目的根目录中，创建一个叫 package.json 的配置文件（git init -y），即可用来记录项目中安装了哪些包。</span><br><span class="line">从而方便剔除 node_modules目录之后，在团队成员之间共享项目的源代码。</span><br><span class="line"></span><br><span class="line">注意：今后在项目开发中，一定要把 node_modules文件夹，添加到 .gitignore忽略文件中！！！</span><br></pre></td></tr></table></figure><h4 id="4-devDependencies"><a href="#4-devDependencies" class="headerlink" title="4. devDependencies"></a>4. devDependencies</h4><p>如果某些包 只在项目开发阶段会用到， 在项目上线之后不会用到，则建议把这些包记录到 devDependencies节点中。</p><p>与之对应的，如果某些包在开发和项目上线之后都需要用到则建议把这些包记录到 dependencies节点中。</p><p>可以使用如下了命令，将包记录到devDependencies节点中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装指定的包，并记录到 devDependencies节点中</span></span><br><span class="line">npm i 包名 -D</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：上述命令是简写形式，等价于下面的完整写法：</span></span><br><span class="line">npm install 包名 --save-dev</span><br></pre></td></tr></table></figure><h4 id="4-解决下包慢的问题"><a href="#4-解决下包慢的问题" class="headerlink" title="4.解决下包慢的问题"></a>4.解决下包慢的问题</h4><p>在使用npm下包的时候，默认从国外的 <a href="https://registry.npmjs.org/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%EF%BC%8C%E6%AD%A4%E6%97%B6%EF%BC%8C%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E8%BE%93%E9%9C%80%E8%A6%81%E7%BB%8F%E8%BF%87%E6%BC%AB%E9%95%BF%E7%9A%84%E6%B5%B7%E5%BA%95%E5%85%89%E7%BC%86%E3%80%82">https://registry.npmjs.org/服务器进行下载，此时，网络数据的传输需要经过漫长的海底光缆。</a></p><p>更改镜像源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看当前的下包镜像源  //检查镜像源是否下载成功</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment">//将下包的镜像源切换为淘宝镜像源</span></span><br><span class="line">npm config set registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-包的分类"><a href="#5-包的分类" class="headerlink" title="5.包的分类"></a>5.包的分类</h4><ol><li><p>项目包 ：那些被安装到项目的 node_modules 目录中的包，都是项目包。</p><ul><li>开发依赖包：被记录到 devDependencies 节点中的包，只在开发期间会用到。-D</li><li>核心依赖包：被记录到 dependencies 节点中的包，只在开发期间和项目上线之后都会用到。</li></ul></li><li><p>全局包</p><ul><li>在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为 全局包。</li><li>只有工具性质的包，才会全局安装的必要性，因为他们提供了好用的终端命令。</li><li>判断某个是否需要全局安装的包，参考官方提供的使用说明即可。</li></ul></li><li><p>i5ting_toc</p><ul><li>是一个可以把 md文档转为html页面的小工具，使用步骤为下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将 i5ting_toc 安装为全局包</span></span><br><span class="line">npm install -g i5ting_toc</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 i5ting_toc,轻松实现 md 转 html 的功能</span></span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure></li></ol><h4 id="6-规范的包结构"><a href="#6-规范的包结构" class="headerlink" title="6.规范的包结构"></a>6.规范的包结构</h4><p>一个规范的包，它的组成结构，必须符合以下3个要求：</p><ol><li>包必须以单独的目录而存在</li><li>包的顶级目录下要必须包含 package.json这个包管理配置工具</li><li>package.json中必须包含 name，version，main这三个属性，分别代表包的名字，版本号，包的入口</li></ol><p><a href="https://yarnpkg.com/zh-Hans/docs/package-json">https://yarnpkg.com/zh-Hans/docs/package-json</a></p><h4 id="7-开发属于自己的包"><a href="#7-开发属于自己的包" class="headerlink" title="7.开发属于自己的包"></a>7.开发属于自己的包</h4><ol><li><p>需要实现的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- <span class="comment">//格式化日期</span></span><br><span class="line">- <span class="comment">//转义 html中的特殊字符</span></span><br><span class="line">- <span class="comment">//还原html中的特殊字符</span></span><br><span class="line"><span class="comment">//1.导入自己的包</span></span><br><span class="line"><span class="keyword">const</span> myBao = <span class="built_in">require</span>(<span class="string">&#x27;./myBao-tools&#x27;</span>)</span><br><span class="line"><span class="comment">//-------功能1：格式化日期-----</span></span><br><span class="line"><span class="keyword">const</span> dt = myBao.<span class="title function_">dateFormat</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line"><span class="comment">//输出 2022-02-04  16：41：08</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dt)</span><br><span class="line"><span class="comment">//-------功能2:转移html中特殊字符</span></span><br><span class="line"><span class="keyword">const</span> htmlStr = <span class="string">&#x27;&lt;h1 style=&quot;color:red;&quot;&gt;你好！ &amp;copy;&lt;span&gt;小黄！&lt;/span&gt;&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str = myBao.<span class="title function_">htmlEscape</span>(htmlStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"><span class="comment">//--------功能3：还原html中的特殊字符</span></span><br><span class="line"><span class="keyword">const</span> rawHTML = myBao.<span class="title function_">htmlUnEscape</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rawHTML)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>初始化包的基本结构</p><ul><li>新建 myBao-tools文件夹，作为包的根目录</li><li>在myBao-tools文件夹中新建3个文件：<ol><li>package.json （包管理配置文件）</li><li>index.js （包的入口文件）</li><li>README.md （包的说明文档）</li></ol></li></ul></li><li><p>初始化package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;myBao-tools&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">   <span class="string">&quot;description&quot;</span>: <span class="string">&quot;提供了格式化时间，HTMLEscape的功能&quot;</span>,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [<span class="string">&quot;myBao&quot;</span>,<span class="string">&quot;dateFormat&quot;</span>,<span class="string">&quot;escape&quot;</span>],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在index.js中定义格式化时间的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dateFormat.js</span></span><br><span class="line"><span class="comment">//格式化时间的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">dateStr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dateStr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">const</span> m =  <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> d =  <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line">    <span class="keyword">const</span> hh =  <span class="title function_">padZero</span>(<span class="title function_">getHours</span>())</span><br><span class="line">    <span class="keyword">const</span> mm =  <span class="title function_">padZero</span>(<span class="title function_">getMinutes</span>())</span><br><span class="line">    <span class="keyword">const</span> ss =  <span class="title function_">padZero</span>(<span class="title function_">getSeconds</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>=<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//补零的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n&gt;<span class="number">9</span>? <span class="attr">n</span>:<span class="string">&#x27;0&#x27;</span> + n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在index.js中定义转义HTML的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// htmlEscape.js --1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlEscape</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> htmlStr.<span class="title function_">replace</span>(<span class="regexp">/&lt;|&gt;|&quot;|&amp;/g</span>,<span class="function">(<span class="params">match</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;lt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;gt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;quot;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 index.js中定义还原HTML的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//htmlEscape.js  --2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlUnEscape</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g</span>,<span class="function">(<span class="params">match</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;lt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;gt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;quot;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;amp;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    htmlEscape,</span><br><span class="line">    htmlUnEscape</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将不同的功能进行模块化的拆分</p><ol><li><p>将格式化时间的4功能，拆分到 src —&gt; dateFormat.js中</p></li><li><p>将处理 HTML字符串的56功能，拆分到 src —-&gt; htmlEscape.js中</p></li><li><p>在index.js中，导入两个模块，得到需要向外共享的方法  </p></li><li><p>在 index.js 中，使用 module.exports 把对应的方法共享出去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js 入口文件</span></span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="built_in">require</span>(<span class="string">&#x27;./src/dateFormat&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">escape</span> = <span class="built_in">require</span>(<span class="string">&#x27;./src/htmlEscape&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要向外暴露的成员</span></span><br><span class="line">modul.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...date,</span><br><span class="line">    ...<span class="built_in">escape</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写包的说明文档</p><p>包根目录中的README.md文件，是包的使用文档。通过它，我们可以事先把包的使用说明，以markdown的格式写出来，方便用户参考。具体些什么内容，没有强制性的要求。md文档中，会包含以下6项内容就可以了：</p><p>安装方式，导入方式，格式化时间，转义html中的特殊字符，还原html中的特殊字符，开源协议</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">##安装</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">npm install myBao-tools</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br><span class="line">##导入</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">const myBao = require(&#x27;myBao-tools&#x27;)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br><span class="line">##格式化时间</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">//调用 dateFormat 对时间进行格式化</span></span><br><span class="line"><span class="string">const dt = myBao.dateFormat(new Date())</span></span><br><span class="line"><span class="string">//输出 2022-02-04  16：41：08</span></span><br><span class="line"><span class="string">console.log(dt)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br><span class="line">##转义html中的特殊字符</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">const htmlStr = &#x27;&lt;h1 style=&quot;color:red;&quot;&gt;你好！ &amp;copy;&lt;span&gt;小黄！&lt;/span&gt;&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="string">const str = myBao.htmlEscape(htmlStr)</span></span><br><span class="line"><span class="string">console.log(str)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br><span class="line">##还原html中的特殊字符</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">//待还原的字符串</span></span><br><span class="line"><span class="string">const rawHTML = myBao.htmlUnEscape(str)</span></span><br><span class="line"><span class="string">console.log(rawHTML)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br><span class="line">##开源协议</span><br><span class="line"><span class="variable constant_">ISC</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="8-发布包"><a href="#8-发布包" class="headerlink" title="8.发布包"></a>8.发布包</h4><ol><li><p>注册 npm账号</p><ol><li>访问<a href="https://www.npmjs.com/%E7%BD%91%E7%AB%99%EF%BC%8C%E7%82%B9%E5%87%BB">https://www.npmjs.com/网站，点击</a> sign up，进入注册用户页面</li><li>填写信息</li><li>注册登录</li></ol></li><li><p>登录npm账号</p><p>可以在终端中执行 <code>npm login</code>命令，依次输入用户名，密码，，邮箱后，即可登录成功。</p><p>注意：要先把下包的服务器地址切换为 npm的官方服务器，否则会导致发布失败！</p></li><li><p>把包发布到npm上</p><p>将终端切换到包的根目录下运行<code>npm publish</code>命令，即可将包发布到npm上(注意：包名不能雷同)</p></li><li><p>删除已发布的包</p><p>运行 <code>npm unpublish 包名 --force</code>命令，即可从npm删除已发布的包。</p><p>注意：</p><ol><li><code>npm unpublish</code>命令只能删除72小时以内发布的包</li><li><code>npm unpublish</code>删除的包，在24小时内不允许重复发布</li><li>发布包的时候要慎重，尽量不要往npm上发布没有意义的包！</li></ol></li></ol><h4 id="9-模块的加载机制"><a href="#9-模块的加载机制" class="headerlink" title="9.模块的加载机制"></a>9.模块的加载机制</h4><ol><li><p>优先从缓存中加载</p><p>模块在第一次加载后会被缓存。这也意味着多次调用require()不会导致模块的代码被执行多次。</p><p>注意：不论是内置模块，用户自定义模块，还是第三方模块，他们都会优先从缓存中加载，从而提高模块的加载效率。</p></li><li><p>内置模块的加载机制</p><p>内置模块是由Nodejs官方提供的模块，内置模块的加载优先级最高。</p><p>例如：require(‘fs’)始终返回内置的fs的模块，即使在node_modules目录下有名字相同的包也叫fs。</p></li><li><p>自定义模块的加载机制</p><p>使用require()加载自定义模块时，必须指定以 .&#x2F; 或 ..&#x2F; 开头的路径标识符。在加载自定义模块时，如果没有指定 .&#x2F; 或者 ..&#x2F; 这样的路径标识符，则node会把它当作内置模块或第三方模块进行加载。</p></li><li><p>第三方模块的加载机制</p><p>如果传递给require()的模块标识符不是一个内置模块，也没有以 .&#x2F; 或 ..&#x2F; 开头，则nodejs会从当前模块的父目录开始，尝试从 &#x2F;node_modules文件夹中加载第三方模块。</p><p>如果没有找到第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p></li><li><p>目录作为模块的加载机制</p><p>当把目录作为模块标识符，传递给require()进行加载的时候，有三种加载方式：</p><ul><li>在被加载的目录下查找一个叫做 package.json的文件，并寻找main属性，作为require()加载的入口</li><li>如果目录里没有package.json文件，或者main入口不存在或无法解析，则nodejs将会试图加载目录下的index.js文件</li><li>如果以上两部都失败了，则nodejs会在终端打印错误消息，报告模块的缺失：Error:Cannot find module ‘xxx’</li></ul></li></ol><h1 id="3-同源-跨域"><a href="#3-同源-跨域" class="headerlink" title="3. 同源&amp;跨域"></a>3. 同源&amp;跨域</h1><h2 id="3-1-什么是同源"><a href="#3-1-什么是同源" class="headerlink" title="3.1 什么是同源?"></a>3.1 什么是同源?</h2><p><strong>同源：指的是两个URL地址具有相同的  协议地址、主机名（域名）、端口号。</strong></p><p>例如，下表给出了相对于 <a href="http://www.test.com/index.html">http://www.test.com/index.html</a> 页面的 5 个同源检测结果：</p><p><img src="/images/ty-1.png" alt="158547242055"></p><h2 id="3-2-什么是同源策略"><a href="#3-2-什么是同源策略" class="headerlink" title="3.2 什么是同源策略?"></a>3.2 什么是同源策略?</h2><p>同源策略（英文全称 Same origin policy）是浏览器提供的一个安全功能。它用于限制一个源的文档或者它加载的脚本如何能与另一个源的资源进行交互。</p><p>它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><p>同源策略的限制：限制 ajax 只能访问同源URL。</p><p>浏览器的同源策略规定：<strong>不允许非同源的 URL 之间进行资源的交互</strong>。</p><p><img src="/images/ty-2.png" alt="158547242055"></p><blockquote><p>请大家思考：如果没有浏览器，还会有同源策略吗？<br>A. 有<br>B. 没有 1</p></blockquote><h2 id="3-3-什么是跨域"><a href="#3-3-什么是跨域" class="headerlink" title="3.3 什么是跨域?"></a>3.3 什么是跨域?</h2><p><strong>同源指的是两个 URL 的协议、主机名、端口号完全一致，反之，则是跨域。</strong></p><p><strong>跨域</strong>：从一个源的文档&#x2F;脚本，加载另一个源的资源就产生了跨域。</p><p>出现跨域的根本原因：<strong>浏览器的同源策略不允许非同源的 URL 之间进行资源的交互</strong>。例如：</p><ul><li>网页：<a href="http://www.test.com/index.html">http://www.test.com/index.html</a></li><li>接口：<a href="http://www.api.com/userlist">http://www.api.com/userlist</a></li><li>受到同源策略的限制，上面的网页请求下面的接口会失败！</li></ul><h3 id="3-3-1-浏览器对跨域请求的拦截过程"><a href="#3-3-1-浏览器对跨域请求的拦截过程" class="headerlink" title="3.3.1 浏览器对跨域请求的拦截过程?"></a>3.3.1 浏览器对跨域请求的拦截过程?</h3><p><strong>浏览器允许发起跨域请求。但跨域请求回来的数据，会被浏览器拦截</strong>，无法被页面获取到！示意图如下：</p><p><img src="/images/ty-3.png" alt="158547242055"></p><p>目标：前后端分离的项目，前端和后端不在一个源，还要保证数据通信。</p><h3 id="3-3-2-突破浏览器跨域限制的两种方案"><a href="#3-3-2-突破浏览器跨域限制的两种方案" class="headerlink" title="3.3.2 突破浏览器跨域限制的两种方案?"></a>3.3.2 突破浏览器跨域限制的两种方案?</h3><p>代理服务器 和 CORS 是实现跨域数据请求的两种技术方案。</p><blockquote><p> 注意：</p><ol><li><p>代理服务器跨域</p></li><li><p>CORS（跨域资源共享） 是跨域的主流技术解决方案</p></li></ol><p> 3）jsonp : 很早之前解决跨域的方案</p><p> 4）同源访问</p></blockquote><h4 id="CORS-的概念"><a href="#CORS-的概念" class="headerlink" title="CORS 的概念"></a>CORS 的概念</h4><ol><li><p>CORS 是解决跨域数据请求的终极解决方案，全称是 Cross-origin resource sharing。一种基于 HTTP 头的机制。</p></li><li><p>CORS 技术需要浏览器和服务器同时支持，二者缺一不可：</p></li></ol><ul><li>浏览器要支持 CORS 功能（主流的浏览器全部支持，IE 不能低于 IE10）</li><li>服务器要开启 CORS 功能（需要后端开发者为接口开启 CORS 功能）</li></ul><blockquote><p>请大家思考：实现 CORS 的关键，是在客户端还是在服务器端？</p><p>答案：服务器端。<br>原因：如果服务器端没有开启 CORS 功能，则客户端无法访问那些跨域的接口！</p></blockquote><h4 id="CORS-的原理"><a href="#CORS-的原理" class="headerlink" title="CORS 的原理"></a>CORS 的原理</h4><p>服务器端通过 Access-Control-Allow-Origin 响应头，来告诉浏览器当前的 API 接口是否允许跨域请求。</p><p><img src="/images/ty-4.png" alt="158547242055"></p><h4 id="CORS-的两个主要优势"><a href="#CORS-的两个主要优势" class="headerlink" title="CORS 的两个主要优势"></a>CORS 的两个主要优势</h4><ol><li>CORS 是真正的 Ajax 请求，支持 GET、POST、DELETE、PUT、PATCH 等这些常见的 Ajax 请求方式</li><li>只需要后端开启 CORS 功能即可，前端的代码无须做任何改动</li></ol><blockquote><p>注意：</p><p>我们之前做过的案例中，所有调用的接口均已在服务器端开启了 CORS 功能！<br>例如：聊天机器人案例、新闻列表案例、用户登录案例</p></blockquote><p><img src="/assets%5Ckuayu.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/api/news&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//读取本地的json文件</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;list.json&#x27;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取的文件不存在&#x27;</span>, err)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//响应回去</span></span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>)</span><br><span class="line">                <span class="comment">//配置响应头</span></span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            res.<span class="title function_">end</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口的web服务器已经启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解决方案CORS步骤：</p><ol><li><p>下载 cors 本地软件包  （专门给响应头设置跨域资源共享）  npm i cors</p></li><li><p>导入 cors 函数</p></li><li><p>使用 server.use() 给 Web服务添加插件功能。</p></li><li><p>把 cors 函数调用传入给web服务，启动测试   *代表：该资源可以被任意外源访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)  <span class="comment">// 2.导入 cors 函数</span></span><br><span class="line"><span class="comment">// 3. 使用 server.use() 给 Web服务添加插件功能。</span></span><br><span class="line">server.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 get 请求方法的 /api/province 路径， 并读取 province.json 里省份数据返回给请求方</span></span><br><span class="line"><span class="comment">// localhost:3000/api/province</span></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/api/province&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname , <span class="string">&#x27;data/province.json&#x27;</span>) , <span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听所有请求方法和任意路径， 统一返回 404 提示</span></span><br><span class="line">server.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span> , <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;你要访问的资源路径不存在&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口号</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span> , <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;web 服务启动了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="同源访问"><a href="#同源访问" class="headerlink" title="同源访问"></a>同源访问</h4><p>目标：开发环境使用cors ， 上线部署关闭 cors ， 并采用同源访问方式</p><p>做法：让后端web服务器既可以提供数据接口，也可以访问网页资源</p><p>好处：安全，后端的接口不允许非同源来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：让express 支持静态（网页）资源的返回</span></span><br><span class="line"><span class="comment">// 核心：使用 express 内置函数 express.static() 绑定静态资源文件夹向前端暴露</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露指定的文件夹，让前端可以直接拼接路径和资源名字来访问</span></span><br><span class="line">server.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;public&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/api/province&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname , <span class="string">&#x27;data/province.json&#x27;</span>) , <span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git&amp;可视化</title>
      <link href="/posts/f82ea26.html"/>
      <url>/posts/f82ea26.html</url>
      
        <content type="html"><![CDATA[<h2 id="git基础入门"><a href="#git基础入门" class="headerlink" title="git基础入门"></a>git基础入门</h2><blockquote><p>Git是一款免费、开源的<strong>分布式</strong> <strong>版本控制系统</strong> ，用于敏捷高效地处理任何或小或大的项目。</p></blockquote><blockquote><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><blockquote><p>作用：<strong>代码存档备份</strong>（支持<strong>多人协作开发</strong>）</p></blockquote><h3 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h3><p><a href="https://git-scm.com/download/win">下载地址</a></p><p>注意：</p><ol><li><p>不要安装在中文目录</p></li><li><p>不要使用桌面管理软件</p><p><img src="/assets%5Cimage-20210318180622004.png" alt="0"></p></li></ol><p>安装很简单，一直下一步即可。在任意的目录下右键，能看到菜单, 就表示安装成功了。</p><h3 id="git三个区"><a href="#git三个区" class="headerlink" title="git三个区"></a>git三个区</h3><p>要对某个项目使用git进行管理，需要使用<code>git init</code>命令初始化git仓库<br><code>git init</code>会在当前目录生成一个隐藏文件夹 <strong>.git</strong>  不要去修改这个文件夹下的任意东西。</p><p>git仓库会分成三个区</p><p><strong>工作区</strong>：我们书写代码的地方，工作的目录就叫工作区。</p><p><strong>暂存区</strong>：暂时存储的区域，在git中，代码无法直接从工作区提交到仓库区，而是需要先从工作区添加到暂存区，然后才能从暂存区提交到仓库区。暂存区的目的是避免误操作。</p><p><strong>本地仓库区</strong>：将保存在暂存区域的内容永久转储到 Git 仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本。</p><h3 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h3><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><ul><li>作用：初始化git仓库，想要使用git对某个项目进行管理，需要<code>git init</code>进行初始化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库， 在当前目录下生成一个隐藏文件夹.git</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><ul><li>作用：将文件由 <code>工作区</code> 添加到 <code>暂存区</code>，在git中，文件无法直接从工作区直接添加到仓库区，必须先从工作区添加到暂存区，再从暂存区添加到仓库区。</li><li>命令：<code>git add 文件名/目录名</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将index.html添加到暂存区</span></span><br><span class="line">git add index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将css目录下所有的文件添加到暂存区</span></span><br><span class="line">git add css</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下所有的js文件添加到暂存区</span></span><br><span class="line">git add *.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录下所有的文件</span></span><br><span class="line">git add .</span><br><span class="line">git add -A</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>作用：将文件由 暂存区 添加到 仓库区，生成版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件从暂存区提交到仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是一个已经暂存过的文件，可以快速提交，如果是未追踪的文件，那么命令将不生效。</span></span><br><span class="line">git commit -a -m <span class="string">&#x27;提交说明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改最近的一次提交说明， 如果提交说明不小心输错了，可以使用这个命令</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;提交说明&quot;</span></span><br></pre></td></tr></table></figure><h4 id="git-config配置"><a href="#git-config配置" class="headerlink" title="git config配置"></a>git config配置</h4><p>如果是第一次提交，需要配置提交者信息，推荐和公司邮箱一致（可以用QQ邮箱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git config  user.name 你的目标用户名</span></span><br><span class="line"><span class="comment"># git config  user.email 你的目标邮箱名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用--global参数，配置全局的用户名和邮箱，只需要配置一次即可</span></span><br><span class="line">git config  --global user.name jepson</span><br><span class="line">git config  --global user.email jepsonpp@qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消配置</span></span><br><span class="line">git config --<span class="built_in">unset</span> --global user.name</span><br><span class="line">git config --<span class="built_in">unset</span> --global user.email </span><br></pre></td></tr></table></figure><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><ul><li><p>作用：查看文件的状态</p></li><li><p>命令：<code>git status</code> </p><ul><li>红色：表示工作区中的文件需要提交</li><li>绿色：表示暂存区中的文件需要提交</li></ul></li><li><p>命令：<code>git stauts -s</code> 简化日志输出格式</p></li></ul><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><ul><li>作用：查看提交日志</li><li><code>git log</code> 查看提交的日志</li><li><code>git log --oneline</code> 简洁的日志信息</li></ul><p><img src="/assets%5Cgit01.png" alt="0"></p><h3 id="git重置"><a href="#git重置" class="headerlink" title="git重置"></a>git重置</h3><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><ul><li><p>作用：版本回退，将代码恢复到已经提交的某一个版本中。</p></li><li><p><code>git reset --hard 版本号</code> 将代码回退到某个指定的版本(版本号只要有前几位即可)</p></li><li><p><code>git reset --hard head~1</code>将版本回退到上一次提交</p><ul><li>~1:上一次提交</li><li>~2:上上次提交</li><li>~0:当前提交</li></ul></li><li><p>当使用了<code>git reset</code>命令后，版本会回退，使用<code>git log</code>只能看到当前版本之前的信息。使用<code>git reflog</code>可以查看所有的版本信息</p></li></ul><h3 id="git忽视文件"><a href="#git忽视文件" class="headerlink" title="git忽视文件"></a>git忽视文件</h3><blockquote><p>在仓库中，有些文件是不想被git管理的，比如数据的配置密码、写代码的一些思路，node_modules等。git可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了。</p></blockquote><ul><li>在仓库的根目录创建一个<code>.gitignore</code>的文件，文件名是固定的。</li><li>将不需要被git管理的文件路径添加到<code>.gitignore</code>中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽视idea.txt文件</span></span><br><span class="line">idea.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css下的index.js文件</span></span><br><span class="line">css/index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css下的所有的js文件</span></span><br><span class="line">css/*.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css文件夹</span></span><br><span class="line">css</span><br></pre></td></tr></table></figure><h2 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h2><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p><p><img src="/./assets/fenzhi.png"></p><h3 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a>为什么要有分支？</h3><ul><li>如果你要开发一个新的功能，需要2周时间，第一周你只能写50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li><li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li></ul><h3 id="git分支命令"><a href="#git分支命令" class="headerlink" title="git分支命令"></a>git分支命令</h3><blockquote><p>可以保证功能开发的独立性。</p><p>在git中，分支实质上仅仅是一个<strong>指针</strong>，每次代码提交后，这个分支指针就会向后移动，保证一直指向最后一次提交的的版本。git中使用HEAD指向当前分支</p><p>注意：git 第一次提交时，就有一个<strong>mster</strong>的主分支(默认生成)，指向第一个提交版本。</p><p><strong>master</strong> 不参与过程开发</p></blockquote><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><ul><li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与当前分支的内容完全相同。</li><li>git在第一次提交时，就有了一个叫<code>master</code>的主分支。</li><li><code>git branch dev</code>，创建了一个叫做dev的分支</li></ul><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><ul><li><code>git branch</code>可以查看所有的分支，</li><li>在当前分支的前面会有一个<code>*</code></li><li>在git中，有一个特殊指针<code>HEAD</code>,永远会指向当前分支</li></ul><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><ul><li><code>git checkout 分支名称</code>切换分支  HEAD指针指向了另一个分支</li><li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li><li>提交代码时，会生产版本号，当前分支会指向最新的版本号。</li></ul><h4 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h4><ul><li><code>git checkout -b 分支名称</code> 创建并切换分支</li><li>切换分支会做两件事情<ul><li>创建一个新分支</li><li>把head指针指向当前的分支</li></ul></li></ul><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><ul><li><code>git branch -d 分支名称</code> 可以删除分支</li><li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li><li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li></ul><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><ul><li>分支虽然能保证开发的独立性，但终究要合并代码。</li><li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li><li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li><li><a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">分支合并</a></li></ul><h3 id="git合并冲突"><a href="#git合并冲突" class="headerlink" title="git合并冲突"></a>git合并冲突</h3><ul><li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li><li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li><li>工作中必然会遇到分支冲突！手动处理冲突，重新提交即可。</li><li>CONFLICT</li></ul><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h3><ul><li><strong>接口路径地址</strong>：    <a href="http://ajax-api.itheima.net/">http://ajax-api.itheima.net/</a></li></ul><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><ol><li>基于模板，初始化仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ol start="2"><li>提交到暂存区</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;初始化仓库&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建develop分支</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop</span><br></pre></td></tr></table></figure><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><h4 id="bootstrap轻提示-测试"><a href="#bootstrap轻提示-测试" class="headerlink" title="bootstrap轻提示 - 测试"></a>bootstrap轻提示 - 测试</h4><p>官网地址：<a href="https://v5.bootcss.com/docs/components/toasts/">https://v5.bootcss.com/docs/components/toasts/</a></p><ol><li>准备结构,  必须有 <code>toast</code> 类</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;toast&quot;</span>&gt;我是轻提示&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>引包 js 和 css</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;./bootstrap/bootstrap.min.css&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./bootstrap/bootstrap-icons.css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./bootstrap/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写js代码实例化</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bootstrap轻提示</span></span><br><span class="line"><span class="keyword">const</span> toastBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> toast = <span class="keyword">new</span> bootstrap.<span class="title class_">Toast</span>(toastBox, &#123;</span><br><span class="line">  <span class="attr">animation</span>: <span class="literal">true</span>, <span class="comment">// 开启过渡动画</span></span><br><span class="line">  <span class="attr">autohide</span>: <span class="literal">true</span>, <span class="comment">// 开启自动隐藏</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">3000</span> <span class="comment">// 3000ms后自动隐藏</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">toast.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure><h4 id="bootstrap轻提示-应用"><a href="#bootstrap轻提示-应用" class="headerlink" title="bootstrap轻提示 - 应用"></a>bootstrap轻提示 - 应用</h4><ol><li>准备结构（已准备）</li><li>引包（已引入）</li><li>编写js代码</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 放到公共的 common.js</span></span><br><span class="line"><span class="comment">// bootstrap轻提示 封装轻提示函数 tip </span></span><br><span class="line"><span class="keyword">const</span> toastBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myToast&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> toast = <span class="keyword">new</span> bootstrap.<span class="title class_">Toast</span>(toastBox, &#123;</span><br><span class="line">  <span class="attr">animation</span>: <span class="literal">true</span>, <span class="comment">// 开启过渡动画</span></span><br><span class="line">  <span class="attr">autohide</span>: <span class="literal">true</span>, <span class="comment">// 开启自动隐藏</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">3000</span> <span class="comment">// 3000ms后自动隐藏</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">tip</span> = (<span class="params">msg</span>) =&gt; &#123;</span><br><span class="line">  toastBox.<span class="title function_">querySelector</span>(<span class="string">&#x27;.toast-body&#x27;</span>).<span class="property">innerHTML</span> = msg</span><br><span class="line">  toast.<span class="title function_">show</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// === 测试代码 ===</span></span><br><span class="line"><span class="title function_">tip</span>(<span class="string">&#x27;请输入用户名&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="表单数据收集-测试"><a href="#表单数据收集-测试" class="headerlink" title="表单数据收集 - 测试"></a>表单数据收集 - 测试</h4><p>文档地址：<a href="https://www.npmjs.com/package/form-serialize">https://www.npmjs.com/package/form-serialize</a></p><ol><li>准备form表单, 表单元素需要添加 name</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./lib/form-serialize.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>注册事件，收集表单信息</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#form&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">serialize</span>(form)) <span class="comment">//键值对字符串格式</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">serialize</span>(form, &#123; <span class="attr">hash</span>: <span class="literal">true</span> &#125;)) <span class="comment">//js对象格式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="表单数据收集-应用"><a href="#表单数据收集-应用" class="headerlink" title="表单数据收集 - 应用"></a>表单数据收集 - 应用</h4><ol><li>准备form表单 (页面已准备)</li><li>引包 （已引入）</li><li>注册事件，收集表单信息</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn-register&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">serialize</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>), &#123; <span class="attr">hash</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="注册逻辑实现"><a href="#注册逻辑实现" class="headerlink" title="注册逻辑实现"></a>注册逻辑实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册逻辑!!!!!!</span></span><br><span class="line">        <span class="comment">//1.配置基地址</span></span><br><span class="line">        <span class="comment">//2.注册点击事件，收集表单数据</span></span><br><span class="line">        <span class="comment">//3.非空校验，长度校验</span></span><br><span class="line">        <span class="comment">//4.ajax发送请求</span></span><br><span class="line">        <span class="comment">//5.处理响应</span></span><br></pre></td></tr></table></figure><ol><li>common.js 配置请求基地址</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://ajax-api.itheima.net&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>非空检验后，请求注册，处理异常提示</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">btnRegister.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 收集表单数据</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">serialize</span>(form, &#123; <span class="attr">hash</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 非空校验，长度校验</span></span><br><span class="line">  <span class="keyword">if</span> (!data.<span class="property">username</span> || data.<span class="property">username</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;用户名不能为空&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!data.<span class="property">password</span> || data.<span class="property">password</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;密码不能为空&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">password</span>.<span class="property">length</span> &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;密码的长度不能小于 6 位&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送请求 await 只会等待成功的结果，如果要处理失败，需要try catch</span></span><br><span class="line">  <span class="comment">//try并不是只能捕获请求的错误，平时代码的错误也会被捕获到，需要在catch中打印错误，否则看不到错误</span></span><br><span class="line">  <span class="comment">//js是单线程的，一旦出错，会中断程序</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, data)</span><br><span class="line">    <span class="title function_">tip</span>(<span class="string">&#x27;注册成功&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span> <span class="comment">// 注册成功跳转登录</span></span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// console.dir(e)  //以对象的方式打印一些错误信息，默认错误信息只展示文本   //所有的错误信息，一律使用dir打印</span></span><br><span class="line">    <span class="comment">// 状态码409, 表示用户名已存在</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">response</span>.<span class="property">status</span> === <span class="number">409</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">tip</span>(e.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">tip</span>(<span class="string">&#x27;注册失败，服务器繁忙&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>代码提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;注册功能完成&#x27;</span><br></pre></td></tr></table></figure><h3 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h3><p>登录的代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn-login&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">serialize</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>), &#123; <span class="attr">hash</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="comment">// 非空校验</span></span><br><span class="line">  <span class="keyword">if</span> (!data.<span class="property">username</span> || data.<span class="property">username</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;用户名不能为空&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!data.<span class="property">password</span> || data.<span class="property">password</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;密码不能为空&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">password</span>.<span class="property">length</span> &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;密码的长度不能小于6位&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, data)</span><br><span class="line">    <span class="title function_">tip</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">tip</span>(<span class="string">&#x27;用户名或者密码错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>代码提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;登录功能完成&#x27;</span><br></pre></td></tr></table></figure><h1 id="二：页面访问控制-远程仓库"><a href="#二：页面访问控制-远程仓库" class="headerlink" title="二：页面访问控制&amp;远程仓库"></a>二：页面访问控制&amp;远程仓库</h1><h2 id="页面访问权限控制"><a href="#页面访问权限控制" class="headerlink" title="页面访问权限控制"></a>页面访问权限控制</h2><h3 id="什么是jwt身份认证"><a href="#什么是jwt身份认证" class="headerlink" title="什么是jwt身份认证"></a>什么是jwt身份认证</h3><blockquote><p><strong>json web token</strong></p></blockquote><p>在前后端分离模式的开发中，服务器如何知道来访者的身份呢？</p><ul><li>在登录后，服务器会响应给用户一个  令牌 （token）：包含身份信息的 字符串</li><li>令牌中会包括该用户的id等唯一标识</li><li>浏览器收到令牌后，自己保存</li><li>下次请求其他接口时，（在请求头中）携带这个令牌去请求</li><li>这样服务器就知道来访者的身份了，服务器就会为该用户开发接口的访问权限，并处理该用户的数据</li></ul><p><img src="/assets/image-20211106094103312.png" alt="image-20211106094103312"></p><blockquote><p>登录后：要将<strong>token</strong>保存到本地存储中了。顺带个人信息也存一下，用于回显。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn-login&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">serialize</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>), &#123; <span class="attr">hash</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="comment">// 非空校验</span></span><br><span class="line">  <span class="keyword">if</span> (!data.<span class="property">username</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;请输入用户名&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!data.<span class="property">password</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;请输入密码&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">password</span>.<span class="property">length</span> &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="title function_">tip</span>(<span class="string">&#x27;密码的长度不能小于6位&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, data)</span><br><span class="line">    <span class="comment">//console.log(res)</span></span><br><span class="line">    <span class="comment">//将个人信息 和 token令牌字符串，都存到本地</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user-token&#x27;</span>, res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user-name&#x27;</span>, res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">username</span>)</span><br><span class="line">      </span><br><span class="line">    <span class="title function_">tip</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">tip</span>(<span class="string">&#x27;用户名或者密码错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>小结：</p><ol><li>什么是jwt？ 是一个基于 <strong>token令牌</strong> 的身份认证机制！</li><li>登录请求后，后台返回token，前端该如何操作？  将token存储与本地，下次请求时在请求头携带。</li><li>未登录的用户可以直接访问首页吗？ 不可以</li><li>如何判断有没有登录？ 判断是否有 token 令牌</li></ol><h3 id="页面访问拦截"><a href="#页面访问拦截" class="headerlink" title="页面访问拦截"></a>页面访问拦截</h3><blockquote><p>核心思路：判断 token 是否存在</p></blockquote><blockquote><p>有token，允许访问，没有token，拦截到登录</p></blockquote><p>浏览器端，可以通过合理使用令牌，控制页面的访问权限。</p><p>比如，用户默认只能访问登录页，如果不登录就不能访问首页，怎么做？</p><p><img src="/assets/image-20211107100520701.png" alt="image-20211107100520701"></p><p><strong>登录拦截</strong>：判断本地存储是否有token, 没有token拦截到登录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地存储有token，则说明用户登录了；没有token，则说明用户没有登录，不允许访问首页 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--一进来，结构都不管，先验证有没有令牌，有令牌才考虑渲染  写在index最上面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user-token&#x27;</span>) === <span class="literal">null</span>) location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>上述判断只能判断token有没有，但不能判断token的真假</code>，所以将来需要发送Ajax请求，根据服务器响应结果再次判断</p></blockquote><blockquote><p>前端只能判断有没有token，无法界定真假后端是能知道真假的，所以将来我们请求后端后，需要对响应结果做判断 （后续会实现）</p></blockquote><p><strong>代码提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;页面访问拦截完成&#x27;</span><br></pre></td></tr></table></figure><h3 id="显示用户名称和退出登录"><a href="#显示用户名称和退出登录" class="headerlink" title="显示用户名称和退出登录"></a>显示用户名称和退出登录</h3><p><code>common.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示用户名称和退出登录</span></span><br><span class="line"><span class="keyword">const</span> userName = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.navbar .font-weight-bold&#x27;</span>) <span class="comment">//头像账号 Admin</span></span><br><span class="line"><span class="keyword">const</span> logout = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#logout&#x27;</span>)  <span class="comment">//退出按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录页或注册页，没有个人信息的标签，无需展示名字</span></span><br><span class="line"><span class="keyword">if</span> (userName) &#123;</span><br><span class="line">  userName.<span class="property">innerHTML</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user-name&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logout) &#123;</span><br><span class="line">  logout.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user-token&#x27;</span>)</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user-name&#x27;</span>)</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h2><h3 id="请求接口-401-错误解决"><a href="#请求接口-401-错误解决" class="headerlink" title="请求接口 401 错误解决"></a>请求接口 401 错误解决</h3><p>在首页获取后台统计数据，发现401</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOMContentLoaded 当初始的 HTML 文档被完全加载和解析完成之后,DOMContentLoaded 事件被触发</span></span><br><span class="line"><span class="comment">// 而无需等待样式表、图像和子框架的完成加载</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//保证dom内容是加载完了，不等待图片css资源的加载，性能高</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/dashboard&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//load事件：等待我们的所有的结构以及样式表、图像和子框架的完成加载</span></span><br><span class="line"><span class="comment">//load事件 和 DOMContentLoaded事件 哪个执行的快？ DOMContentLoaded加载的快</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220514180455680.png" alt="image-20220514180455680"></p><p>原因：</p><ol><li>后台 接口  需要进行身份认证，请求时，需要在请求头中携带 token</li><li>未携带token，或token过期，后台都会返回<strong>401</strong>！！！</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user-token&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/dashboard&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">//配置请求头,如果不携带请求头，后台返回的状态码是 401  身份认证失败（没token，token失效）</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但其他接口是否也需要携带token呢？每次都请求时手动携带？</p><h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><blockquote><p>axios请求拦截器：在所有axios请求 发送出去 之前，都会 先经过请求拦截器</p></blockquote><blockquote><p>应用场景：统一配置请求头令牌token。</p></blockquote><blockquote><p>请求拦截器 和 响应拦截器 直接从官网cv!  axios中文网 &#x3D;&gt; 文档 &#x3D;&gt; 拦截器</p></blockquote><p>利用请求拦截器,  本地读取token， 设置给请求头</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">//如果有 token 的情况，应该将 token 携带在请求头中  （在拦截器中统一操作）</span></span><br><span class="line">   </span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user-token&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="comment">//如果有token，需要携带在请求头</span></span><br><span class="line">        <span class="comment">//console.log(config) //config就是请求</span></span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = token</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> config;  <span class="comment">//这里返回的是请求的配置项，不能删除！</span></span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>每个请求都要携带token，进行请求，如何操作？</li></ul><p>​       利用请求拦截器，统一携带token</p><h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><blockquote><p>axios响应拦截器：在axios响应被.then&#x2F;.catch处理之前，会先经过响应拦截器！</p></blockquote><blockquote><p>应用场景：1. 统一处理错误响应（比如：token过期、 服务器错误）      </p><ol start="2"><li>数据剥离 （去掉axios的默认一层data） 简化后台数据的访问层级</li></ol></blockquote><ol><li>token时效两小时，修改本地token，发现401 （模拟token失效）</li><li>处理401状态码， 清除本地信息，跳转登录</li><li>分析数据层级，进行数据剥离</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么 </span></span><br><span class="line">      <span class="comment">//正常响应走上面</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>  <span class="comment">//.data去掉外面包的那一层 //剥离数据!!!!!!!!!!!!!数据剥离后，更新login逻辑</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果控制台报响应的错误，都是走错误响应 4xx 5xx</span></span><br><span class="line">      <span class="comment">//console.log(dir) //有错误一律使用dir 打印!!!</span></span><br><span class="line">      <span class="comment">// 对响应错误做点什么 //处理响应错误</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">       <span class="comment">//token过期，需要将token信息移除，个人信息移除，拦截到登录，重新登陆</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user-token&#x27;</span>)</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user-name&#x27;</span>)</span><br><span class="line">      location.<span class="property">href</span> = <span class="string">&#x27;./login.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li>数据剥离后，更新login逻辑</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn-login&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, data)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">//登录成功 少了最外面的一层</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user-token&#x27;</span>, res.<span class="property">data</span>.<span class="property">token</span>)  <span class="comment">//得去掉一个data</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user-name&#x27;</span>, res.<span class="property">data</span>.<span class="property">username</span>)</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">tip</span>(<span class="string">&#x27;用户名密码错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>代码提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;axios拦截器添加完成&#x27;</span><br></pre></td></tr></table></figure><h2 id="git远程仓库"><a href="#git远程仓库" class="headerlink" title="git远程仓库"></a>git远程仓库</h2><blockquote><p>远程仓库：托管在因特网或其他网络中，你的项目的版本库。支持多人协作，共同管理远程仓库。</p></blockquote><blockquote><p>解决了 1. 仓库备份（远程备份不易丢失）2.多人协作（远程仓库同步代码）</p></blockquote><h3 id="github、gitee、gitlab"><a href="#github、gitee、gitlab" class="headerlink" title="github、gitee、gitlab"></a>github、gitee、gitlab</h3><ul><li>git是一个版本控制工具。</li><li>github是一个代码托管平台，开源社区，是git的一个远程代码仓库平台。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</span></span><br><span class="line"><span class="comment">//2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</span></span><br><span class="line"><span class="comment">//3. 创建git项目时，不能有中文。</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/">github官网</a>： 国外开源 git 代码托管平台     全球最大的开源项目托管平台 - 免费，国内访问受限，不稳定</p><p><a href="https://git.oschina.net/">开源中国-git</a>:  国内开源 git 代码托管平台     码云，国产开源项目托管平台。免费，访问速度快、纯中文界面、使用友好</p><p><a href="https://about.gitlab.com/">gitlab</a>：企业级 git 代码托管平台      对代码私有性支持较好，企业用户多, 一般收费，允许自建 git 服务器</p><h3 id="码云创建远程仓库"><a href="#码云创建远程仓库" class="headerlink" title="码云创建远程仓库"></a>码云创建远程仓库</h3><ol><li><p>新建右上角仓库</p><p><img src="/assets/image-20220514184557788.png" alt="image-20220514184557788"></p></li><li><p>输入仓库名  <strong>不勾初始化！！！</strong></p><p><img src="/assets/image-20220514184702951.png" alt="image-20220514184702951"></p></li><li><p>点击创建</p></li></ol><p><img src="/assets/image-20220514184807839.png" alt="image-20220514184807839"></p><h3 id="SSH免密码登陆"><a href="#SSH免密码登陆" class="headerlink" title="SSH免密码登陆"></a>SSH免密码登陆</h3><p>git支持多种数据传输协议：</p><ul><li>https协议：<code>https://gitee.com/jepsonpp/test.git</code>  需要输入用户名和密码</li><li>ssh协议：<code>git@gitee.com:jepsonpp/test.git</code>   需要配置密钥，可以免密码登录</li></ul><p>注意：在实际公司开发中，ssh 的方式更为常见！更加安全可靠！</p><p>每次push或者pull代码，如果使用https协议，那么都需要输入用户名和密码进行身份的确认，非常麻烦。</p><ul><li>github为了账户的安全，需要对每一次push请求都要验证用户的身份，只有合法的用户才可以push</li><li>使用ssh协议，配置ssh免密码，可以做到免密码往github推送代码</li></ul><p>ssh密钥得作用：</p><ul><li>ssh key 的<strong>作用</strong>：实现本地仓库和 gitee平台 之间免登录的加密数据传输。</li><li>ssh key 由<strong>两部分组成</strong>，分别是： （本地生成公钥和私钥）<ol><li>id_rsa（私钥文件，存放于客户端的电脑中即可）  </li><li>id_rsa.pub（公钥文件，需要配置到 gitee平台中）</li></ol></li><li>私钥加密的信息，只能通过公钥解密。公钥加密的信息，只能通过私钥解密。安全性高。</li></ul><h3 id="SSH免密码登录配置"><a href="#SSH免密码登录配置" class="headerlink" title="SSH免密码登录配置"></a>SSH免密码登录配置</h3><ul><li><p>1 .打开Git Bash ， 创建SSH Key：<code>ssh-keygen -t rsa</code>    （注意：这些命令需要在bash中敲）</p></li><li><ol start="2"><li>连续敲三次回车，在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹</li></ol></li><li><ol start="3"><li>文件夹中有两个文件：</li></ol><ul><li>私钥：<code>id_rsa</code></li><li>公钥：<code>id_rsa.pub</code></li></ul></li><li><ol start="4"><li>在 <code>码云-&gt; 设置 -&gt; SSH公钥</code>页面中</li></ol></li><li><ol start="5"><li>粘贴 公钥 <code>id_rsa.pub</code> (用记事本打开)里面得文本内容到 对应文本框中， 添加公钥</li></ol><p>tips: mac获取公钥 <a href="https://juejin.cn/post/6844904169191522317">https://juejin.cn/post/6844904169191522317</a></p></li></ul><h3 id="github-生成ssh-key"><a href="#github-生成ssh-key" class="headerlink" title="github 生成ssh key"></a>github 生成ssh key</h3><ol><li>打开 Git Bash</li><li>ssh-keygen - t rsa -b 4096 -C “<a href="mailto:&#121;&#111;&#117;&#114;&#95;&#x65;&#109;&#97;&#105;&#108;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;">&#121;&#111;&#117;&#114;&#95;&#x65;&#109;&#97;&#105;&#108;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;</a>“</li><li>连续敲击三次回车，可在  <code>C:\User\用户名文件夹\.ssh</code> 的目录生成密钥文件</li></ol><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><ul><li>作用：将本地仓库中代码提交到远程仓库</li><li><code>git push 仓库地址 分支名</code>   将代码提交到远程仓库对应分支</li><li>例子：<code>git push git@gitee.com:ccv-engineer/myfirst.git master</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">如果本地分支名与远程分支名相同，则可以省略冒号</span><br></pre></td></tr></table></figure><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>每次push操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给远程仓库设置一个别名</span></span><br><span class="line">git remote add 仓库别名 仓库地址</span><br><span class="line">git remote add origin git@gitee.com:ccv-engineer/myfirst.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除origin这个别名</span></span><br><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><p>演示命令：<code>git push -u 仓库别名 分支名</code></p><p>tips：-u 可以记录push到远端分支的默认值，将来 git push 即可</p><p>首次需要加一次 -u ，后续好处是，设置了提交远程的默认值，将来只要 git push 即可</p><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><ul><li>作用：克隆远程仓库的代码到本地</li><li>git clone [远程仓库地址]</li><li><code>git clone git@gitee.com:ccv-engineer/myfirst.git</code>会在本地新建一个<code>test</code>文件夹</li><li>在test中包含了一个<code>.git</code>目录，用于保存所有的版本记录，同时test文件中还有最新的代码，可以进行后续的开发。</li><li>git克隆默认会使用远程仓库的项目名字，也可以自己指定。命令：<code>git clone [远程仓库地址] [本地项目名（文件夹名）]</code></li></ul><p>tips: <code>git branch -a</code>  查看分支</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><ul><li><p>作用：拉取更新，将远程的代码下载合并到本地的分支</p></li><li><p><code>通常在push前，需要先pull一次。（git push 之前一般先 git pull 一下）</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取远程仓库的更新，并且与本地的分支进行合并</span></span><br><span class="line">git pull</span><br><span class="line">git pull &lt;远程主机名&gt; &lt;分支名&gt;</span><br><span class="line">git pull origin login  <span class="comment"># 获取远程分支的更新，并更新合并到login分支</span></span><br></pre></td></tr></table></figure><h3 id="下载远端分支本地"><a href="#下载远端分支本地" class="headerlink" title="下载远端分支本地"></a>下载远端分支本地</h3><p><code>checkout</code> 的 <code>-t </code>(或) <code>--track </code>)选项仅在创建新的(本地)分支时使用</p><p>先在本地建立一个分支，并切换到该分支，然后从远程分支上同步代码到该分支上，并建立关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -t origin/分支名     #远端分支名和本地新建分支名同名</span><br></pre></td></tr></table></figure><p><strong>后续拉取该分支的更新，就是切换到该分支，git  pull  origin 分支名</strong></p><p>小技巧：这个命令不好记，可以利用vscode快速切换拉取</p><h3 id="git-remote-show"><a href="#git-remote-show" class="headerlink" title="git remote show"></a>git remote show</h3><blockquote><p>查看远程仓库所有的分支列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show 远程仓库名称</span><br></pre></td></tr></table></figure><h3 id="追踪分支"><a href="#追踪分支" class="headerlink" title="追踪分支"></a>追踪分支</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从远程仓库中，把对应的远程分支下载到本地仓库，保持本地分支和远程分支名相同</span></span><br><span class="line">git checkout 远程分支的名称</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：git checkout pay</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名</span></span><br><span class="line">git checkout -b 本地分支名称 远程仓库名称/远程分支名称</span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除远程仓库中，指定名称的远程分支</span></span><br><span class="line">git push 远程仓库名称 --<span class="keyword">delete</span> 远程分支名称</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line">git push origin --<span class="keyword">delete</span> login</span><br></pre></td></tr></table></figure><h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><ol><li>将数据可视化项目上传到码云仓库,  主分支与开发分支均要上传</li></ol><p>  注意：要推哪个分支，先切换到那个分支再推送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><ol start="2"><li>删除本地项目，通过克隆把远端仓库项目拉取下来，切换到develop分支</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br><span class="line"></span><br><span class="line">git checkout -t origin/develop</span><br></pre></td></tr></table></figure><h1 id="Echarts数据可视化"><a href="#Echarts数据可视化" class="headerlink" title="Echarts数据可视化"></a>Echarts数据可视化</h1><blockquote><p> 借助图形手段, 清晰传达信息的表现方式</p><p> 把枯燥的数字数据, 转换成图形, 数据特点更突出</p></blockquote><h2 id="Echarts-入门"><a href="#Echarts-入门" class="headerlink" title="Echarts 入门"></a>Echarts 入门</h2><h3 id="Echarts-介绍"><a href="#Echarts-介绍" class="headerlink" title="Echarts-介绍"></a>Echarts-介绍</h3><blockquote><p>ECharts，一个使用 JavaScript 实现的<strong>开源可视化图表库</strong>，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8&#x2F;9&#x2F;10&#x2F;11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p></blockquote><p>大白话：</p><ul><li>是一个JS插件</li><li>性能好可流畅运行PC与移动设备</li><li>兼容主流浏览器</li><li>提供很多常用图表，且可<strong>定制</strong>。</li></ul><h3 id="Echarts-体验"><a href="#Echarts-体验" class="headerlink" title="Echarts-体验"></a>Echarts-体验</h3><p>官方教程：<a href="https://echarts.apache.org/handbook/zh/get-started/">快速上手ECharts</a></p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>下载echarts  <a href="https://echarts.apache.org/zh/download.html">https://echarts.apache.org/zh/download.html</a></li><li>引入echarts</li><li>准备一个具备大小（宽高）的 DOM</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>初始化echart实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#main&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>指定图表的配置项和数据 (根据文档提供示例找到option)  CV</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定图表的配置项和数据 CV</span></span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">legend</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用刚指定的配置项和数据显示图表</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myChart.<span class="title function_">setOption</span>(option)</span><br></pre></td></tr></table></figure><p>使用步骤：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 1.具备宽高的容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:600px; height:400px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.初始化 echarts 实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#main&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//准备配置项 option  CV</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">series</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>],</span></span><br><span class="line"><span class="language-javascript">            &#125;, ],</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.基于配置项，渲染图表</span></span></span><br><span class="line"><span class="language-javascript">    myChart.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="示例配置项-文档查看方式"><a href="#示例配置项-文档查看方式" class="headerlink" title="示例配置项&amp;文档查看方式"></a>示例配置项&amp;文档查看方式</h4><p>上节我们绘制了一个简单的柱状图图表，本节教大家如何通过文档中查看<strong>配置项option</strong>的一些说明</p><p>讲解内容:  通过文档找到刚刚完成的柱状图配置项对应的一些配置的说明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;  <span class="comment">// 标题组件</span></span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span>, <span class="comment">// 主标题文本</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;&#125;, <span class="comment">// 提示框组件</span></span><br><span class="line">    <span class="attr">legend</span>: &#123;  <span class="comment">// 图例组件</span></span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;销量2&#x27;</span>]  <span class="comment">// 图例的数据数组,对应series里的name  data中的数据标识，必须和series数据项的name对应</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: &#123; <span class="comment">// 直角坐标系 grid 中的 x 轴</span></span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;高跟鞋&quot;</span>, <span class="string">&quot;袜子&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123; <span class="comment">// 直角坐标系 grid 中的 y 轴, y轴里的data没有指定会自动从series.data里获取</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图表的数据项</span></span><br><span class="line">    <span class="attr">series</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;销量2&#x27;</span>, <span class="comment">// 系列名称，用于tooltip的显示，legend 的图例筛选</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,  <span class="comment">// 柱状图  图表的类型</span></span><br><span class="line">        <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>] <span class="comment">// 系列中的数据内容数组。数组项通常为具体的数据项</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="基本配置项"><a href="#基本配置项" class="headerlink" title="基本配置项"></a>基本配置项</h4><ul><li>series：系列列表（图标的数据项）。每个系列通过 <code>type</code> 决定（bar：柱状图，line：折线图，pie：饼图）自己的图表类型</li><li>xAxis：直角坐标系 grid 中的 x 轴数据  type：category：离散型刻度</li><li>axisLine : x轴轴线</li><li>axisLabel：x轴刻度 （一月、二月、三月…）</li><li>yAxis：直角坐标系 grid 中的 y 轴数据   type：value ：值类型刻度</li><li>splitLine:  分隔线</li><li>grid：直角坐标系内绘图网格。   containLabel: true 绘图网格，是否包含刻度</li><li>title：标题组件 <ol><li>text：主标题文本</li><li>textStyle: 文字样式   color  fontSize</li></ol></li><li>tooltip：提示框组件 (鼠标划上去的提示)  trigger:提示触发显示的方式  axis  ：坐标轴触发</li><li>legend：图例组件   data中的数据标识，必须和下面的数据项series 的 name对应</li><li>color：调色盘颜色列表</li><li>toolbox：工具盒子  feature：{  saveAsImage：{} &#x2F;&#x2F;是否保存图片 }</li></ul><h2 id="数据看板"><a href="#数据看板" class="headerlink" title="数据看板"></a>数据看板</h2><h3 id="展示概览"><a href="#展示概览" class="headerlink" title="展示概览"></a>展示概览</h3><p><img src="/assets/image-20220515162133081.png" alt="image-20220515162133081"></p><p><code>js/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本思路：</span></span><br><span class="line"><span class="comment">//1. 分析数据</span></span><br><span class="line"><span class="comment">//2. 遍历数据</span></span><br><span class="line"><span class="comment">//3. 获取元素，设置内容</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/dashboard&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)  <span class="comment">//服务器响应回来的数据</span></span><br><span class="line">    <span class="comment">//console.log(data.overview) 数组 装的数据  // &#123;salary: 16453, student_count: 80, age: 24, group_count: 8&#125;</span></span><br><span class="line">    <span class="comment">//遍历overview 的数据，来渲染</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> data.<span class="property">overview</span>) &#123;</span><br><span class="line">      <span class="comment">//key 键</span></span><br><span class="line">      <span class="comment">//data.overview[key] 值</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`[name=<span class="subst">$&#123;key&#125;</span>]`</span>).<span class="property">innerHTML</span> = data.<span class="property">overview</span>[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="薪资走势"><a href="#薪资走势" class="headerlink" title="薪资走势"></a>薪资走势</h3><p><img src="/assets/image-20220525200044012.png" alt="image-20220525200044012"></p><p>基本步骤：</p><ol><li>官网找到相似案例</li><li>按照需求定制图表</li></ol><p>相似案例：<a href="https://echarts.apache.org/examples/zh/editor.html?c=line-smooth">https://echarts.apache.org/examples/zh/editor.html?c=line-smooth</a></p><ul><li>基于数据，动态渲染，修改配色</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//2021全学科薪资走势</span></span><br><span class="line">  <span class="title function_">initYearChart</span>(data.<span class="property">year</span>) <span class="comment">//调用函数，把数据传输给形参</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个函数</span></span><br><span class="line"><span class="comment">//渲染2021全学科薪资走势</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initYearChart</span>(<span class="params">year</span>) &#123; <span class="comment">//接收数据</span></span><br><span class="line">    <span class="comment">//初始化 echarts 实例</span></span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#line&#x27;</span>))</span><br><span class="line">        <span class="comment">//准备配置项</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="comment">//标题组件</span></span><br><span class="line">        <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//标题是否显示</span></span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;2021全学科薪资走势&#x27;</span>, <span class="comment">//标题文本</span></span><br><span class="line">            <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">16</span> <span class="comment">//字体大小</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">left</span>: <span class="number">10</span>, <span class="comment">//距离左侧距离</span></span><br><span class="line">            <span class="attr">top</span>: <span class="number">15</span> <span class="comment">//距离顶部距离</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//x轴</span></span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="comment">//数组需要的格式 [&#x27;1月&#x27;,&#x27;2月&#x27;,&#x27;3月&#x27;,.....]</span></span><br><span class="line">            <span class="comment">//map会遍历数组，item就是数组的每一项</span></span><br><span class="line">            <span class="comment">//map会将遍历时每次 return 的值收集到一个新数组中，并返回</span></span><br><span class="line">            <span class="attr">data</span>: year.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">month</span>),</span><br><span class="line">            <span class="attr">axisLine</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//显示x轴轴线</span></span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#ccc&#x27;</span>, <span class="comment">//轴线颜色</span></span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;dashed&#x27;</span> <span class="comment">//虚线</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">axisLabel</span>: &#123; <span class="comment">//x轴刻度</span></span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#666&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//y轴</span></span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="comment">//分割线配置</span></span><br><span class="line">            <span class="attr">splitNumber</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">splitLine</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">//分割线的样式</span></span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="comment">//color: [&#x27;pink&#x27;, &#x27;skyblue&#x27;, &#x27;orange&#x27;], //线的颜色</span></span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#ccc&#x27;</span>, <span class="comment">//线的颜色</span></span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;dashed&#x27;</span> <span class="comment">//虚线</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//提示框组件</span></span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//绘图网格</span></span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">            <span class="attr">top</span>: <span class="string">&#x27;15%&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">color</span>: [&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">x2</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">colorStops</span>: [&#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#499dee&#x27;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#5b78ef&#x27;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false  如果配置成 true，则xy表示具体的坐标</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">series</span>: [&#123;</span><br><span class="line">            <span class="attr">data</span>: year.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">salary</span>),</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="comment">//symbol: &#x27;pin&#x27;, //标记的形状图形</span></span><br><span class="line">            <span class="attr">symbolSize</span>: <span class="number">10</span>, <span class="comment">//标记图形的大小</span></span><br><span class="line">            <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                <span class="attr">width</span>: <span class="number">3</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">smooth</span>: <span class="literal">true</span>, <span class="comment">//是否平滑过渡</span></span><br><span class="line">            <span class="attr">areaStyle</span>: &#123; <span class="comment">//阴影 区域填充样式</span></span><br><span class="line">                <span class="attr">color</span>: &#123; <span class="comment">// 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果                                globalCoord 为 `true`，则该四个值是绝对的像素位置</span></span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">                    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">colorStops</span>: [&#123;</span><br><span class="line">                        <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">color</span>: <span class="string">&#x27;rgba(146, 190, 244)&#x27;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">color</span>: <span class="string">&#x27;rgba(255,255,255,0.1)&#x27;</span> <span class="comment">// 80% 处的颜色</span></span><br><span class="line">                    &#125;],</span><br><span class="line">                    <span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//基于配置项渲染图标</span></span><br><span class="line">    myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="薪资分布"><a href="#薪资分布" class="headerlink" title="薪资分布"></a>薪资分布</h3><p><img src="/assets/image-20220515163913480.png" alt="image-20220515163913480"></p><p>基本步骤：</p><ol><li>官网找到相似案例</li><li>按照需求定制图表</li></ol><p>相似案例：<a href="https://echarts.apache.org/examples/zh/editor.html?c=pie-borderRadius">https://echarts.apache.org/examples/zh/editor.html?c=pie-borderRadius</a></p><ul><li>基于数据，动态渲染</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 班级薪资分布图</span></span><br><span class="line">  <span class="title function_">initSalaryChart</span>(data.<span class="property">salaryData</span>)   <span class="comment">//调用函数，传入数据给形参</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initSalaryChart</span> = (<span class="params">salaryData</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//console.log(salaryData)</span></span><br><span class="line">  <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"> <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#salary&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">//准备配置项</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">title</span>: &#123; <span class="comment">//标题</span></span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;班级薪资分布&#x27;</span>,</span><br><span class="line">            <span class="attr">top</span>: <span class="number">15</span>,</span><br><span class="line">            <span class="attr">left</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">16</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//提示框</span></span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//图例</span></span><br><span class="line">        <span class="attr">legend</span>: &#123;</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;6%&#x27;</span>, <span class="comment">//居底</span></span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span> <span class="comment">//水平居中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//调色盘，修改配色  饼图从时钟12点位置，开始配色</span></span><br><span class="line">        <span class="attr">color</span>: [<span class="string">&#x27;#fda224&#x27;</span>, <span class="string">&#x27;#5097ff&#x27;</span>, <span class="string">&#x27;#39bbf9&#x27;</span>, <span class="string">&#x27;#34d39a&#x27;</span>],</span><br><span class="line">        <span class="comment">//数据项</span></span><br><span class="line">        <span class="attr">series</span>: [&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;班级薪资分布&#x27;</span>, <span class="comment">//鼠标悬停的标识名</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>, <span class="comment">//饼图的类型</span></span><br><span class="line">            <span class="attr">center</span>: [<span class="string">&#x27;50%&#x27;</span>, <span class="string">&#x27;45%&#x27;</span>], <span class="comment">//圆心坐标</span></span><br><span class="line">            <span class="attr">radius</span>: [<span class="string">&#x27;50%&#x27;</span>, <span class="string">&#x27;65%&#x27;</span>], <span class="comment">//内圆半径和外圆半径</span></span><br><span class="line">            <span class="comment">//每一项的样式</span></span><br><span class="line">            <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                <span class="attr">borderRadius</span>: <span class="number">50</span>, <span class="comment">//圆角</span></span><br><span class="line">                <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">                <span class="attr">borderWidth</span>: <span class="number">4</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">label</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span>, <span class="comment">//文字说明，默认不显示</span></span><br><span class="line">                <span class="attr">position</span>: <span class="string">&#x27;center&#x27;</span> <span class="comment">//所有的文字中间显示</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//控制文字样式效果</span></span><br><span class="line">            <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                <span class="attr">label</span>: &#123;</span><br><span class="line">                    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">                    <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">labelLine</span>: &#123; <span class="comment">//文字和item之间的线</span></span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/* data: [</span></span><br><span class="line"><span class="comment">                &#123; value: 200, name: &#x27;1万以下&#x27; &#125;,</span></span><br><span class="line"><span class="comment">                &#123; value: 735, name: &#x27;1-1.5万&#x27; &#125;,</span></span><br><span class="line"><span class="comment">                &#123; value: 300, name: &#x27;1.5-2万&#x27; &#125;,</span></span><br><span class="line"><span class="comment">                &#123; value: 500, name: &#x27;2万以上&#x27; &#125;</span></span><br><span class="line"><span class="comment">            ] */</span></span><br><span class="line">            <span class="attr">data</span>: salaryData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">name</span>: item.<span class="property">label</span>,</span><br><span class="line">                    <span class="attr">value</span>: item.<span class="property">g_count</span> + item.<span class="property">b_count</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//基于配置项渲染图标</span></span><br><span class="line">    myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="每组薪资（期望-实际）"><a href="#每组薪资（期望-实际）" class="headerlink" title="每组薪资（期望&amp;实际）"></a>每组薪资（期望&amp;实际）</h3><p><img src="/assets/image-20220516010309907.png" alt="image-20220516010309907"></p><p>基本步骤：</p><ol><li>官网找到相似案例</li><li>按照需求定制图表</li></ol><p>相似案例：<a href="https://echarts.apache.org/examples/zh/editor.html?c=bar-simple">https://echarts.apache.org/examples/zh/editor.html?c=bar-simple</a></p><p>数据动态渲染，完整代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">initGroupChart</span> = (<span class="params">groupData</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line">  <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lines&#x27;</span>))</span><br><span class="line"></span><br><span class="line">      <span class="comment">//初始化 echarts 实例</span></span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#lines&#x27;</span>))</span><br><span class="line">        <span class="comment">//准备配置项</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="number">70</span>,</span><br><span class="line">            <span class="attr">top</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="number">50</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">xAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: groupData[<span class="number">1</span>].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>),</span><br><span class="line">            <span class="attr">axisLine</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//显示x轴轴线</span></span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#ccc&#x27;</span>, <span class="comment">//轴线颜色</span></span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;dashed&#x27;</span> <span class="comment">//虚线</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">axisLabel</span>: &#123; <span class="comment">//x轴刻度</span></span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#666&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="comment">//分割线配置</span></span><br><span class="line">            <span class="attr">splitNumber</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">splitLine</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">//分割线的样式</span></span><br><span class="line">                <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                    <span class="comment">//color: [&#x27;pink&#x27;, &#x27;skyblue&#x27;, &#x27;orange&#x27;], //线的颜色</span></span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#ccc&#x27;</span>, <span class="comment">//线的颜色</span></span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;dashed&#x27;</span> <span class="comment">//虚线</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">color</span>: [&#123; <span class="comment">// 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">colorStops</span>: [&#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;rgba(61, 213, 158, 1)&#x27;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;rgba(204, 244, 229,0.6)&#x27;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">colorStops</span>: [&#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;rgba(80, 162, 238, 1)&#x27;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;rgba(205, 228, 250,0.6)&#x27;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;期望薪资&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: groupData[<span class="number">1</span>].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">hope_salary</span>),</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;实际薪资&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: groupData[<span class="number">1</span>].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">salary</span>),</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//基于配置项渲染图标</span></span><br><span class="line">    myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//每一组的薪资 点击切换功能写在这里 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小组切换展示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击切换 tab栏切换 </span></span><br><span class="line"> <span class="comment">//步骤：   //1.利用事件委托，给按钮绑定点击事件</span></span><br><span class="line">           <span class="comment">//2.先找到有btn-blue 类的盒子去掉类，再给当前点击的盒子加上 btn-blue 类</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btns&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    btns.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">//console.log(e.target)</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;BUTTON&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//找到有 btn-blue 类的盒子，干掉他（消灭别人）</span></span><br><span class="line">            btns.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn-blue&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;btn-blue&#x27;</span>)</span><br><span class="line">                <span class="comment">//给自己加上</span></span><br><span class="line">            e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;btn-blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取组号 点击的是谁拿就就是谁的组号 文本就是组号</span></span><br><span class="line">            <span class="keyword">const</span> group = e.<span class="property">target</span>.<span class="property">innerHTML</span></span><br><span class="line">                <span class="comment">//console.log(group) //拿到当前点击的组号</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">                <span class="comment">//1.修改option 配置项（修改三个配置项）</span></span><br><span class="line">            option.<span class="property">xAxis</span>.<span class="property">data</span> = groupData[group].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>)</span><br><span class="line">            option.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span> = groupData[group].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">hope_salary</span>)</span><br><span class="line">            option.<span class="property">series</span>[<span class="number">1</span>].<span class="property">data</span> = groupData[group].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">salary</span>)</span><br><span class="line">                <span class="comment">//2.重新setOption</span></span><br><span class="line">            myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="男女薪资分布"><a href="#男女薪资分布" class="headerlink" title="男女薪资分布"></a>男女薪资分布</h3><p><img src="/assets/image-20220516010447608.png" alt="image-20220516010447608">  </p><p>基本步骤：</p><ol><li>官网找到相似案例</li><li>按照需求定制图表</li></ol><p>相似案例：<a href="https://echarts.apache.org/examples/zh/editor.html?c=pie-simple">https://echarts.apache.org/examples/zh/editor.html?c=pie-simple</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//渲染男女薪资分布</span></span><br><span class="line">  <span class="title function_">initSalaryPieChart</span>(data.<span class="property">salaryData</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染男女薪资分布</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initGenderChart</span>(<span class="params">salaryData</span>) &#123;</span><br><span class="line">    <span class="comment">//初始化 echarts 实例</span></span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#gender&#x27;</span>))</span><br><span class="line">        <span class="comment">//准备配置项</span></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">        <span class="comment">//大标题</span></span><br><span class="line">        <span class="attr">title</span>: [&#123;  <span class="comment">//多个标题！！！</span></span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;男女薪资分布&#x27;</span>,</span><br><span class="line">                <span class="attr">left</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">top</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">16</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">                <span class="comment">// 可以理解为通过定位来挪位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;男生&#x27;</span>,</span><br><span class="line">                <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                <span class="attr">top</span>: <span class="string">&#x27;48%&#x27;</span>,</span><br><span class="line">                <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">12</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;女生&#x27;</span>,</span><br><span class="line">                <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                <span class="attr">top</span>: <span class="string">&#x27;88%&#x27;</span>,</span><br><span class="line">                <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="number">12</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">//提示框</span></span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//调色器</span></span><br><span class="line">        <span class="attr">color</span>: [<span class="string">&#x27;#fda224&#x27;</span>, <span class="string">&#x27;#5097ff&#x27;</span>, <span class="string">&#x27;#3abcfa&#x27;</span>, <span class="string">&#x27;#34d39a&#x27;</span>],</span><br><span class="line">        <span class="comment">//数据项</span></span><br><span class="line">        <span class="attr">series</span>: [&#123; <span class="comment">//准备两个饼图</span></span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;男生&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                <span class="attr">radius</span>: [<span class="string">&#x27;20%&#x27;</span>, <span class="string">&#x27;30%&#x27;</span>],</span><br><span class="line">                <span class="attr">center</span>: [<span class="string">&#x27;50%&#x27;</span>, <span class="string">&#x27;30%&#x27;</span>],</span><br><span class="line">                <span class="comment">/*  data: [</span></span><br><span class="line"><span class="comment">                     &#123; value: 1048, name: &#x27;Search Engine&#x27; &#125;,</span></span><br><span class="line"><span class="comment">                     &#123; value: 735, name: &#x27;Direct&#x27; &#125;,</span></span><br><span class="line"><span class="comment">                     &#123; value: 580, name: &#x27;Email&#x27; &#125;,</span></span><br><span class="line"><span class="comment">                     &#123; value: 300, name: &#x27;Video Ads&#x27; &#125;</span></span><br><span class="line"><span class="comment">                 ] */</span></span><br><span class="line">            <span class="comment">//渲染数据</span></span><br><span class="line">                <span class="attr">data</span>: salaryData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: item.<span class="property">b_count</span>,</span><br><span class="line">                        <span class="attr">name</span>: item.<span class="property">label</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="comment">//高亮</span></span><br><span class="line">                <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                    <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">                        <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;男生&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">                <span class="attr">radius</span>: [<span class="string">&#x27;20%&#x27;</span>, <span class="string">&#x27;30%&#x27;</span>],</span><br><span class="line">                <span class="attr">center</span>: [<span class="string">&#x27;50%&#x27;</span>, <span class="string">&#x27;70%&#x27;</span>],</span><br><span class="line">                <span class="comment">//渲染数据</span></span><br><span class="line">                <span class="attr">data</span>: salaryData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: item.<span class="property">g_count</span>,</span><br><span class="line">                        <span class="attr">name</span>: item.<span class="property">label</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="comment">//高亮</span></span><br><span class="line">                <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                    <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span><br><span class="line">                        <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基于配置项渲染图标</span></span><br><span class="line">    myChart.<span class="title function_">setOption</span>(option)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="籍贯分布"><a href="#籍贯分布" class="headerlink" title="籍贯分布"></a>籍贯分布</h3><p>echarts社区：<a href="https://www.makeapie.cn/echarts">https://www.makeapie.cn/echarts</a></p><p><img src="/assets/image-20220516010919943.png" alt="image-20220516010919943"></p><p>社区模板代码地址：<a href="https://www.makeapie.cn/echarts_content/xr1W9m5LOG.html">https://www.makeapie.cn/echarts_content/xr1W9m5LOG.html</a></p><p>注意：直接 CV 下面的即可</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">initMapChart</span> = (<span class="params">provinceData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> myEchart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#map&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> dataList = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;南海诸岛&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;天津&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;上海&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;重庆&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;河北&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;河南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;云南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;辽宁&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;黑龙江&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;湖南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;安徽&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;山东&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;新疆&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;江苏&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;浙江&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;江西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;湖北&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;广西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;甘肃&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;山西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;内蒙古&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;陕西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;吉林&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;福建&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;贵州&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;广东&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;青海&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;西藏&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;四川&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;宁夏&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;海南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;台湾&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;香港&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;澳门&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;籍贯分布&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">16</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">      <span class="attr">formatter</span>: <span class="string">&#x27;&#123;b&#125;: &#123;c&#125; 位学员&#x27;</span>,</span><br><span class="line">      <span class="attr">borderColor</span>: <span class="string">&#x27;transparent&#x27;</span>,</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;rgba(0,0,0,0.5)&#x27;</span>,</span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">visualMap</span>: &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">      <span class="attr">text</span>: [<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">      <span class="attr">inRange</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: [<span class="string">&#x27;#ffffff&#x27;</span>, <span class="string">&#x27;#0075F0&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="number">40</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">geo</span>: &#123;</span><br><span class="line">      <span class="attr">map</span>: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">      <span class="attr">roam</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">zoom</span>: <span class="number">1.0</span>,</span><br><span class="line">      <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">normal</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;rgba(0,0,0,0.7)&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">        <span class="attr">normal</span>: &#123;</span><br><span class="line">          <span class="attr">borderColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.2)&#x27;</span>,</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;#e0ffff&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">          <span class="attr">areaColor</span>: <span class="string">&#x27;#34D39A&#x27;</span>,</span><br><span class="line">          <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">shadowOffsetY</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">shadowBlur</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">borderWidth</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;籍贯分布&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        <span class="attr">geoIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>: dataList,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">  myEchart.<span class="title function_">setOption</span>(option)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>动态设置数据后，完整代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//渲染地图</span></span><br><span class="line">  <span class="title function_">initMapChart</span>(data.<span class="property">provinceData</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染地图</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initMapChart</span> = (<span class="params">provinceData</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> myEchart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#map&#x27;</span>))</span><br><span class="line">        <span class="comment">//console.log(provinceData)</span></span><br><span class="line">        <span class="comment">//默认数据项</span></span><br><span class="line">    <span class="keyword">const</span> dataList = [</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;南海诸岛&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;天津&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;上海&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;重庆&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;河北&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;河南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;云南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;辽宁&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;黑龙江&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;湖南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;安徽&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;山东&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;新疆&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;江苏&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;浙江&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;江西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;湖北&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;广西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;甘肃&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;山西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;内蒙古&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;陕西&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;吉林&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;福建&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;贵州&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;广东&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;青海&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;西藏&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;四川&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;宁夏&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;海南&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;台湾&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;香港&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;澳门&#x27;</span>, <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment">//provinceData 后台返回的数据项，需要将后台返回的数据项，匹配设置给默认的数据项</span></span><br><span class="line">        <span class="comment">//遍历 dataList, 依次在后台返回的数据中找，看有没有相同 name的项，如果有，更新一下value</span></span><br><span class="line">    dataList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//尝试拿 item.name 去 provinceData数组中找对应项</span></span><br><span class="line">        <span class="keyword">const</span> obj = provinceData.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> v.<span class="property">name</span>.<span class="title function_">replace</span>(<span class="regexp">/省|回族自治区|吾尔自治区|壮族自治区|特别行政区|自治区/g</span>, <span class="string">&#x27;&#x27;</span>) === item.<span class="property">name</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">//找到了，说明有这个省份的同学，更新</span></span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            item.<span class="property">value</span> = obj.<span class="property">value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">        <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;籍贯分布&#x27;</span>,</span><br><span class="line">            <span class="attr">top</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">left</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">16</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">            <span class="attr">formatter</span>: <span class="string">&#x27;&#123;b&#125;: &#123;c&#125; 位学员&#x27;</span>,</span><br><span class="line">            <span class="attr">borderColor</span>: <span class="string">&#x27;transparent&#x27;</span>,</span><br><span class="line">            <span class="attr">backgroundColor</span>: <span class="string">&#x27;rgba(0,0,0,0.5)&#x27;</span>,</span><br><span class="line">            <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">visualMap</span>: &#123;</span><br><span class="line">            <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">max</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">left</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: [<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">            <span class="attr">inRange</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: [<span class="string">&#x27;#ffffff&#x27;</span>, <span class="string">&#x27;#0075F0&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">left</span>: <span class="number">40</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">geo</span>: &#123;</span><br><span class="line">            <span class="attr">map</span>: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">            <span class="attr">roam</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">zoom</span>: <span class="number">1.0</span>,</span><br><span class="line">            <span class="attr">label</span>: &#123;</span><br><span class="line">                <span class="attr">normal</span>: &#123;</span><br><span class="line">                    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;rgba(0,0,0,0.7)&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                <span class="attr">normal</span>: &#123;</span><br><span class="line">                    <span class="attr">borderColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.2)&#x27;</span>,</span><br><span class="line">                    <span class="attr">color</span>: <span class="string">&#x27;#e0ffff&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                    <span class="attr">areaColor</span>: <span class="string">&#x27;#34D39A&#x27;</span>,</span><br><span class="line">                    <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">shadowOffsetY</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">shadowBlur</span>: <span class="number">20</span>,</span><br><span class="line">                    <span class="attr">borderWidth</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">series</span>: [&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;籍贯分布&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">            <span class="attr">geoIndex</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">data</span>: dataList,</span><br><span class="line">        &#125;, ],</span><br><span class="line">    &#125;</span><br><span class="line">    myEchart.<span class="title function_">setOption</span>(option)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学生管理"><a href="#学生管理" class="headerlink" title="学生管理"></a>学生管理</h1><h2 id="学生信息渲染"><a href="#学生信息渲染" class="headerlink" title="学生信息渲染"></a>学生信息渲染</h2><p>封装获取数据渲染表格函数，页面初始化调用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染功能 学生信息渲染</span></span><br><span class="line">       <span class="comment">//核心思路：</span></span><br><span class="line">       <span class="comment">//1.封装渲染函数</span></span><br><span class="line">       <span class="comment">//2.请求获取数据</span></span><br><span class="line">       <span class="comment">//3.基于数据，准备结构渲染</span></span><br><span class="line">       <span class="comment">//4.页面初始化调用</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装一个渲染函数 renderList</span></span><br><span class="line">       <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">renderList</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/students&#x27;</span>)</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">//查询学生列表成功</span></span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.table .list&#x27;</span>).<span class="property">innerHTML</span> = res.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">                   &lt;tr&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;<span class="subst">$&#123;item.name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;<span class="subst">$&#123;item.age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;<span class="subst">$&#123;item.gender === <span class="number">0</span> ? <span class="string">&#x27;男&#x27;</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;第<span class="subst">$&#123;item.group&#125;</span>组&lt;/td&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;<span class="subst">$&#123;item.hope_salary&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;<span class="subst">$&#123;item.salary&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;<span class="subst">$&#123;item.province&#125;</span> <span class="subst">$&#123;item.city&#125;</span> <span class="subst">$&#123;item.area&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                     &lt;td&gt;</span></span><br><span class="line"><span class="string">       &lt;a href=&quot;javascript:;&quot; class=&quot;text-success mr-3&quot;&gt;&lt;i data-id=&quot;<span class="subst">$&#123;item.id&#125;</span>&quot; class=&quot;bi bi-pen&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">       &lt;a href=&quot;javascript:;&quot; class=&quot;text-danger&quot;&gt;&lt;i data-id=&quot;<span class="subst">$&#123;item.id&#125;</span>&quot; class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">                     &lt;/td&gt;</span></span><br><span class="line"><span class="string">                   &lt;/tr&gt;</span></span><br><span class="line"><span class="string">               `</span></span><br><span class="line">           &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">           <span class="comment">//渲染一共多少位学员</span></span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.total&#x27;</span>).<span class="property">innerHTML</span> = res.<span class="property">data</span>.<span class="property">length</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">renderList</span>()</span><br></pre></td></tr></table></figure><h2 id="学生信息删除"><a href="#学生信息删除" class="headerlink" title="学生信息删除"></a>学生信息删除</h2><ol><li>事件委托绑定点击事件获取学生ID</li><li>调用删除接口完成删除更新列表</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生信息删除</span></span><br><span class="line">       <span class="comment">//核心思路：</span></span><br><span class="line">       <span class="comment">//1.事件委托绑定点击</span></span><br><span class="line">       <span class="comment">//2.渲染时绑定 id</span></span><br><span class="line">       <span class="comment">//3.点击获取绑定 id</span></span><br><span class="line">       <span class="comment">//4.调用删除接口</span></span><br><span class="line">       <span class="comment">//5.完成删除更新列表</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//删除或（编辑）功能（通过事件委托）</span></span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">           <span class="comment">//console.log(e.target)//当前点击的对象</span></span><br><span class="line">           <span class="keyword">const</span> btn = e.<span class="property">target</span></span><br><span class="line">               <span class="comment">//因为有两个按钮</span></span><br><span class="line">               <span class="comment">//判断当前点击的 i 按钮，有没有 bi-trash 的类，如果有，就是删除按钮</span></span><br><span class="line">           <span class="keyword">if</span> (btn.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;bi-trash&#x27;</span>)) &#123;</span><br><span class="line">               <span class="comment">//获取要删除的 id</span></span><br><span class="line">               <span class="keyword">const</span> id = btn.<span class="property">dataset</span>.<span class="property">id</span></span><br><span class="line">                   <span class="comment">//删除操作，发送删除请求，成功重新渲染</span></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">delete</span>(<span class="string">`/students/<span class="subst">$&#123;id&#125;</span>`</span>)   <span class="comment">//：id 需要在地址栏就要传id！！！</span></span><br><span class="line">                       <span class="comment">//console.log(res)//无返回数据</span></span><br><span class="line">                       <span class="comment">//重新渲染页面</span></span><br><span class="line">                   <span class="title function_">renderList</span>()</span><br><span class="line">               &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">dir</span>(e)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//点击编辑功能</span></span><br><span class="line">             ...</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h2 id="学生信息添加"><a href="#学生信息添加" class="headerlink" title="学生信息添加"></a>学生信息添加</h2><h3 id="bootstrap模态框"><a href="#bootstrap模态框" class="headerlink" title="bootstrap模态框"></a>bootstrap模态框</h3><h4 id="模态框-显示"><a href="#模态框-显示" class="headerlink" title="模态框 - 显示"></a>模态框 - 显示</h4><p>官方地址：<a href="https://v5.bootcss.com/docs/components/modal/#methods">https://v5.bootcss.com/docs/components/modal/#methods</a></p><ol><li>准备结构（已准备） 官网cv</li><li>实例化模态框</li><li>API方式显示隐藏</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modalBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#modal&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> modal = <span class="keyword">new</span> bootstrap.<span class="title class_">Modal</span>(modalBox)</span><br><span class="line"></span><br><span class="line">modal.<span class="title function_">show</span>() <span class="comment">// 显示</span></span><br><span class="line">modal.<span class="title function_">hide</span>() <span class="comment">// 隐藏</span></span><br><span class="line">modal.<span class="title function_">toggle</span>() <span class="comment">// 切换</span></span><br></pre></td></tr></table></figure><h4 id="模态框-优化"><a href="#模态框-优化" class="headerlink" title="模态框 - 优化"></a>模态框 - 优化</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//实现点击加号，弹框的显示</span></span><br><span class="line"><span class="keyword">const</span> modalBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#modal&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> modal = <span class="keyword">new</span> bootstrap.<span class="title class_">Modal</span>(modalBox) <span class="comment">//创建实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加学员按钮 注册点击事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#openModal&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.重置表单（如果不重置表单，上一次写的内容还在）</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">reset</span>()</span><br><span class="line">    <span class="comment">//2.设置标题</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#modal .modal-title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;添加学员&#x27;</span></span><br><span class="line">        <span class="comment">//3.添加一个标识，将来区分到底是添加还是修改（共用同一个弹框）</span></span><br><span class="line">        <span class="comment">//如果是添加，记录一个字符串 &quot;add&quot;</span></span><br><span class="line">        <span class="comment">//如果是修改，记录一个修改的id</span></span><br><span class="line">        <span class="comment">//发现记录的值是字符串，说明是添加 否则是修改</span></span><br><span class="line">    modalBox.<span class="property">dataset</span>.<span class="property">id</span> = <span class="string">&#x27;add&#x27;</span></span><br><span class="line">    <span class="comment">//显示弹框</span></span><br><span class="line">    modal.<span class="title function_">show</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/assets%5Cimage-20230127170549710.png" alt="0"></p><h3 id="省市区联动"><a href="#省市区联动" class="headerlink" title="省市区联动"></a>省市区联动</h3><p>核心思路：</p><ol><li>动态渲染省份</li><li>监听省份选择</li><li>选择省动态渲染市</li><li>监听市的选择</li><li>选择市动态渲染地区</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pSelect = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=province]&#x27;</span>) <span class="comment">//省</span></span><br><span class="line"><span class="keyword">const</span> cSelect = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=city]&#x27;</span>) <span class="comment">//市</span></span><br><span class="line"><span class="keyword">const</span> aSelect = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=area]&#x27;</span>) <span class="comment">//区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化省市区联动的功能</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initCity</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//1.动态渲染省份</span></span><br><span class="line">    <span class="comment">//发送请求，组合结构，动态渲染</span></span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">data</span>: province&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/province&#x27;</span>)</span><br><span class="line">        <span class="comment">//console.log(province) //数组，每一项是各个省的名称</span></span><br><span class="line">        <span class="comment">//把省的数据渲染到省的下拉框中</span></span><br><span class="line">        <span class="comment">//细节：option 标签value 属性记得设置值</span></span><br><span class="line">    <span class="keyword">const</span> pStr = province.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/option&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 一上来就显示省的名字不合适，要显示默认的  $&#123;pStr&#125;里装着很多option</span></span><br><span class="line">    pSelect.<span class="property">innerHTML</span> = <span class="string">`&lt;option value=&quot;&quot;&gt;--省份--&lt;/option&gt;<span class="subst">$&#123;pStr&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.监听省份的选择</span></span><br><span class="line">    <span class="comment">//给省注册change 事件，省改变的时候触发</span></span><br><span class="line">    pSelect.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="comment">//console.log(pSelect.value) //当前省份</span></span><br><span class="line"></span><br><span class="line">        aSelect.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">//重置区 (只重置区即可，下面动态渲染时，其实已经重置了)</span></span><br><span class="line">     <span class="comment">// cSelect.value = &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态渲染城市</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">data</span>: city&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/city&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                <span class="attr">pname</span>: pSelect.<span class="property">value</span>  <span class="comment">//根据当前省份来获取对应的城市</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> cStr = city.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/option&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        cSelect.<span class="property">innerHTML</span> = <span class="string">`&lt;option value=&quot;&quot;&gt;--城市--&lt;/option&gt;<span class="subst">$&#123;cStr&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.监听城市的选择</span></span><br><span class="line">    cSelect.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="comment">//console.log(aSelect.value) //当前城市</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态渲染区</span></span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">data</span>: area &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/area&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                <span class="attr">pname</span>: pSelect.<span class="property">value</span>,</span><br><span class="line">                <span class="attr">cname</span>: cSelect.<span class="property">value</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> aStr = area.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/option&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        aSelect.<span class="property">innerHTML</span> = <span class="string">`&lt;option value=&quot;&quot;&gt;--地区--&lt;/option&gt;<span class="subst">$&#123;aStr&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">initCity</span>()</span><br></pre></td></tr></table></figure><h3 id="调用添加接口完成添加"><a href="#调用添加接口完成添加" class="headerlink" title="调用添加接口完成添加"></a>调用添加接口完成添加</h3><p>核心思路：</p><ol><li>点击确认按钮</li><li>收集表单数据, 处理格式</li><li>判断操作类型</li><li>提交表单，页面渲染</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = modalBox.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> submitBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#submit&#x27;</span>) <span class="comment">//确认按钮</span></span><br><span class="line"></span><br><span class="line">            submitBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">                <span class="comment">//1.收集表单数据</span></span><br><span class="line">                <span class="keyword">const</span> data = <span class="title function_">serialize</span>(form, &#123;<span class="attr">hash</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">                    <span class="comment">//console.log(data)</span></span><br><span class="line">                <span class="comment">//处理格式（后台部分数据需要number格式）</span></span><br><span class="line">                data.<span class="property">age</span> = +data.<span class="property">age</span></span><br><span class="line">                data.<span class="property">gender</span> = +data.<span class="property">gender</span></span><br><span class="line">                data.<span class="property">hope_salary</span> = +data.<span class="property">hope_salary</span></span><br><span class="line">                data.<span class="property">salary</span> = +data.<span class="property">salary</span></span><br><span class="line">                data.<span class="property">group</span> = +data.<span class="property">group</span></span><br><span class="line">                    <span class="comment">//2.发送请求提交,做个判断</span></span><br><span class="line">                    <span class="comment">//判断是否是添加操作，如果是，发送添加请求</span></span><br><span class="line">                <span class="keyword">if</span> (modalBox.<span class="property">dataset</span>.<span class="property">id</span> === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">//添加操作</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/students&#x27;</span>, data)</span><br><span class="line">                            <span class="comment">//console.log(res)</span></span><br><span class="line">                        <span class="comment">//重新渲染页面</span></span><br><span class="line">                        <span class="title function_">renderList</span>()</span><br><span class="line">                        <span class="comment">//关闭弹窗</span></span><br><span class="line">                        modal.<span class="title function_">hide</span>()</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&#x27;添加失败！&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//修改操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><h2 id="学生信息修改"><a href="#学生信息修改" class="headerlink" title="学生信息修改"></a>学生信息修改</h2><h3 id="点修改-显示弹框"><a href="#点修改-显示弹框" class="headerlink" title="点修改 - 显示弹框"></a>点修改 - 显示弹框</h3><p>核心思路：</p><ol><li>事件委托 - 注册点击事件 </li><li>设置弹框标题，记录操作 id</li><li>调用API显示弹框</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（通过事件委托）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> (e) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> btn = e.<span class="property">target</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//判断当前点击的 i 按钮，有没有 bi-pen 的类，如果有，就是编辑按钮</span></span><br><span class="line">  <span class="keyword">if</span> (btn.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;bi-pen&#x27;</span>)) &#123;</span><br><span class="line">    modalBox.<span class="title function_">querySelector</span>(<span class="string">&#x27;.modal-title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;修改学员&#x27;</span></span><br><span class="line">      <span class="comment">//将点击的编辑按钮的id，存到对话框上（对话框是唯一的，要改谁，就存谁的id）</span></span><br><span class="line">    modalBox.<span class="property">dataset</span>.<span class="property">id</span> = btn.<span class="property">dataset</span>.<span class="property">id</span>   <span class="comment">// 元素上面就会存上data-id属性</span></span><br><span class="line">    modal.<span class="title function_">show</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="显示弹框-请求回显"><a href="#显示弹框-请求回显" class="headerlink" title="显示弹框 - 请求回显"></a>显示弹框 - 请求回显</h3><p>核心思路：</p><ol><li>根据 id 获取学生数据</li><li>遍历表单实现基本回显</li><li>处理性别回显</li><li>处理省市区回显</li></ol><p>基本回显</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> (e) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> btn = e.<span class="property">target</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//判断当前点击的 i 按钮，有没有 bi-pen 的类，如果有，就是编辑按钮</span></span><br><span class="line">            <span class="keyword">if</span> (btn.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;bi-pen&#x27;</span>)) &#123;</span><br><span class="line">                modalBox.<span class="title function_">querySelector</span>(<span class="string">&#x27;.modal-title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;修改成员&#x27;</span></span><br><span class="line">                    <span class="comment">//将点击的编辑按钮的id，存到对话框上（对话框是唯一的，要改谁，就存谁的id）</span></span><br><span class="line">                modalBox.<span class="property">dataset</span>.<span class="property">id</span> = btn.<span class="property">dataset</span>.<span class="property">id</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//发送请求获取数据</span></span><br><span class="line">                <span class="keyword">const</span> &#123;</span><br><span class="line">                    <span class="attr">data</span>: student</span><br><span class="line">                &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`/students/<span class="subst">$&#123;modalBox.dataset.id&#125;</span>`</span>)</span><br><span class="line">                    <span class="comment">//console.log(student) //查询学生详情成功</span></span><br><span class="line">                    <span class="comment">//遍历表单完成回显 获取表单里所有有name属性的表单元素</span></span><br><span class="line">                    <span class="comment">//伪数组转换为真数组</span></span><br><span class="line">                    <span class="comment">// [name] 表示所有 有 name 的表单属性的都获取！</span></span><br><span class="line">                <span class="keyword">const</span> fields = <span class="title class_">Array</span>.<span class="title function_">from</span>(modalBox.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#form [name]&#x27;</span>))</span><br><span class="line">                fields.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// item 表示所有有name属性的表单元素   </span></span><br><span class="line">                    </span><br><span class="line">                        <span class="comment">//处理性别回显</span></span><br><span class="line">                        <span class="keyword">if</span> (item.<span class="property">name</span> === <span class="string">&#x27;gender&#x27;</span>) &#123;</span><br><span class="line">                            <span class="comment">//单选框要单独处理,两个单选框，不能都选中</span></span><br><span class="line">                            <span class="comment">// input.value === genger:1 (gender 是data里返回的数据)</span></span><br><span class="line">                            <span class="comment">// 看 input.value值和 student的gender值是否相等，相等才选中</span></span><br><span class="line">                            <span class="keyword">if</span> (+item.<span class="property">value</span> === student.<span class="property">gender</span>) &#123;</span><br><span class="line">                                item.<span class="property">checked</span> = <span class="literal">true</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//input框，select框，都可以通过.value赋值</span></span><br><span class="line">                            <span class="comment">//item 就是每个有 name 属性的表单元素 （就是input输入框）</span></span><br><span class="line">                            <span class="comment">//item.name 就是每一项的name值</span></span><br><span class="line">                            <span class="comment">//利用 item.name 值，就可以去 student中用中括号语法去取值~</span></span><br><span class="line">                            item.<span class="property">value</span> = student[item.<span class="property">name</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                    <span class="comment">// 处理省市区的回显</span></span><br><span class="line">                    <span class="comment">//获取省的数据，渲染</span></span><br><span class="line">                <span class="keyword">const</span> &#123; <span class="attr">data</span>: province &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/province&#x27;</span>)</span><br><span class="line">                <span class="keyword">const</span> pStr = province.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/option&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                pSelect.<span class="property">innerHTML</span> = <span class="string">`&lt;option value=&quot;&quot;&gt;--省份--&lt;/option&gt;<span class="subst">$&#123;pStr&#125;</span>`</span></span><br><span class="line">                pSelect.<span class="property">value</span> = student.<span class="property">province</span></span><br><span class="line">                    <span class="comment">//根据student.province(省)，要获取所有的市区，并且渲染市区，设置选中的是哪个城市</span></span><br><span class="line">                <span class="keyword">const</span> &#123;<span class="attr">data</span>: city&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/city&#x27;</span>, &#123;<span class="attr">params</span>: &#123; <span class="attr">pname</span>: pSelect.<span class="property">value</span>&#125;&#125;)</span><br><span class="line">                <span class="keyword">const</span> cStr = city.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/option&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                cSelect.<span class="property">innerHTML</span> = <span class="string">`&lt;option value=&quot;&quot;&gt;--城市--&lt;/option&gt;<span class="subst">$&#123;cStr&#125;</span>`</span></span><br><span class="line">                cSelect.<span class="property">value</span> = student.<span class="property">city</span></span><br><span class="line">                    <span class="comment">//根据student.city获取所有的地区，渲染地区，设置选中的是哪个地区</span></span><br><span class="line">                <span class="keyword">const</span> &#123;<span class="attr">data</span>: area&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/area&#x27;</span>, &#123; </span><br><span class="line">                     <span class="attr">params</span>: &#123;<span class="attr">pname</span>: pSelect.<span class="property">value</span>,  <span class="attr">cname</span>: cSelect.<span class="property">value</span>&#125; &#125;)</span><br><span class="line">                <span class="keyword">const</span> aStr = area.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;item&#125;</span>&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/option&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                aSelect.<span class="property">innerHTML</span> = <span class="string">`&lt;option value=&quot;&quot;&gt;--地区--&lt;/option&gt;<span class="subst">$&#123;aStr&#125;</span>`</span></span><br><span class="line">                aSelect.<span class="property">value</span> = student.<span class="property">area</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//回显完成，显示弹框</span></span><br><span class="line">                modal.<span class="title function_">show</span>()</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="调用接口完成修改"><a href="#调用接口完成修改" class="headerlink" title="调用接口完成修改"></a>调用接口完成修改</h3><p>核心思路：</p><ol><li>根据修改的 id </li><li>发送请求请求</li><li>关闭弹框</li><li>重新渲染</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 &amp; 修改学生</span></span><br><span class="line">submitBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 收集表单数据</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">serialize</span>(form, &#123; <span class="attr">hash</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="comment">// 处理格式（后台部分数据需要number格式）</span></span><br><span class="line">  data.<span class="property">age</span> = +data.<span class="property">age</span></span><br><span class="line">  data.<span class="property">hope_salary</span> = +data.<span class="property">hope_salary</span></span><br><span class="line">  data.<span class="property">salary</span> = +data.<span class="property">salary</span></span><br><span class="line">  data.<span class="property">gender</span> = +data.<span class="property">gender</span></span><br><span class="line">  data.<span class="property">group</span> = +data.<span class="property">group</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (modalBox.<span class="property">dataset</span>.<span class="property">id</span> === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 添加逻辑</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/students&#x27;</span>, data)</span><br><span class="line">      modal.<span class="title function_">hide</span>()</span><br><span class="line">      <span class="title function_">renderList</span>()</span><br><span class="line">      <span class="title function_">tip</span>(<span class="string">&#x27;添加成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;添加失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 修改逻辑</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//修改完成</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> axios.<span class="title function_">put</span>(<span class="string">`/students/<span class="subst">$&#123;modalBox.dataset.id&#125;</span>`</span>, data)</span><br><span class="line">      modal.<span class="title function_">hide</span>()</span><br><span class="line">      <span class="title function_">renderList</span>()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;修改失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="码云page服务"><a href="#码云page服务" class="headerlink" title="码云page服务"></a>码云page服务</h2><ol><li>合并到master分支,  推送远程仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge develop</span><br><span class="line"></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ol start="2"><li>使用pages服务发布静态页面</li></ol><p><img src="/assets/image-20220516022629114.png" alt="image-20220516022629114"></p><ol start="3"><li>实名认证</li></ol><p><img src="/assets/image-20220516022726079.png" alt="image-20220516022726079"></p><ol start="4"><li>开启服务</li></ol><p><img src="/assets/image-20220529180800196.png" alt="image-20220529180800196"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue原理</title>
      <link href="/posts/f82ea27.html"/>
      <url>/posts/f82ea27.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Vue原理"><a href="#一、Vue原理" class="headerlink" title="一、Vue原理"></a>一、Vue原理</h2><ul><li>响应式系统<ul><li>学习<code>Vue</code>中如何实现数据的响应式系统，从而达到数据驱动视图。</li></ul></li><li>vue中选项方法<ul><li>学习watch选项 $watch方法 computed选项 $set方法 $nextTick $mount方法的封装</li></ul></li><li>template 编译过程<ul><li>学习<code>Vue</code>内部是怎么把<code>template</code>模板编译成虚拟<code>DOM</code>,从而渲染出真实<code>DOM</code></li></ul></li><li>虚拟 dom 生成与更新<ul><li>学习什么是虚拟 DOM，以及<code>Vue</code>中的<code>DOM-Diff</code>原理</li></ul></li></ul><h2 id="二、Vue2-学习路线图"><a href="#二、Vue2-学习路线图" class="headerlink" title="二、Vue2 学习路线图"></a>二、Vue2 学习路线图</h2><p>下面这张流程图中表示了vue的关键部分的执行过程，和核心函数。我们可以根据这样一个过程来自己实现一个vue框架。</p><h6 id=""><a href="#" class="headerlink" title=""></a><img src="https://bu.dusays.com/2023/08/20/64e1c9eb42347.png" alt="image-20230704110034877-8439636.png"></h6><p>通过梳理Vue初始化的过程，我们发现实现一个类似于Vue的框架主要需要实现这几部分 响应式系统框架、虚拟dom编译渲染机制 MVVM更新机制，接下来我们先从最基本的响应式系统开始，自己动手写一个Vue的简单框架</p><p>【思考】Vue在初始化的过程中主要经历的哪些步骤</p><p>【回答】</p><p>1、初始化Vue构造函数，挂载属性 方法</p><p>2、模板编译成render函数</p><p>3、通过Watcher收集依赖</p><p>4、diff更新dom</p><p>5、渲染dom</p><p>【补充】vue是一个标准的MVVM框架么？</p><p>Vue 并不完全是一个MVVM框架MVVM只能数据驱动视图，视图更改数据，而不能通过其他方式操作数据。在vue中我们也可以自己手动修改数据，所以vue并不是一个完全意义上的MVVM框架。</p><h2 id="三、Vue2-响应式原理"><a href="#三、Vue2-响应式原理" class="headerlink" title="三、Vue2 响应式原理"></a>三、Vue2 响应式原理</h2><p>从这一小节开始我们带着大家实现一个Vue框架</p><p>我们先来看看面试宝典中的关于Vue响应式的八股文 （P143-4）</p><p><img src="https://bu.dusays.com/2023/08/20/64e1cb8bedb70.png" alt="image-20230712205031984.png"></p><p>相信绝大多数的同学看到这个八股文都会感觉头大。学完今天的内容，我们都会对怎么回答vue的响应式原理有了自己的理解。</p><p>下面我们一起来揭秘vue的响应式原理到底是怎么实现的！</p><h3 id="1、章节概述"><a href="#1、章节概述" class="headerlink" title="1、章节概述"></a>1、章节概述</h3><p>我们首先实现学习路线中第一条分支，从状态初始化到数据响应式的过程</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e7ec1b1.png" alt="image-20230712205309319.png"></p><p>所谓数据响应式就是<strong>能够使数据变化可以被检测并对这种变化做出响应的机制</strong>。MVVM框架中要解决的一个核心问题是连接数据层和视图层，通过<strong>数据驱动</strong>应用，数据变化，视图更新，要做到这点的就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9dc7f684.png" alt="data.png"></p><p>Vue 的响应式原理依赖于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>，Vue通过设定对象属性的 setter&#x2F;getter 方法来监听数据的变化，通过getter进行依赖收集，而每个setter方法就是一个观察者，在数据变更的时候通知订阅者更新视图。</p><p>所以在vue中的数据响应式原理主要是给data绑定一个观察着 observe 让数据变成可观察的，我们首先来看源码然后自己尝试手写一个observe</p><h3 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h3><p>在这一小节中我们开始自己实现一个Vue框架，通过Vue源码我们了解到Vue使用的rollup构建工具进行打包</p><p><strong>&#x2F;package.json</strong></p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9dd5dfad.png" alt="image-20230419133024189.png"></p><p>这里我们也使用Rollup实现项目打包，我们之前有学习过脚手架工具webpack，Rollup和webpack的区别在于项目类代码中有大量的代码拆分，构建项目类型的应用显然webpack更为合适，如果想要构建js类库将多个模块打包成一个大的文件rollpu更加合适，同时rollup中提供的tree-shake可以帮助我们自动删除冗余代码</p><table><thead><tr><th><strong>Webpack</strong></th><th><strong>Rollup</strong></th></tr></thead><tbody><tr><td>vue-cli, create-react-app 各类应用脚手架</td><td>react，vue，three.js，<a href="https://so.csdn.net/so/search?q=D3&spm=1001.2101.3001.7020">D3</a>，moment</td></tr></tbody></table><h4 id="1、源码工程的初始化"><a href="#1、源码工程的初始化" class="headerlink" title="1、源码工程的初始化"></a>1、源码工程的初始化</h4><h5 id="1、新建项目文件夹，在文件夹下初始化工程"><a href="#1、新建项目文件夹，在文件夹下初始化工程" class="headerlink" title="1、新建项目文件夹，在文件夹下初始化工程"></a>1、新建项目文件夹，在文件夹下初始化工程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9df6c2cb.png" alt="image-20230419134428522.png"></p><p>获得package.json</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e037863.png" alt="image-20230419134457299.png"></p><h5 id="2、安装Rollup打包依赖"><a href="#2、安装Rollup打包依赖" class="headerlink" title="2、安装Rollup打包依赖"></a>2、安装Rollup打包依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1，安装 rollup：用于 Vue 源码的打包构建</span><br><span class="line">npm install rollup</span><br><span class="line"></span><br><span class="line">// 2，使用 babel：需要安装核心模块 @babel/core；</span><br><span class="line">npm install @babel/core</span><br><span class="line"></span><br><span class="line">// 3，rollup 与 babel 关联</span><br><span class="line">npm install rollup-plugin-babel</span><br><span class="line"></span><br><span class="line">// 4，浏览器兼容：将 ES6 语法转译为 ES5</span><br><span class="line">npm install @babel/preset-env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ==&gt; 合并写法：一次性安装开发环境所需的全部依赖</span><br><span class="line">npm install rollup @babel/core rollup-plugin-babel @babel/preset-env -D</span><br></pre></td></tr></table></figure><h5 id="3、创建Vue-js文件"><a href="#3、创建Vue-js文件" class="headerlink" title="3、创建Vue.js文件"></a>3、创建Vue.js文件</h5><p>创建打包入口：src&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js Vue 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 Vue 函数，提供外部使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9dfc043b.png" alt="image-20230419135420661.png"></p><h5 id="4、创建-Rollup-配置文件"><a href="#4、创建-Rollup-配置文件" class="headerlink" title="4、创建 Rollup 配置文件"></a>4、创建 Rollup 配置文件</h5><p>rollup 默认配置文件：项目根目录下<code>rollup.config.js</code>文件</p><p>创建 rollup.config.js，完成 rollup、<a href="https://so.csdn.net/so/search?q=babel&spm=1001.2101.3001.7020">babel</a> 相关配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 rollup 配置对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 打包入口</span></span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,   </span><br><span class="line">  <span class="comment">// 打包出口：可定义为数组，输出多种构件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;                </span><br><span class="line">    <span class="comment">// 打包输出文件</span></span><br><span class="line">    <span class="attr">file</span>: <span class="string">&#x27;dist/vue.js&#x27;</span>,   </span><br><span class="line">    <span class="comment">// 打包格式（可选项）：iife（立即执行函数）、esm（ES6 模块）、cjs（Node 规范）、umd（支持 amd + cjs）</span></span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,         </span><br><span class="line">    <span class="comment">// 使用 umd 打包需要指定导出的模块名，Vue 模块将会绑定到 window 上；</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,          </span><br><span class="line">    <span class="comment">// 开启 sourcemap 源码映射，打包时会生成 .map 文件；作用：浏览器调试ES5代码时，可定位到ES6源代码所在行；</span></span><br><span class="line">    <span class="attr">sourcemap</span>: <span class="literal">true</span>,      </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 使用 Rollup 插件转译代码</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="comment">// 忽略 node_modules 目录下所有文件（**：所有文件夹下的所有文件）</span></span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;node_modules/**&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、创建-rollup-构建脚本"><a href="#5、创建-rollup-构建脚本" class="headerlink" title="5、创建 rollup 构建脚本"></a>5、创建 rollup 构建脚本</h5><p>执行 Rollup 打包构建 Vue，创建 rollup-script 构建脚本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">.........</span><br><span class="line">  <span class="comment">// ollup 命令：默认会去找 node_module/bin/rollup；</span></span><br><span class="line"><span class="comment">// - -c：config 选项，使用配置文件，默认找 rollup.config.js；</span></span><br><span class="line"><span class="comment">// - -w：watch 选项，监听文件变化；当文件发生变化时重新打包；</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c -w&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">.........</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>dev 脚本解释：</p><ul><li>rollup 命令：默认会去找 node_module&#x2F;bin&#x2F;rollup；</li><li>-c：config 选项，使用配置文件，默认找 rollup.config.js；</li><li>-w：watch 选项，监听文件变化；当文件发生变化时重新打包；</li></ul><h5 id="6、打包构建-Vue"><a href="#6、打包构建-Vue" class="headerlink" title="6、打包构建 Vue"></a>6、打包构建 Vue</h5><p>执行构建脚本 npm run dev</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9de75622.png" alt="image-20230419135603333.png"></p><p>将 <code>src/index.js</code> 输出至 <code>dist/vue.js</code> 其中，<code>vue.js.map</code> 为 sourcemap 源码映射文件</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e1a53ce.png" alt="image-20230419135710522.png"></p><h5 id="7、创建-Html-引入-Vue"><a href="#7、创建-Html-引入-Vue" class="headerlink" title="7、创建 Html 引入 Vue"></a>7、创建 Html 引入 Vue</h5><p>创建 <code>dist/index.html</code> 引入 <code>dist/vue.js</code>，打印输出 Vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入 vue.js，将会绑定到 window--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Vue</span>) </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中打开<code>index.html</code>，查看控制台输出，此时一个<code>Vue</code>的构建环境就搭建完成了</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e008d28.png" alt="image-20230419135928971.png"></p><h3 id="3、Vue函数的封装"><a href="#3、Vue函数的封装" class="headerlink" title="3、Vue函数的封装"></a>3、Vue函数的封装</h3><p>【目标】封装一个 Vue 函数并且在 index.html 中引入</p><p>【前置知识】</p><p>在js中函数和class都可以new，如下：有啥区别呢 ？</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e5aa25b.png" alt="Snipaste_2023-08-20_16-04-06.png"></p><p>class <strong>类是用于创建对象的模板。</strong></p><p>我们使用 class 关键字来创建一个类，类体在一对大括号 <strong>{}</strong> 中，我们可以在大括号 <strong>{}</strong> 中定义类成员的位置，如方法或构造函数。</p><p>每个类中包含了一个特殊的方法 **constructor()**，它是类的构造函数，这种方法用于创建和初始化一个由 <strong>class</strong> 创建的对象。</p><p>创建一个类的语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; ... &#125; &#125;</span><br></pre></td></tr></table></figure><p>在js中除了class函数也可以new，函数本身就是对象，在js中每定义一个函数都会同时生成一个以这个函数体为构造函数的对象，不信你试试</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e6d4278.png" alt="image-20230704111250514.png"></p><p>可以通过对象来new出一个新的对象。定义 function Vue(options){} 时， 实际上生成了一个Function类型（预定义类型）的对象，对象名叫Vue，对象的构造函数就是这个函数的体。如下</p><p>我们在初始化<code>Vue</code>项目的时候使用到<code>new</code>关键字，这里的vue是使用函数定义的。目的是提升vue的灵活性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = options.<span class="property">name</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【思考】为什么vue使用函数定义而其他的watcher observer使用class定义？</p><p>【回答】核心目的：提升Vue的灵活性：</p><p>1、class的所有方法都是不可枚举的，而function声明的函数是可以枚举的。用户可以根据需要定制重写（重载）vue提供的成员方法</p><p>2、function 既能当常规函数来用，又能当做函数的属性来用，又能当类来用。相对class更加灵活。</p><p>3、对于内部定义的不希望修改的方法，通过class来定义，另外class声明的函数会有变量提升。</p><p>下面我们实例化一个Vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时在 vm 实例上就具有了 name 和 data 属性</p><p>接下来我们在<code>src/index.js</code>中定义这个类并导出。在构造函数中获取传入的<code>options</code>并挂载到<code>vue</code>实例上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue构造器执行&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  vm.<span class="property">$options</span> = options        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在 <strong>dist&#x2F;index.html</strong>中实例化一个Vue对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 vue.js，将会绑定到 window--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">a</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">b</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">c</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;hello world!&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e0cb735.png" alt="image-20230505142517798.png"></p><p>此时我们访问<code>Vue</code>对象中data里面定义的数据不能直接访问，必须通过<code>vue.data.xxx</code>访问，实际在<code>Vue</code>项目中<code>data</code>里面定义的数据是可以直击访问的，所以我们需要给<code>data</code>中的数据添加一个代理实现数据的直接访问。</p><h3 id="4、核心函数-Object-defineProperty-的介绍和简单响应式的实现"><a href="#4、核心函数-Object-defineProperty-的介绍和简单响应式的实现" class="headerlink" title="4、核心函数 Object.defineProperty 的介绍和简单响应式的实现"></a>4、核心函数 Object.defineProperty 的介绍和简单响应式的实现</h3><p>【目标】能够了解Object.defineProperty的用法，并且实现一个简单的响应式</p><p>为了实现vue中的数据代理，我们需要首先了解一下vue中的响应式核心方法Object.defineProperty</p><p>Object.defineProperty 在 vue2 中起到了非常重要的作用，通过Object.defineProperty实现了数据的代理，数据响应式原理，以及vue中的一些重要成员方法。下面我们学习Object.defineProperty的基本概念和用法。</p><p>语法：**<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty(obj, prop, descriptor)</a>**<br>其中：<strong>obj</strong>要在其上定义属性的对象。<strong>prop</strong>要定义或修改的属性的名称。<strong>descriptor</strong>将被定义或修改的属性描述符。</p><p>参数：    1、obj : 第一个参数就是要在哪个对象身上添加或者修改属性</p><p>​2、prop : 第二个参数就是添加或修改的属性名</p><p>​3、desc ： 配置项，一般是一个对象 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">desc 的详细配置</span><br><span class="line">writable：是否可重写</span><br><span class="line">value：  当前值 </span><br><span class="line">enumerable： 是否可以遍历</span><br><span class="line">configurable： 是否可再次修改配置项</span><br><span class="line">get：     读取时内部调用的函数</span><br><span class="line">set：        写入时内部调用的函数</span><br><span class="line"></span><br><span class="line">当数据调用的时候触发get 方法，当数据修改的时候触发set方法</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, <span class="string">&#x27;b&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 通过 Object.defineProperty 设置的属性默认是不可修改，不可枚举，不可配置</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, <span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 是否可以枚举</span></span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span> <span class="comment">// 是否可以修改</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【思考】什么是响应式？</p><p>【回答】对外界的变化做出反应</p><p>【思考】数据响应式的核心思想是什么？</p><p>【回答】将数据变成可观察的</p><p>下面我们来实现一个简单的数据响应式过程，在 dist 下新建一个 **defineproperty.html **</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 定义数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 实现数据的渲染</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 当视图改变数据改变</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 当数据改变驱动视图更新</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">value</span>: <span class="string">&#x27;hello kilito&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        data.<span class="property">value</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">value</span> = data.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这里的value的作用是形成闭包，拓展函数体内部变量的作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, prop, value, cb</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据发生获取&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> value</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据发生了修改！&#x27;</span>, val)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 将数据修改之后的值 val 在get中返回</span></span></span><br><span class="line"><span class="language-javascript">                value = val</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">cb</span>(val)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">value</span> = value</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineReactive</span>(data, <span class="string">&#x27;value&#x27;</span>, data[<span class="string">&#x27;value&#x27;</span>], update)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data.value = &#x27;123&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数据发生了修改！ 123</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#x27;123&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 视图发生了改变 123</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e6bd2fe.png" alt="Snipaste_2023-08-20_16-04-59.png"></p><p>【思考】数据获取的时候触发的哪个方法，数据修改的时候触发的哪个方法？</p><p>【回答】获取触发get 修改触发set</p><p>【思考】上面这段代码实现了什么呢？</p><p>【回答】实现了数据的双向绑定，数据改变视图改变，视图改变数据也改变</p><p>【思考】定义defineReactive函数的时候，里面第三个参数value的作用？</p><p>【回答】在函数体内部形成闭包结构，用开来拓展函数内部变量的作用域</p><h3 id="5、通过data代理，实现数据的访问"><a href="#5、通过data代理，实现数据的访问" class="headerlink" title="5、通过data代理，实现数据的访问"></a>5、通过data代理，实现数据的访问</h3><p>【目标】实现data的代理可以直接通过vm实例获取data中定义的数据</p><p>【思考】在 vue 中的数据是存放在 data 中为什么可以通过 vm.XXX 直接访问数据呢？</p><p>【回答】通过数据代理实现数据的访问</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c9e26c0fb.png" alt="image-20230704114327873.png"></p><p>此时我们想获取数据 a 需要通过 Vue.$options.data.a ，但是在 vue 中只需要 this.a 就可以获取到 a 的值，这是怎么实现的呢？</p><p>在 Vue 中，可以在外部直接通过vm实例进行数据访问和操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">         <span class="attr">b</span>: &#123;</span><br><span class="line">          <span class="attr">c</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">message</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>当前代码中，外部通过vue实例只能拿到 <code>vue.$options</code>，想要拿到<code>data</code>需要 <code>vue.$options.data</code>，要想实现<code>vue.message</code>和<code>vue.$options.data.message</code>等效，就需要想办法将<code>vue</code>实例操作“代理”到<code>$options.data</code>上；这样，就实现了 Vue 的数据代理我们来观察一下vue的实例，在实例上有一个_data属性 还有我们定义的变量。</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c861f0ef8.png" alt="image-20230704115013875.png"></p><p>首先，先做一次代理，将<code>data</code>挂载到 vue._data下（因为Object.defineProperty的第一个参数必须为一的对象，我们，第一层代理更加方便我们在实现属性的追加），这样 vue 实例就能够在外部通过<code>vue._data.message</code>获取到<code>data.message</code>；</p><p>之后，再做一次代理，将 vue 实例操作 vue.message 代理到 vue.<em>data 上，这样，外部就可以直接通过vue.message 获取到 data.message；</em></p><p>Vue 状态初始化阶段，通过 observe() 实现数据响应式之后，通过 Object.defineProperty 对 _data 中的数据操作进行劫持；将 vue.xxx 在 vue 实例上的取值操作，代理到 vue._data.xxx 上，这样可以简化书写。</p><p>下面我们开始实现数据的代理</p><p><code>data</code>挂载到 vue._data下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue构造函数执行&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">  vm.<span class="property">$options</span> = options</span><br><span class="line">    <span class="comment">// options.data 可能是对象也可能是函数</span></span><br><span class="line">  vm.<span class="property">_data</span> = <span class="title function_">typeof</span>(options.<span class="property">data</span>) === <span class="string">&#x27;function&#x27;</span> ? options.<span class="title function_">data</span>() : options.<span class="property">data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将vue实例操作vue.message代理到vue._data上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据代理 实现非侵入的数据修改</span></span><br><span class="line"><span class="comment">// 定义代理方法</span></span><br><span class="line"><span class="comment">// 将vue实例上的操作，代理到 vue._data上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_proxy</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">        get () &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_data</span>[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        set (val) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_data</span>[key] = val</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后在Vue的构造器中使用proxy方法代理数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue构造函数执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">    vm.<span class="property">$options</span> = options</span><br><span class="line">    vm.<span class="property">_data</span> = <span class="title function_">typeof</span>(options.<span class="property">data</span>) === <span class="string">&#x27;function&#x27;</span> ? options.<span class="title function_">data</span>() : options.<span class="property">data</span></span><br><span class="line">    _proxy.<span class="title function_">call</span>(vm,vm.<span class="property">_data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们再访问vue对象中的数据，就不需要.data了，观察打印结果：当从vue实例取值时，就会被代理到vm._data取值；</p><p><img src="https://bu.dusays.com/2023/08/20/64e1c81d1b531.png" alt="Snipaste_2023-08-20_15-54-59.png"></p><p>【总结】vue中实现数据直接访问的实现步骤</p><p>1、将 data 暴露在 vue._ <em>data 实例属性上<br>2、利用 Object.defineProperty 将 vue.xxx 操作代理到 vue.</em> _data 上</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="JS设计模式"><a href="#JS设计模式" class="headerlink" title="JS设计模式"></a>JS设计模式</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80">传送门:wiki-设计模式</a></p><p><a href="https://www.ituring.com.cn/book/1632">传送门:JavaScript设计模式与开发实践</a></p></blockquote><p>设计模式的指的是：在<strong>面向对象软件</strong>设计过程中针对特定问题的简洁而优雅的解决方案。通俗一点说，设计模式就是给面向对象软件开发中的一些好的设计取个名字。</p><p>目前说到设计模式，一般指的是《设计模式：可复用面向对象软件的基础》一书中提到的<strong>23种</strong>常见的软件开发设计模式。</p><p>JavaScript中不需要生搬硬套这些模式，咱们结合实际前端开发中的具体应用场景，来看看有哪些常用的设计模式</p><p>这一节咱们会学习:</p><ol><li>JS中的常用设计模式</li><li>设计模式在开发&#x2F;框架中的应用场景</li></ol><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>在JavaScript中，工厂模式的表现形式就是一个<strong>直接调用即可返回新对象的函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数并实例化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;柯基&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ToyFactory</span>(<span class="params">name,price</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        price</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> toy1 = <span class="title class_">ToyFactory</span>(<span class="string">&#x27;布娃娃&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> toy2 = <span class="title class_">ToyFactory</span>(<span class="string">&#x27;玩具车&#x27;</span>,<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><ol><li><p>Vue2-&gt;Vue3: </p><ol><li>启用了<code>new Vue</code>,改成了工厂函数<code>createApp</code>-<a href="https://v3-migration.vuejs.org/zh/breaking-changes/global-api.html">传送门</a></li><li><em><strong>任何全局改变 Vue 行为的 API(vue2) 现在都会移动到应用实例上(vue3)</strong></em></li><li>就不会出现,Vue2中多个Vue实例共享,相同的全局设置,可以<strong>实现隔离</strong></li><li>避免vue2中全局设置的东西，比如组件，影响后续实例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#app1</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#app2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue2-全局注册组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    实例1 组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-title</span>&gt;</span><span class="tag">&lt;/<span class="name">my-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    实例2</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-title</span>&gt;</span><span class="tag">&lt;/<span class="name">my-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.9/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 全局注册组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-title&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 组件的结构</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;h2 style=&quot;color:orange&quot;&gt;标题组件&lt;/h2&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app2&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>axios.create:</p><ol><li>基于传入的配置创建一个新的<code>axios</code>实例,<a href="https://www.axios-http.cn/docs/instance">传送门</a></li><li>项目中有2个请求基地址如何设置?</li><li>创建出多个请求不同的对象，比如设置多个基地址</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 基于不同基地址创建多个 请求对象</span></span><br><span class="line"><span class="keyword">const</span> request1 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;基地址1&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> request2 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;基地址2&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> request3 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;基地址3&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过对应的请求对象,调用接口即可</span></span><br><span class="line"><span class="title function_">request1</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;基地址1的接口&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">request2</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;基地址2的接口&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">request3</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;基地址3的接口&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>小结:</p><ol><li>工厂模式:JS中的表现形式,<strong>返回新对象的函数(方法)</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>日常开发中,有2个很经典的场景</p><ol><li><code>vue3</code>中创建实例的api改为<code>createApp</code>,<code>vue2</code>中是<code>new Vue</code><ol><li>Vue3中,没有影响所有Vue实例的api了,全都变成了影响某个app对象的api,比如<code>Vue.component--&gt;app.component</code></li></ol></li><li><code>axios.create</code>基于传入的配置,创建一个新的请求对象,可以用来设置多个基地址</li></ol></li></ol><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><strong>单例模式指的是，在使用这个模式时，单例对象整个系统需要保证只有一个存在。</strong></p><p><strong>需求:</strong></p><ol><li>通过静态方法<code>getInstance</code>获取<strong>唯一实例</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1===s2)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义类</li><li>私有静态属性:<code>#instance</code></li><li>提供静态方法<code>getInstance</code>:<ol><li>调用时判断<code>#instance</code>是否存在:</li><li>存在:直接返回</li><li>不存在:实例化,保存,并返回</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleTon</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">   <span class="comment">// 私有属性，保存唯一实例</span></span><br><span class="line">   <span class="keyword">static</span> #instance</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取单例的方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(this) // SingleTon类</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">SingleTon</span>.#instance === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 内部可以调用构造函数</span></span><br><span class="line">      <span class="title class_">SingleTon</span>.#instance = <span class="keyword">new</span> <span class="title class_">SingleTon</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">SingleTon</span>.#instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1===s2)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>实际应用:</strong></p><ol><li>vant组件库中的弹框组件,保证弹框是单例<ol><li>toast组件:<a href="https://gitee.com/vant-contrib/vant/blob/main/packages/vant/src/toast/index.ts">传送门</a></li><li>notify组件:<a href="https://gitee.com/vant-contrib/vant/blob/main/packages/vant/src/notify/index.ts">传送门</a></li><li>如果弹框对象<ol><li>不存在,–&gt;创建一个新的</li><li>存在,直接用</li></ol></li></ol></li><li>vue中注册插件,用到了单例的思想(只能注册一次)<ol><li>vue2:<a href="https://gitee.com/vuejs/vue/blob/main/src/core/global-api/use.ts">传送门</a></li><li>vue3:<a href="https://gitee.com/vuejs/core/blob/main/packages/runtime-core/src/apiCreateApp.ts#L256">传送门</a></li></ol></li></ol><p><strong>小结:</strong></p><ol><li><p>单例模式:</p><ol><li>保证,应用程序中,某个对象,只能有一个</li></ol></li><li><p>自己实现:</p><ol><li>getInstance方法,<ol><li>实例存在-&gt;返回</li><li>实例不存在-&gt;创建,保存-&gt;返回</li></ol></li></ol></li><li><p>应用场景:</p><ol><li>我在看源码的时候,发现,vant的toast和notify组件都用到了单例<ol><li>多次弹框,不会创建多个弹框,复用唯一的弹框对象</li></ol></li><li>vue中注册插件,vue3和vue2都会判断插件是否已经注册,已注册,直接提示用户</li></ol></li></ol><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>在对象之间定义一个<strong>一对多</strong>的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。</p><p><strong>举个例子:</strong></p><ol><li><code>dom</code>事件绑定，比如</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;load触发1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;load触发2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;load触发3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Vue的生命周期钩子:</p><ol><li>vue框架,提供给开发者,在Vue实例特定时期,添加自定义逻辑的,一种机制.</li><li>一共有：<ol><li>beforeCreated </li><li>created</li><li>beforeMount </li><li>Mounted </li><li>beforeUpdate </li><li>Updated </li><li>beforeDestory </li><li>destoryed</li><li>缓存组件（keep-alive）：activated  deactivated</li></ol></li></ol></li><li><p>Vue的响应式原理:</p><ol><li><p><a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html">传送门</a></p></li><li><p><strong>自己描述：响应式原理</strong></p><ol><li><p>创建Vue实例时，会通过Object.definedProperty将data中的数据的每个属性都转为get和set</p></li><li><p>就可以监测到对数据的，取值get和赋值set</p></li><li><p>只要数据发生了变更，就会去通知所有使用数据为止，更新</p><ol><li>页面</li><li>侦听器</li><li>…</li></ol><p><img src="https://bu.dusays.com/2023/08/19/64e0ac0f284d5.png" alt="vue响应式原理.png"></p></li></ol></li><li><p>自己描述2-涉及到虚拟dom：</p><ol><li>可能被追问：<ol><li>为什么需要使用<strong>虚拟dom</strong>？ 虚拟dom内存中，速度快</li><li>新旧dom比较，如何比较的？ <ol><li><strong>diff算法</strong> 找不同</li><li>vue中同级比较<ol><li>有id，id不同，直接不同</li><li>没有id，比元素，在比属性</li></ol></li></ol></li><li>vue的diff算法和react的diff算法有什么区别？</li></ol></li></ol><p><img src="https://bu.dusays.com/2023/08/19/64e0ac9e5e0c8.png" alt="vue响应式原理2.png"></p></li><li><p>自己回答：</p><ol><li>vue2中使用的是 Object.definedProperty，动态新增的属性，没有响应式，this.$set</li><li>vue3中是Proxy<ol><li>没有这个问题，Proxy可以检测到所有属性的改变</li><li>vue3中只用了 Proxy 吗？不是，引用了<code>Object.definedProperty</code></li></ol></li></ol></li></ol></li></ol><h3 id="发布订阅模式01-应用场景"><a href="#发布订阅模式01-应用场景" class="headerlink" title="发布订阅模式01-应用场景"></a>发布订阅模式01-应用场景</h3><p>发布订阅模式可以实现的效果类似观察者模式,但是两者略有差异,一句话描述:一个有中间商(<strong>发布订阅模式</strong>)一个没中间商(<strong>观察者模式</strong>)</p><p><img src="https://bu.dusays.com/2023/08/19/64e0ca7198385.png" alt="image-20230626153656768.png"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0ca7198385.png" alt="image-20230706002933258.png"></p><p><strong>应用场景:</strong></p><ol><li><code>vue2</code>中的<code>EventBus</code>:<a href="https://v2.cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95-%E4%BA%8B%E4%BB%B6">传送门</a></li><li><code>vue3</code>中因为移除了实例上对应方法，可以使用替代方案:<a href="https://v3-migration.vuejs.org/zh/breaking-changes/events-api.html">传送门</a><ol><li>官方推荐,用插件</li><li>微微一笑:直接写</li></ol></li></ol><h3 id="发布订阅模式02-自己写一个事件总线"><a href="#发布订阅模式02-自己写一个事件总线" class="headerlink" title="发布订阅模式02-自己写一个事件总线"></a>发布订阅模式02-自己写一个事件总线</h3><p><strong>需求:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">HMEmitter</span>()</span><br><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;事件名1&#x27;</span>,回调函数)</span><br><span class="line">bus.$on(<span class="string">&#x27;事件名1&#x27;</span>,回调函数)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;事件名&#x27;</span>,参数<span class="number">1</span>,...,参数n)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件</span></span><br><span class="line">bus.$off(<span class="string">&#x27;事件名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次性事件</span></span><br><span class="line">bus.$once(<span class="string">&#x27;事件名&#x27;</span>,回调函数)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义类</li><li>私有属性:<code>#handlers=&#123;事件1:[f1,f2],事件2:[f3,f4]&#125;</code></li><li>实例方法:<ol><li>$on(事件名,回调函数):注册事件</li><li>$emit(事件名,参数列表):触发事件</li><li>$off(事件名):移除事件</li><li>$once(事件名,回调函数):注册一次性事件</li></ol></li></ol><p><strong>基础模板:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>自己实现事件总线<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;on&quot;</span>&gt;</span>注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;emit&quot;</span>&gt;</span>触发事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;off&quot;</span>&gt;</span>移除事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;once-on&quot;</span>&gt;</span>一次性事件注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;once-emit&quot;</span>&gt;</span>一次性事件触发<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">HMEmmiter</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 逻辑略</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 简化 querySelector调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">qs</span>(<span class="params">selector</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.on&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 触发事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.emit&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 移除事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.off&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次性事件注册</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.once-on&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次性事件触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">qs</span>(<span class="string">&#x27;.once-emit&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HMEmmiter</span> &#123;</span><br><span class="line">  #handlers = &#123;&#125;</span><br><span class="line">  <span class="comment">// 注册事件</span></span><br><span class="line">  $on(event, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.#handlers[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#handlers[event] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册继续push</span></span><br><span class="line">    <span class="variable language_">this</span>.#handlers[event].<span class="title function_">push</span>(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  $emit(event, ...args) &#123;</span><br><span class="line">      <span class="comment">// 取出保存的时间 []</span></span><br><span class="line">    <span class="keyword">const</span> funcs = <span class="variable language_">this</span>.#handlers[event] || []</span><br><span class="line">      <span class="comment">// 挨个触发，并传入参数</span></span><br><span class="line">    funcs.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">func</span>(...args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除事件</span></span><br><span class="line">  $off(event) &#123;</span><br><span class="line">      <span class="comment">// event 对应的回调函数数组设置空即可</span></span><br><span class="line">    <span class="variable language_">this</span>.#handlers[event] = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一次性事件:注册了以后，只能触发一次</span></span><br><span class="line">  $once(event, callback) &#123;</span><br><span class="line">      <span class="comment">// 触发之后，清空，移除</span></span><br><span class="line">    <span class="variable language_">this</span>.$on(event, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 执行 callback</span></span><br><span class="line">      <span class="title function_">callback</span>(...args)</span><br><span class="line">        <span class="comment">// 移除注册的event事件</span></span><br><span class="line">      <span class="variable language_">this</span>.$off(event)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>在原型模式下，当我们想要创建一个对象时，会先找到一个对象作为原型，然后通过<strong>克隆原型</strong>的方式来创建出一个与原型一样（共享一套数据&#x2F;方法）的对象。在<code>JavaScript</code>中,<code>Object.create</code>就是实现原型模式的内置<code>api</code></p><p><strong>应用场景:</strong></p><p><code>vue2</code>中重写数组方法:</p><ol><li>调用方法时(<code>push</code>,<code>pop</code>,<code>shift</code>,<code>unshift</code>,<code>splice</code>,<code>sort</code>,<code>reverse</code>)可以触发视图更新:<a href="https://v2.cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E6%9B%B4%E6%96%B9%E6%B3%95">传送门</a></li><li>源代码:<a href="https://gitee.com/vuejs/vue/blob/main/src/core/observer/array.ts">传送门</a>&#96;</li><li>测试一下:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>原型模式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.9/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">foods</span>: [<span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">foods</span>.<span class="property">push</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/19/64e0bad8f3abf.png" alt="原型模式.png"></p><p><strong>自己描述:</strong></p><ol><li>vue2中数组重写了7个方法,内部基于数组的原型<code>Array.prototype</code>创建了一个新对象</li><li><code>Object.create</code>浅拷贝</li><li>内部<ol><li>调用数组的原方法,获取结果并返回—方法的功能和之前一致</li><li>通知了所有的观察者去更新视图</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="property">arr</span>.<span class="property">push</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ol start="4"><li>原型模式,基于某个对象,创建一个新的对象,JS中,通过Object.create即可实现,Vue中重写数组方法就是这么做的 ↑</li></ol><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式指的是<strong>拦截和控制</strong>与目标对象的交互,在<code>JavaScript</code>中通过<code>Proxy</code>,即可实现对象的代理,<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">传送门</a></p><p><strong>核心语法:</strong></p><ol><li>初始对象可以直接修改任意属性</li><li>通过<code>Proxy</code>生成代理对象，限制访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前obj对象的name和age属性可以被随意修改</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过Proxy创建代理对象 </span></span><br><span class="line"><span class="comment">// 最大的特点就是，无论操作的属性，在对象上是否存在 都会触发 get set</span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="comment">// []语法进行对象的取值和赋值</span></span><br><span class="line">    <span class="comment">// target: 源对象</span></span><br><span class="line">    <span class="comment">// key： 属性名</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get触发&#x27;</span>)</span><br><span class="line">    <span class="comment">// return target[key]</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 结合Reflect的静态方法替换[]语法</span></span><br><span class="line">    <span class="comment">// target: 源对象</span></span><br><span class="line">    <span class="comment">// key： 属性名</span></span><br><span class="line">    <span class="comment">// value：设置的值</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set触发&#x27;</span>)</span><br><span class="line">   <span class="comment">// target[key]=value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 代理对象属性赋值，触发set</span></span><br><span class="line">objProxy.<span class="property">name</span> = <span class="string">&#x27;rose&#x27;</span></span><br><span class="line"><span class="comment">// 代理对象属性取值，触发get</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objProxy.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><p><strong>需求:</strong></p><p>基于上一份代码实现:</p><ol><li>属性取值和赋值时,如果属性不存在,报错</li><li>修改name时,只能设置字符串,否则报错</li></ol><p><strong>关键步骤:</strong></p><ol><li>在<code>get</code>中添加取值判断逻辑</li><li>在<code>set</code>中添加赋值判断逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前obj对象的name和age属性可以被随意修改</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过Proxy创建代理对象 </span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="comment">// []语法进行对象的取值和赋值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target[key]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target[key])&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;属性不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;name&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断类型</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        target[key]=value</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;name属性只能设置字符串&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 代理对象属性赋值，触发set</span></span><br><span class="line">objProxy.<span class="property">name</span> = <span class="string">&#x27;rose&#x27;</span></span><br><span class="line"><span class="comment">// 不存在friend 报错</span></span><br><span class="line">objProxy.<span class="property">friend</span> = <span class="string">&#x27;rose&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>实际应用:</strong></p><p><code>Vue3</code>的响应式原理-<a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#how-reactivity-works-in-vue">传送门</a></p><ol><li><p>通过<code>Proxy</code>创建响应式对象</p></li><li><p><code>getter/setter</code>用于<code>ref</code></p></li><li><p>Vue2考虑兼容,用的是兼容性好的<code>Object.defineProperty</code>,但是无法跟踪动态增加的属性</p></li><li><p><code>Vue3</code>中用了<code>Proxy</code>,他对于动态增加的属性,也可以检测到,但是Vue3中也用了<code>Object.defineProperty</code></p><ol><li><p><code>reactive</code>用的是<code>Proxy</code></p><ol><li>注意点:解构之后会丢失响应性,需要用<code>toRefs</code></li></ol></li><li><p><code>ref</code>用的是<code>Object.defineProperty</code></p></li></ol></li><li><p>观察者模式–&gt;虚拟dom-&gt;diff算法</p></li></ol><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示.简而言之就是:<strong>遍历</strong></p><p>遍历作为日常开发中的<strong>高频</strong>操作,JavaScript中有大量的默认实现:<strong>比如</strong></p><ol><li><code>Array.prototype.forEach</code>:遍历数组</li><li><code>NodeList.prototype.forEach</code>:遍历<code>dom</code>,<code>document.querySelectorAll</code></li><li><code>for in</code></li><li><code>for of</code></li></ol><p><strong>面试题</strong>:</p><ol><li><p><code>for in</code> 和<code>for of</code> 的区别?</p><ol><li><p><strong><code>for...in</code></strong> <strong>语句</strong>以任意顺序迭代一个对象的除<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>以外的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举</a>属性，包括继承的可枚举属性。</p><ol><li>对象默认的属性以及动态增加的属性都是<strong>可枚举</strong>属性</li><li>遍历出来的是<strong>属性名</strong></li><li>继承而来的属性也会遍历</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 原型上默认的属性和方法,都是不可枚举(for in不出来)</span></span><br><span class="line">    <span class="comment">// 动态添加的,默认是可枚举(可以for in出来)</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;奔跑&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">swim</span> = <span class="string">&#x27;游泳&#x27;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">&#x27;小鸡&#x27;</span>, <span class="string">&#x27;小鸭&#x27;</span>, <span class="string">&#x27;小鱼&#x27;</span>]</span><br><span class="line">        <span class="comment">// 遍历的是key,继承而来的属性也可以遍历出来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key:&#x27;</span>, key) <span class="comment">// key: 0  key: 1  key: 2  key: swim  key: run  </span></span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 遍历的值,继承而来的遍历不出来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iterator:&#x27;</span>, iterator) <span class="comment">// key: 小鸡 key: 小鸭 key: 小鱼</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>for...of</code>语句</strong>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols">可迭代对象</a>（包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map"><code>Map</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set"><code>Set</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">arguments</a> 对象等等）上创建一个迭代循环</p><ol><li>for of不会遍历<strong>继承</strong>而来的属性</li><li>遍历出来的是<strong>属性值</strong></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;小鸡&#x27;</span>, <span class="string">&#x27;小鸭&#x27;</span>, <span class="string">&#x27;小鱼&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 obj可以 for of for of出来的是他内部的 数组</span></span><br><span class="line"><span class="comment">// 自定义 forof执行的行为</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: <span class="string">&#x27;rose&#x27;</span>,</span><br><span class="line">  <span class="attr">skill</span>: <span class="string">&#x27;jump together&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;沙县&#x27;</span>, <span class="string">&#x27;猪脚饭&#x27;</span>, <span class="string">&#x27;手撕鸡&#x27;</span>],</span><br><span class="line">  <span class="comment">// 属性名表达式</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">// console.log(this)</span></span><br><span class="line">    <span class="comment">// 返回一个对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">foods</span>[index++]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历的值,继承而来的遍历不出来</span></span><br><span class="line"><span class="comment">// for (const iterator of arr) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;iterator:&#x27;, iterator)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for of 并不能遍历所有的东西,比如 object无法遍历</span></span><br><span class="line"><span class="comment">// 直接遍历对象: obj is not iterable,obj不可迭代</span></span><br><span class="line"><span class="comment">// [Symbol.iterator] 添加之后,可以迭代,要求返回特定格式的对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iterator:&#x27;</span>, iterator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可迭代协议和迭代器协议:</strong></p><ol><li><p>可迭代协议:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">传送门</a></p><ol><li>给对象增加属方法<code> [Symbol.iterator]()&#123;&#125;</code></li><li>返回一个符合迭代器协议的对象</li></ol></li><li><p>迭代器协议:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">传送门</a></p><ol><li>next方法,返回对象:<ol><li><code>&#123;done:true&#125;</code>,迭代结束</li><li><code>&#123;done:false,value:&#39;xx&#39;&#125;</code>,获取解析并接续迭代</li></ol></li></ol></li><li><p>面试问及:</p><ol><li>for of可以遍历一部分的类型,比如数组,map</li><li>对象无法遍历,因为对象没有实现 可迭代协议,迭代器协议</li><li>可迭代协议,迭代器协议,约定了:<ol><li>可迭代协议:对象上要有一个指定属性的函数,返回 满足迭代器要求的对象</li><li>迭代器协议: <code>next</code>方法,返回<code>&#123;done:true&#125;,&#123;done:false,value:&#39;x&#39;&#125;</code></li><li>我自己尝试写过一下,但是仅针对语法</li><li>可以和面试官讨论一下,可以用在哪?</li></ol></li></ol></li><li><p>直接打印对象,看到<strong>Symbol(Symbol.iterator)</strong>,说明可以使用<code>for of</code></p></li></ol><h2 id="JS调用栈"><a href="#JS调用栈" class="headerlink" title="JS调用栈"></a>JS调用栈</h2><ol><li>执行上下文和调用栈</li><li>栈溢出</li></ol><h3 id="执行上下文和调用栈"><a href="#执行上下文和调用栈" class="headerlink" title="执行上下文和调用栈"></a>执行上下文和调用栈</h3><p><a href="https://262.ecma-international.org/6.0/">执行上下文</a>:是指在代码执行时，JavaScript引擎创建的一种数据结构，它包含了函数执行时的状态信息，例如变量、函数参数、函数返回值等。</p><p>在以下三种情况下会创建执行上下文</p><ol><li><p>JavaScript执行全局代码时，创建<strong>全局执行上下文</strong></p></li><li><p>调用函数时，创建<strong>函数执行上下文</strong></p></li><li><p>使用 eval 函数时，创建<strong>执行上下文</strong></p><ol><li>给他一个字符串,解析为js并执行</li></ol></li></ol><p>我们通过调试工具确认一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funA</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funcB</span>(<span class="params">c</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="title function_">funA</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> res + c</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="title function_">funcB</span>(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 执行函数时，创建对应执行上下文，内部保存变量，代码等一系列执行函数需要的东西</span></span><br><span class="line"><span class="comment">// 进入JS调用堆栈，执行 ==&gt; 执行完毕之后 =&gt; 出栈</span></span><br><span class="line"><span class="comment">// 所有代码执行完毕为止</span></span><br></pre></td></tr></table></figure><p><strong>调用栈:</strong></p><ol><li>执行上下文会存在JS调用栈中,栈的结构特点是:<strong>先进后出</strong></li></ol><p><img src="https://bu.dusays.com/2023/08/19/64e0ca6fa8242.png" alt="image-20230706133635838.png"></p><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>栈的容量是有限的,如果内部的内容一直得不到释放,就会出现栈溢出,比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈溢出，JS调用栈有容量大小，太大了，会溢出</span></span><br><span class="line"><span class="comment">// JS调用堆栈装满了之后，就会出现</span></span><br><span class="line"><span class="comment">// Maximum call stack size exceeded</span></span><br><span class="line"><span class="comment">// 日常开发常见的：</span></span><br><span class="line"><span class="comment">// 1. 死递归</span></span><br><span class="line"><span class="comment">// 2. 导航守卫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  i++</span><br><span class="line">  <span class="title function_">sum</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/19/64e0ca7057592.png" alt="image-20230708104801552.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0a7aa72c29.png" alt="设计模式1.png"><br><img src="https://bu.dusays.com/2023/08/19/64e0de1ab6975.png" alt="设计模式2.png"><br><img src="https://bu.dusays.com/2023/08/19/64e0de18eb2b5.png" alt="设计模式3.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://wangdoc.com/es6/">阮一峰-《ECMAScript 6 教程》</a></li><li><a href="https://www.ituring.com.cn/book/2472">图灵社区-JavaScript高级程序设计</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原理二</title>
      <link href="/posts/882eae5.html"/>
      <url>/posts/882eae5.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>Currying 又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p> 柯里化 作为一种高阶技术, 可以提升函数的复用性和灵活性。</p><h3 id="什么是函数柯里化"><a href="#什么是函数柯里化" class="headerlink" title="什么是函数柯里化"></a>什么是函数柯里化</h3><p>函数柯里化 (Currying) 是一种<strong>将多个参数的函数转换为单个参数函数</strong>的技术</p><p>转换完毕之后的函数:<strong>只传递函数的一部分参数来调用，让他返回一个新的函数去处理剩下的参数。</strong></p><p><strong>例子:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调整函数 sum</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写为 可以实现如下效果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>))<span class="comment">// </span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><code>sum</code>改为接收一个参数，返回一个新函数</li><li>新函数内部将<strong>参数1</strong>，<strong>参数2</strong>累加并返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="柯里化面试题-全局变量"><a href="#柯里化面试题-全局变量" class="headerlink" title="柯里化面试题-全局变量"></a>柯里化面试题-全局变量</h3><p>柯里化在面试的时候一般以笔试题出现,比如</p><p><strong>需求:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c, d, e</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d + e</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改写函数sum实现:参数传递到5个即可实现累加</span></span><br><span class="line"><span class="comment">// sum(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3,4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4,5)</span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>接收不定长参数</li><li>存储已传递的参数</li><li>判断长度<ol><li>满足5:累加</li><li>不满足:继续返回<strong>函数本身</strong></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存参数</span></span><br><span class="line"><span class="keyword">let</span> nums = []</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currySum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 将传入的参数 保存到数组中</span></span><br><span class="line">  nums.<span class="title function_">push</span>(...args)</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="comment">// 累加</span></span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curv</span>) =&gt;</span> prev + curv, <span class="number">0</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> currySum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="柯里化面试题-使用闭包"><a href="#柯里化面试题-使用闭包" class="headerlink" title="柯里化面试题-使用闭包"></a>柯里化面试题-使用闭包</h3><p><strong>需求:</strong></p><ol><li>使用<strong>闭包</strong>将上一节代码中的全局变量,保护起来</li><li>支持自定义累加的参数个数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMaker</span>(<span class="params">length</span>)&#123;</span><br><span class="line">    <span class="comment">// 逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 支持5个累加</span></span><br><span class="line"><span class="keyword">const</span> sum5 = <span class="title function_">sumMaker</span>(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 支持7个累加</span></span><br><span class="line"><span class="keyword">const</span> sum7 = <span class="title function_">sumMaker</span>(<span class="number">7</span>)</span><br><span class="line"><span class="title function_">sum7</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义外层函数:<ol><li>定义参数<code>length</code></li><li>将全局变量迁移到函数内</li></ol></li><li>定义内层函数:<ol><li>参数长度判断,使用传入的参数<code>length</code></li><li>直接复用上一节的逻辑,并返回</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMaker</span>(<span class="params">length</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nums = []</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="comment">// 将传递的参数保存到数组中</span></span><br><span class="line">    nums.<span class="title function_">push</span>(...args)</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> &gt;= length) &#123;</span><br><span class="line">        <span class="comment">// 累加 并返回</span></span><br><span class="line">      <span class="keyword">return</span> nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curv</span>) =&gt;</span> prev + curv, <span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> inner</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持5个累加</span></span><br><span class="line"><span class="keyword">const</span> sum5 = <span class="title function_">sumMaker</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum5</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>))</span><br><span class="line"><span class="comment">// 支持7个累加</span></span><br><span class="line"><span class="keyword">const</span> sum7 = <span class="title function_">sumMaker</span>(<span class="number">7</span>)</span><br><span class="line"><span class="title function_">sum7</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="柯里化实际应用-类型判断"><a href="#柯里化实际应用-类型判断" class="headerlink" title="柯里化实际应用-类型判断"></a>柯里化实际应用-类型判断</h3><p>通过<strong>参数复用</strong>,实现一个<strong>类型判断生成器函数</strong></p><p><strong>需求:</strong></p><ol><li>将下列4个类型判断函数,改写为通过函数<code>typeOfTest</code>动态生成</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有如下4个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isUndefined</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isNumber</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">thing</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> thing === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为通过 typeOfTest 生成:</span></span><br><span class="line"><span class="keyword">const</span> typeOfTest =<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">// 参数 和 逻辑略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> isUndefined = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;undefined&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isString = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isFunction = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过 isUndefined,isNumber,isString,isFunction 来判断类型:</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">isUndefined</span>(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isNumber</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">isString</span>(<span class="string">&#x27;memeda&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isFunction</span>(<span class="function">() =&gt;</span> &#123; &#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><code>typeOfTest</code>接收参数<code>type</code>用来接收判断的类型</li><li>内部返回新函数,接收需要判断的值,并基于<code>type</code>进行判断</li><li>使用箭头函数改写为最简形式~~<a href="https://github.com/axios/axios/blob/v1.x/lib/utils.js#L20">传送门</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">typeOfTest</span> = type =&gt; <span class="function"><span class="params">thing</span> =&gt;</span> <span class="keyword">typeof</span> thing === type  </span><br></pre></td></tr></table></figure><h3 id="柯里化实际应用-固定参数"><a href="#柯里化实际应用-固定参数" class="headerlink" title="柯里化实际应用-固定参数"></a>柯里化实际应用-固定参数</h3><p>依旧是一个<strong>参数复用</strong>的实际应用</p><p><strong>需求:</strong></p><ol><li>将如下3个请求的函数(都是<strong>post</strong>请求),变为通过<code>axiosPost</code>函数动态生成</li><li>实现函数<code>axiosPost</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将如下3个请求,改写为调用 axiosPost函数即可实现</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url1&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url2&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url3&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">axiosPost</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 参数,逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">axiosPost</span>(<span class="string">&#x27;url1&#x27;</span>, data1)</span><br><span class="line"><span class="title function_">axiosPost</span>(<span class="string">&#x27;url2&#x27;</span>, data2)</span><br><span class="line"><span class="title function_">axiosPost</span>(<span class="string">&#x27;url3&#x27;</span>, data3)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>函数内部固定请求方法,post</li><li>函数内部调用<code>axios</code>发请求即可</li><li><code>axios</code>内部就是这样实现的<a href="https://github.com/axios/axios/blob/v1.x/dist/axios.js#L2667">传送门:</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">axiosPost</span> = (<span class="params">url, data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">    url, data,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结:</p><ol><li><p>函数柯里化是一种函数式编程思想:<strong>将多个参数的函数转换为单个参数函数,调用时返回新的函数接收剩余参数</strong></p></li><li><p>常见面试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c, d, e</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d + e</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改写函数sum实现:参数传递到5个即可实现累加</span></span><br><span class="line"><span class="comment">// sum(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3,4)(5)</span></span><br><span class="line"><span class="comment">// sum(1)(2,3)(4,5)</span></span><br></pre></td></tr></table></figure></li><li><p>常见应用:固定参数,比如<code>axios</code>中的:</p><ol><li><a href="https://github.com/axios/axios/blob/v1.x/lib/utils.js#L20">类型判断函数</a></li><li><a href="https://github.com/axios/axios/blob/v1.x/dist/axios.js#L2667">get,post,put等别名方法</a></li></ol></li></ol><h2 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h2><ol><li>实现Promise的核心用法</li><li>Promise的静态方法</li><li>实现Promise的静态方法</li></ol><p>首先明确Promise的核心用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="comment">// reject(&#x27;error&#x27;)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// then方法的参数1: 状态为成功的回调函数</span></span><br><span class="line"><span class="comment">// then方法的参数2: 状态为失败的回调函数</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="手写Promise-构造函数"><a href="#手写Promise-构造函数" class="headerlink" title="手写Promise-构造函数"></a>手写Promise-构造函数</h3><p><strong>需求:</strong></p><ol><li>实现MyPromise类，可以用如下的方式实例化</li><li>实例化时传入回调函数<ol><li>回调函数立刻执行</li><li>回调函数接收函数<code>resolve</code>和<code>reject</code></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve() </span></span><br><span class="line">  <span class="comment">// reject() </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义类<code>MyPromise</code></li><li>实现构造函数，接收<code>executor</code>–传入的回调函数</li><li>构造函数中定义<code>resolve</code>和<code>reject</code>并传入<code>executor</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">// 2. 构造函数 </span></span><br><span class="line">  <span class="comment">// executor 执行器，实例化时立刻调用</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 3. 定义 resolve reject 传入executor</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolve-call&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reject-call&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/17/64de3335713d9.png" alt="promise1.png"></p><h3 id="手写Promise-状态、成功or失败原因"><a href="#手写Promise-状态、成功or失败原因" class="headerlink" title="手写Promise-状态、成功or失败原因"></a>手写Promise-状态、成功or失败原因</h3><p><strong>需求:</strong></p><ol><li><code>MyPromise</code>增加<code>state</code>属性，只能是如下3个值<ol><li><code>pending</code>:待定，默认状态</li><li><code>fulfilled</code>:已兑现，操作成功</li><li><code>rejected</code>:已拒绝，操作失败</li></ol></li><li><code>MyPromise</code>增加<code>result</code>属性，记录成功&#x2F;失败原因</li><li>调用<code>resolve</code>或<code>reject</code>,修改状态,并记录成功&#x2F;失败原因</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;成功结果&#x27;)</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;失败原因&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义常量保存状态，避免<strong>硬编码</strong></li><li><code>MyPromise</code>中定义<ol><li>属性:<code>state</code>保存状态，<code>result</code>成功&#x2F;失败原因</li><li>修改<code>state</code>的私有方法，修改状态并记录<code>result</code></li><li>注意:<code>state</code>只有在<code>pending</code>时，才可以修改，且不可逆</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义常量保存状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">// 2. 定义属性 state（状态） reason（成功/失败原因）</span></span><br><span class="line">  state = <span class="variable constant_">PENDING</span>  <span class="comment">// 默认状态</span></span><br><span class="line">  result = <span class="literal">undefined</span>  <span class="comment">// 成功或失败的原因 默认不知道</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 3. 实现 resolve和reject内部逻辑</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// if(this.state !== PENDING) &#123;</span></span><br><span class="line">        <span class="comment">//     return 如果状态不是等待，后面不执行 状态确定就不能改变</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// this.state = FULFILLED</span></span><br><span class="line">        <span class="comment">// this.result = result</span></span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 提取resolve和reject内部公共逻辑</span></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/17/64de3335a27f7.png" alt="promise2.png"></p><h3 id="手写Promise-then方法的核心功能"><a href="#手写Promise-then方法的核心功能" class="headerlink" title="手写Promise-then方法的核心功能"></a>手写Promise-then方法的核心功能</h3><p><strong>需求:</strong></p><ol><li>then方法的回调函数1: 状态变为<code>fulfilled</code>时触发，并获取成功结果</li><li>then方法的回调函数2: 状态变为<code>rejected</code>时触发，并获取失败原因</li><li>then方法的回调函数1或2没有传递的特殊情况处理，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then#%E5%8F%82%E6%95%B0">参考:then方法的参数</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;成功结果&#x27;)</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;失败原因&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>增加<code>then</code>方法，根据不同的状态执行对应的回调函数，并传入<code>result</code><ol><li>参数1:成功的回调函数</li><li>参数2:失败的回调函数</li></ol></li><li>没有传递<code>onFulfilled</code>,<code>onRejected</code>时，设置默认值(参考文档)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1. 增加then方法，根据不同的状态执行对应的回调函数</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 处理未传入回调函数的特殊情况</span></span><br><span class="line">      <span class="comment">// 如果不是函数，设置为一个 接受一个参数，直接返回该参数的函数</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function">(<span class="params">value</span>) =&gt;</span> value</span><br><span class="line">      <span class="comment">// 不是函数，设置一个为 接收一个参数，使用 throw 抛出的函数</span></span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 根据状态，调用不同的回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="comment">// 成功的状态</span></span><br><span class="line">        <span class="comment">// 调用对应的回调函数，并传递结果</span></span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/17/64de33344950c.png" alt="promise3.png"></p><h3 id="手写Promise-then方法支持异步和多次调用（非链式）"><a href="#手写Promise-then方法支持异步和多次调用（非链式）" class="headerlink" title="手写Promise-then方法支持异步和多次调用（非链式）"></a>手写Promise-then方法支持异步和多次调用（非链式）</h3><p><strong>需求:</strong></p><ol><li>实例化传入的回调函数,内部支持异步操作</li><li>then方法支持多次调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&#x27;成功结果&#x27;)</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败原因&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success1:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error1:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success2:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error2:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success3:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error3:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义属性,保存传入的回调函数:[]</li><li>调用<code>then</code>方法并且状态为<code>pending</code>时保存传入的成功&#x2F;失败回调函数</li><li>调用<code>resolve</code>和<code>reject</code>时执行上一步保存的回调函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 1. 添加handlers属性保存then方法添加的回调函数</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="comment">// 调用保存在handlers中的回调函数</span></span><br><span class="line">      <span class="comment">// 从开头部分取出回调函数执行</span></span><br><span class="line">      <span class="comment">// while(this.handlers.length &gt; 0) &#123;</span></span><br><span class="line">      <span class="comment">//    通过解构获取对应的回调函数</span></span><br><span class="line">      <span class="comment">//    const &#123; onFulfilled &#125; = this.handlers.shift()</span></span><br><span class="line">      <span class="comment">//    onFulfilled(this.result)</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 4. 调用runHandlers 执行回调函数</span></span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="comment">// 4. 调用runHandlers 执行回调函数</span></span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 抽取方法 执行 fulfilled/rejected状态时的回调函数</span></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">          <span class="comment">// 成功</span></span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 失败</span></span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 2. 状态为 pending 时,状态还没改变，回调函数还不能执行，将回调函数添加到数组中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        onFulfilled, onRejected</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-链式编程-成功状态-普通返回值"><a href="#手写Promise-链式编程-成功状态-普通返回值" class="headerlink" title="手写Promise-链式编程-成功状态+普通返回值"></a>手写Promise-链式编程-成功状态+普通返回值</h3><p><strong>需求:</strong></p><ol><li><code>then</code>的链式编程</li><li>目前只考虑<code>resolve</code>内部返回普通值的情况</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>调整<code>then</code>方法，返回一个新的<code>MyPromise</code>对象</li><li>内部获取<code>onFulfilled</code>的执行结果,传入<code>resolve</code>方法继续执行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;</span><br><span class="line">    <span class="comment">// 1. 创建并返回新的Promise对象</span></span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">          <span class="comment">// 成功状态</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        <span class="comment">// 2. 继续调用resolve方法 then方法返回的Promise对象的resolve</span></span><br><span class="line">        <span class="comment">// 传递成功的结果给下一个 then</span></span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/18/64df4c7cc60ec.png" alt="promise4.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7da4b18.png" alt="promise5.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7569adf.png" alt="promise6.png"></p><h3 id="手写Promise-链式编程-成功状态-返回Promise"><a href="#手写Promise-链式编程-成功状态-返回Promise" class="headerlink" title="手写Promise-链式编程-成功状态+返回Promise"></a>手写Promise-链式编程-成功状态+返回Promise</h3><p><strong>需求:</strong></p><ol><li><code>then</code>的链式编程</li><li>目前考虑<code>resolve</code>内部返回<code>MyPromise</code>的情况</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>内部获取<code>onFulfilled</code>的执行结果:</li><li>如果是<code>MyPromise</code>实例，继续<code>then</code>下去并传入<code>resolve</code>和<code>reject</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        <span class="comment">// 1. 判断是否为MyPromise的实例</span></span><br><span class="line">        <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">          <span class="comment">// 2. 继续调用then方法 传入 resolve 和 reject</span></span><br><span class="line">          res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/18/64df4c7a1e191.png" alt="promise7.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7b1b34c.png" alt="promise8.png"></p><p><img src="https://bu.dusays.com/2023/08/18/64df4c7da8e76.png" alt="promise9.png"></p><h3 id="手写Promise-链式编程-失败状态"><a href="#手写Promise-链式编程-失败状态" class="headerlink" title="手写Promise-链式编程-失败状态"></a>手写Promise-链式编程-失败状态</h3><p><strong>需求:</strong></p><ol><li><code>then</code>的第二个回调函数，执行<code>reject</code>时的链式编程</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>参考<code>resolve</code>的逻辑</li><li>先实现功能,再抽取为函数直接调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">         <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="comment">// const res = onFulfilled(this.result)</span></span><br><span class="line">        <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">        <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//   resolve(res)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 参考成功状态的逻辑实现 失败状态</span></span><br><span class="line">        <span class="comment">// const res = onRejected(this.result)</span></span><br><span class="line">        <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">        <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//   reject(res)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 抽取 then中的逻辑，并替换掉原本代码</span></span><br><span class="line">  #<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">     <span class="comment">// 调用回调函数 获取执行的结果</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>) </span><br><span class="line">    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        <span class="comment">// res 是promise对象 then 方法</span></span><br><span class="line">      res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-链式编程-支持异步"><a href="#手写Promise-链式编程-支持异步" class="headerlink" title="手写Promise-链式编程-支持异步"></a>手写Promise-链式编程-支持异步</h3><p><strong>需求:</strong></p><ol><li>执行异步操作时，支持链式编程</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    .<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>then的内部将<code>resolve</code>,<code>reject</code>也推送到数组中</li><li>调整<code>runHandlers</code>函数，内部直接调用<code>runPromise</code>函数即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  handlers = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 2. 解构出resolve,reject执行和上一步一样的逻辑</span></span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected, resolve, reject &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 将 resolve和reject也推送到数组中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          onFulfilled, onRejected, resolve, reject</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-使用微任务"><a href="#手写Promise-使用微任务" class="headerlink" title="手写Promise-使用微任务"></a>手写Promise-使用微任务</h3><p><strong>需求:</strong></p><ol><li>如下代码打印结果为<code>1,2,4,3</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>使用<code>queueMicrotask</code>包裹<code>runPromise</code>的内部逻辑即可</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask">传送门:MDN-queueMicrotask</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide">传送门:MDN-queueMicrotask使用指南</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 使用queueMicrotask 包裹内部逻辑即可</span></span><br><span class="line">  <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><p>手写<code>Promise</code>的核心代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存状态的常量 避免后续 硬编码（代码中写死某个值）</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义类 后续new实例化</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">      <span class="comment">// 状态</span></span><br><span class="line">      state = <span class="variable constant_">PENDING</span></span><br><span class="line">      <span class="comment">// 成功、失败原因 结果</span></span><br><span class="line">      result = <span class="literal">undefined</span> <span class="comment">// 成功或失败的原因 默认不知道</span></span><br><span class="line">      <span class="comment">// 待执行的回调函数 异步的回调函数 [&#123; onFulfilled,onRejected,resolve,reject &#125;]</span></span><br><span class="line">      handlers = []</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 构造函数 resolve定义 reject定义 执行传入的回调函数</span></span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;  <span class="comment">// 接收 new MyPromise((resolve,reject)=&gt; &#123;console.log(&#x27;立刻执行&#x27;)&#125; ) 传进来的回调函数，然后 resolve，reject 传给回调函数executor</span></span><br><span class="line">        <span class="comment">// 定义 resolve和reject</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 抽取封装 #changeState</span></span><br><span class="line">        <span class="comment">// if(this.state !== PENDING) &#123;</span></span><br><span class="line">        <span class="comment">//     return 如果状态不是等待，后面不执行 状态确定就不能改变</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// this.state = FULFILLED</span></span><br><span class="line">        <span class="comment">// this.result = result</span></span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, result)</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 调用保存在handlers中的回调函数</span></span><br><span class="line">          <span class="comment">// 从开头部分取出回调函数执行</span></span><br><span class="line">          <span class="comment">// while(this.handlers.length &gt; 0) &#123;</span></span><br><span class="line">          <span class="comment">//    通过解构获取对应的回调函数</span></span><br><span class="line">          <span class="comment">//    const &#123; onFulfilled &#125; = this.handlers.shift()</span></span><br><span class="line">          <span class="comment">//    onFulfilled(this.result)</span></span><br><span class="line">          <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">          <span class="comment">// 调用runHandlers 执行回调函数</span></span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, result)</span><br><span class="line">          <span class="variable language_">this</span>.#<span class="title function_">runHandlers</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收传入的执行器，接收定义的resolve和reject</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据状态执行回调函数的 私有方法</span></span><br><span class="line">      <span class="comment">// 执行回调函数，取出数组中的回调函数，执行到没有为止 用shift()开头弹出</span></span><br><span class="line">      #<span class="title function_">runHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 循环执行到数组长度为0为止</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 2. 解构出resolve,reject执行和上一步一样的逻辑</span></span><br><span class="line">          <span class="keyword">const</span> &#123; onFulfilled, onRejected, resolve, reject &#125; = <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">shift</span>()</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;  <span class="comment">// this.state = &#x27;fulfilled&#x27;硬编码</span></span><br><span class="line">          <span class="comment">// 成功 执行 和 then 中类似的逻辑</span></span><br><span class="line">          <span class="comment">// 获取结果，根据是否为Promise以及状态调用对应的逻辑</span></span><br><span class="line">          <span class="comment">// onFulfilled(this.result)</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            <span class="comment">// onRejected(this.result)</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//提取resolve，reject内部公共逻辑  修改状态的（pending时才可以修改，执行到没有为止） 私有方法</span></span><br><span class="line">      #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// then方法，接收成功和失败的回调函数 根据不同的状态执行对应的回调函数</span></span><br><span class="line">      <span class="comment">// 链式编程 promise对象.then(xxx).then(xxx)</span></span><br><span class="line">      <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">        <span class="comment">// onFulfilled 和 onRejected 的非空判断</span></span><br><span class="line">        <span class="comment">// 处理未传入回调函数的特殊情况</span></span><br><span class="line">        <span class="comment">// 如果不是函数，设置为一个 接受一个参数，直接返回该参数的函数</span></span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">        <span class="comment">// 不是函数，设置一个为 接收一个参数，使用 throw 抛出的函数</span></span><br><span class="line">        onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证链式编程，返回Promise</span></span><br><span class="line">        <span class="comment">// 创建一个新的Promise对象 并返回</span></span><br><span class="line">        <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//  根据状态，调用不同的回调函数</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">            <span class="comment">// const res = onFulfilled(this.result)</span></span><br><span class="line">            <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">            <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">            <span class="comment">// &#125; else &#123;</span></span><br><span class="line">            <span class="comment">//   resolve(res)</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// 抽取封装逻辑</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onFulfilled, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">             <span class="comment">//  参考成功状态的逻辑实现 失败状态</span></span><br><span class="line">             <span class="comment">// const res = onRejected(this.result)</span></span><br><span class="line">             <span class="comment">// if (res instanceof MyPromise) &#123;</span></span><br><span class="line">             <span class="comment">//   res.then(resolve, reject)</span></span><br><span class="line">             <span class="comment">// &#125; else &#123;</span></span><br><span class="line">             <span class="comment">//   reject(res)</span></span><br><span class="line">             <span class="comment">// &#125;</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">runPromise</span>(onRejected, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 状态为 pending 时,状态还没改变，回调函数还不能执行，将回调函数添加到数组中</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">              <span class="comment">//  将 resolve和reject也推送到数组中</span></span><br><span class="line">              onFulfilled, onRejected, resolve, reject</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 满足执行条件，执行回调函数的 私有方法</span></span><br><span class="line">      #<span class="title function_">runPromise</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用微任务队列</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 调用回调函数 获取执行的结果</span></span><br><span class="line">          <span class="keyword">const</span> res = <span class="title function_">callback</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">          <span class="comment">// 判断是否为MyPromise的实例</span></span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">            <span class="comment">// res 是Promise对象 then 方法</span></span><br><span class="line">            <span class="comment">// 继续调用then方法 传入 resolve 和 reject</span></span><br><span class="line">            res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是普通的值，直接resolve</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span> ? <span class="title function_">resolve</span>(res) : <span class="title function_">reject</span>(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/18/64df78c8b6ed3.png" alt="promise10.png"><br><img src="https://bu.dusays.com/2023/08/18/64df78c8e2db3.png" alt="promise11.png"></p><h3 id="手写Promise-实例方法catch"><a href="#手写Promise-实例方法catch" class="headerlink" title="手写Promise-实例方法catch"></a>手写Promise-实例方法catch</h3><p><strong>需求:</strong></p><ol><li>实现实例方法<code>catch</code>,可以实现如下调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">文档</a>,catch等同于:<code>then(undefined,onRjected)</code></li><li>直接添加<code>catch</code>方法，内部调用<code>then</code></li><li>使用<code>try-catch</code>包裹<code>runPromise</code>,出错时,调用<code>reject</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加catch方法，内部参考文档的方式调用then即可 </span></span><br><span class="line"><span class="comment">// 实例方法：catch 本质  then(undefined, onRjected)</span></span><br><span class="line"><span class="keyword">catch</span>(onRjected) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRjected)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理回调函数执行结果</span></span><br><span class="line">  #<span class="title function_">runPromise</span>(<span class="params">callBack, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 捕获异常，通过 reject 继续传递</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用回调函数 获取执行的结果</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title function_">callBack</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">          <span class="comment">// res是Promise对象 then方法</span></span><br><span class="line">          res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果是普通的值,直接resolve</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="手写Promise-实例方法finally"><a href="#手写Promise-实例方法finally" class="headerlink" title="手写Promise-实例方法finally"></a>手写Promise-实例方法finally</h3><p><strong>需求:</strong></p><ol><li>无论成功失败都会执行<code>finally</code>的回调函数</li><li>回调函数不接受任何参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally执行啦&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally">文档</a>:finally方法类似于调用<code>then(onFinally,onFinally)</code>,且不接受任何回调函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例方法：finally</span></span><br><span class="line"><span class="title function_">finally</span>(<span class="params">onFinally</span>) &#123;</span><br><span class="line">    <span class="comment">// 将传入的回调函数，作为成功/失败的回调函数</span></span><br><span class="line">    <span class="comment">// 成功/失败都会执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(onFinally,onFinally)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法resolve"><a href="#手写Promise-静态方法resolve" class="headerlink" title="手写Promise-静态方法resolve"></a>手写Promise-静态方法resolve</h3><p><strong>需求:</strong></p><ol><li>返回一个带有成功原因的<code>Promise</code>对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个值为2的Promise对象</span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 直接返回传入的p</span></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>增加静态方法<code>resolve</code>，根据传入的值返回不同的结果即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 静态方法 resolve</span></span><br><span class="line">  <span class="comment">// 根据传入的值，返回不同的结果即可</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是Promise 返回Promise，后续即可链式调用</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果都不是的话，直接返回一个新的Promise对象 将value传递给resolve</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法reject"><a href="#手写Promise-静态方法reject" class="headerlink" title="手写Promise-静态方法reject"></a>手写Promise-静态方法reject</h3><p><strong>需求:</strong></p><ol><li>返回一个带有拒绝原因的<code>Promise</code>对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>添加静态方法内部返回有拒绝原因的<code>Promise</code>对象即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个两个方法在axios拦截器里可以发现到。</p><h3 id="手写Promise-静态方法race"><a href="#手写Promise-静态方法race" class="headerlink" title="手写Promise-静态方法race"></a>手写Promise-静态方法race</h3><p><strong>需求:</strong></p><ol><li>接收Promise数组<ol><li>第一个Promise成功或失败时，返回一个该Promise对象及原因</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">race</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value:&#x27;</span>,value)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>内部返回新的Promise对象:<ol><li>参数判断:<ol><li>不是数组:报错</li><li>是数组:挨个解析<ol><li>任意一个Promise对象成功或失败，直接resolve或reject即可</li></ol></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="comment">// race的后面需要 .then.catch</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 参数校验 传入的是数组才继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">      <span class="comment">// 如果传入的promises是空数组，则返回的promise就将永远等待</span></span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 Promise.resolve进行处理，只要有任何一个为 成功/拒绝 即可响应结果</span></span><br><span class="line">        <span class="comment">// MyPromise.resolve 传入的无论是不是Promise--&gt;都变成Promise</span></span><br><span class="line">        <span class="comment">// 如果不处理的话，传入普通的值，会直接报错</span></span><br><span class="line">        <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(item).<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 参数错误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法all"><a href="#手写Promise-静态方法all" class="headerlink" title="手写Promise-静态方法all"></a>手写Promise-静态方法all</h3><p><strong>需求:</strong></p><ol><li>接收Promise数组，<ol><li>所有Promise都成功时，返回一个成功的Promise对象及成功数组</li><li>任何一个Promise失败，返回一个失败的Promise对象及第一个失败原因</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">all</span>([promise1, promise2, promise3]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><p>包裹一个新的Promise并返回，内部进行参数校验</p><ol><li><p>非数组:报错</p></li><li><p>数组:循环挨个解析</p><ol><li><p>长度为0:直接返回成功状态的Promise</p></li><li><p>长度不为0:挨个解析:forEach</p><ol><li><p>不是Promise对象:直接记录结果并判断是否解析完毕</p></li><li><p>是Promise对象:调用then</p><ol><li>成功:记录结果并判断是否解析完毕</li><li>失败:直接reject</li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="comment">// 本质：外部可以 then catch</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 参数校验</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">       <span class="comment">// 是数组再继续执行</span></span><br><span class="line">       <span class="comment">// 存储结果</span></span><br><span class="line">       <span class="keyword">const</span> result = []</span><br><span class="line">       <span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">// 记录结果的个数，判断是否完结</span></span><br><span class="line">       <span class="comment">// 如果长度为0 直接返回 fulfilled状态的Promise即可</span></span><br><span class="line">       <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">resolve</span>(promises)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 挨个处理</span></span><br><span class="line">       promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">           <span class="comment">// 如果是Promise</span></span><br><span class="line">           item.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">             count++</span><br><span class="line">             <span class="comment">// 这么做的目的是保证 结果的顺序 和 promise每一项的一致</span></span><br><span class="line">             result[index] = res</span><br><span class="line">             count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">           &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// 任何一个失败 无视其他的promise直接 reject即可</span></span><br><span class="line">             <span class="title function_">reject</span>(err)</span><br><span class="line">           &#125;)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 如果不是Promise 原样添加在数组中</span></span><br><span class="line">           count++</span><br><span class="line">           result[index] = item</span><br><span class="line">           <span class="comment">// 全部处理完毕时，响应结果</span></span><br><span class="line">           count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// </span></span><br><span class="line">       <span class="comment">// 错误提示</span></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法allSettled"><a href="#手写Promise-静态方法allSettled" class="headerlink" title="手写Promise-静态方法allSettled"></a>手写Promise-静态方法allSettled</h3><p><strong>需求:</strong></p><ol><li>传入Promise数组，当所有对象都已敲定时</li><li>返回一个新的Promise对象及以数组形式保存的结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取传入的Promise数组 的 敲定状态 和结果</span></span><br><span class="line"><span class="comment">// 包装到对象中 &#123; value：&#x27;成功的值&#x27; , reason: &#x27;失败原因&#x27; , status: &#x27;状态&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).</span><br><span class="line">  <span class="title function_">then</span>(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(results) &#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>增加静态方法<code>allSettled</code></li><li>内部逻辑和<code>all</code>类似，需要特别注意的地方:<ol><li>成功和失败的原因都会通过对象记录起来</li><li>返回一个记录了成功<code>&#123;state:FULFILLED,value:&#39;xxx&#39;&#125;</code>失败<code>&#123;state:REJECTED,reason:&#39;xxx&#39;&#125;</code>的结果数组</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 参数校验</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">         <span class="keyword">let</span> result = []<span class="comment">// 结果数组</span></span><br><span class="line">         <span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">// 计数器</span></span><br><span class="line">         <span class="comment">// 空数组直接返回</span></span><br><span class="line">         <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">resolve</span>(promises)</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 挨个处理内部的Promise对象</span></span><br><span class="line">         promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="comment">// 使用resolve转为promise统一处理</span></span><br><span class="line">           <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(item).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// 成功状态</span></span><br><span class="line">             count++</span><br><span class="line">             result[index] = &#123;</span><br><span class="line">               <span class="attr">state</span>: <span class="variable constant_">FULFILLED</span>,</span><br><span class="line">               value</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// 处理完毕之后 resolve</span></span><br><span class="line">             count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">           &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// 失败状态</span></span><br><span class="line">             count++</span><br><span class="line">             <span class="comment">// 失败状态 值为 reason</span></span><br><span class="line">             result[index] = &#123;</span><br><span class="line">               <span class="attr">state</span>: <span class="variable constant_">REJECTED</span>,</span><br><span class="line">               reason</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// 成功和失败最终都对应到 resolve</span></span><br><span class="line">             count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(result)</span><br><span class="line">           &#125;)</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 不是数组，报错</span></span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="手写Promise-静态方法any"><a href="#手写Promise-静态方法any" class="headerlink" title="手写Promise-静态方法any"></a>手写Promise-静态方法any</h3><p><strong>需求:</strong>-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any">传送门</a></p><ol><li>传入<code>Promise</code>数组，<ol><li>任何一个<code>Promise</code>对象敲定时，返回一个新的<code>Promise</code>对象，及对应的结果</li><li>所有Promise都被拒绝时，返回一个包含所有拒绝原因的<code>AggregateError</code>错误数组</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&#x27;success1&#x27;)</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error3&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">any</span>([promise1, promise2, promise3]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>类似于<code>all</code>核心区别<ol><li>数组长度为0，直接返回错误数组</li><li>任何一个成功，直接成功</li><li>通过数组记录失败原因，都失败时响应错误</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">      <span class="keyword">let</span> errors = []</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">      <span class="comment">// AggregateError包含多个错误对象的 单个错误对象（错误对象容器）</span></span><br><span class="line">      <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span>))</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 挨个处理</span></span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 只要一个成功 就成功</span></span><br><span class="line">          <span class="title function_">resolve</span>(value)</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          count++</span><br><span class="line">          errors.<span class="title function_">push</span>(reason)</span><br><span class="line">          <span class="comment">// 如果没有一个promise成功 就把所有的错误原因合并到一起 一起抛出</span></span><br><span class="line">          count++ === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(errors))</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 参数格式有误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise需要掌握的点："><a href="#promise需要掌握的点：" class="headerlink" title="promise需要掌握的点："></a>promise需要掌握的点：</h3><ol><li><p>组织异步，回调函数 &#x3D;&gt; 链式编程</p></li><li><p>async await : await会等待后面Promise成功，并获取结果，try-catch捕获异常</p></li><li><p>多个异步管理：</p><ol><li><p>all ：都成功，第一个失败</p></li><li><p>race：第一个成功或失败</p></li><li><p>allSettled: 所有都敲定（成功&#x2F;失败），以对象数组的形式获取结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;成功原因&#x27;</span>,</span><br><span class="line">        <span class="attr">status</span>:<span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">reason</span>: <span class="string">&#x27;失败原因&#x27;</span></span><br><span class="line">        <span class="attr">status</span>:<span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>any : 第一个成功，或者都失败</p></li><li><p><strong>被追问</strong>：用在哪里：</p><ol><li><p>all：多个接口数据，获取完毕再渲染</p></li><li><p>race: 多个服务器的相同接口，都可以获取同一份数据，为了让用户尽可能的拿到结果，race调用相同的多个接口，只要拿到就渲染。</p><p>1.服务器1–新闻接口</p><p>2.服务器2–新闻接口</p><p>3.同时调用，哪个先获取到，就直接渲染</p></li><li><p>allSettled,any 了解过代码</p></li></ol></li></ol><p><strong>手写promise</strong></p><ol><li>构造函数：传入回调函数，并接收resolve和reject</li><li>状态和成功&#x2F;失败结果：<ol><li>定义常量保存状态，定义实例属性保存状态和结果</li><li>resolve和reject中修改状态记录结果</li></ol></li><li>then方法<ol><li>多次调用：用数组来保存回调函数</li><li>链式调用：内部返回Promise</li></ol></li><li>实例方法：<ol><li>catch: 本质就是 then(undefined,onRejected)</li><li>finally: 本质 then(onFinally,onFinally)</li></ol></li><li>静态方法</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 柯里化 </tag>
            
            <tag> 手写Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原理一</title>
      <link href="/posts/882eae.html"/>
      <url>/posts/882eae.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS原理"><a href="#JS原理" class="headerlink" title="JS原理"></a>JS原理</h1><h3 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h3><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">call🍧</button></li><li class="tab"><button type="button" data-href="#test-2">apply🍧</button></li><li class="tab"><button type="button" data-href="#test-3">bind🍧</button></li><li class="tab"><button type="button" data-href="#test-4">剩余参数🍧</button></li><li class="tab"><button type="button" data-href="#test-5">Promise🍧</button></li><li class="tab"><button type="button" data-href="#test-6">URLSearchParams🍧</button></li><li class="tab"><button type="button" data-href="#test-7">Object.create🍧</button></li><li class="tab"><button type="button" data-href="#test-8">Object.assign🍧</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>函数的<code>call</code>方法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以指定的this调用函数，并通过 从第二个参数开始依次传递参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">name,drink</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向obj  &#123;name: &#x27;kilito&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(drink)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call 参数1: this  </span></span><br><span class="line"><span class="comment">//      参数2: 2-n函数的参数</span></span><br><span class="line">func.<span class="title function_">call</span>(obj,<span class="string">&#x27;kilito&#x27;</span>,<span class="string">&#x27;咖啡&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol start="2"><li>函数的<code>apply</code>方法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以指定的this调用函数，并通过 数组的形式 传递参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">name,drink</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向obj  &#123;name: &#x27;kilito&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(drink)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apply 参数1: this</span></span><br><span class="line"><span class="comment">//       参数2: 以数组的形式传入参数</span></span><br><span class="line">func.<span class="title function_">apply</span>(obj,[<span class="string">&#x27;xiaoqing&#x27;</span>,<span class="string">&#x27;咖啡&#x27;</span>])</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol start="3"><li>函数的<code>bind</code>方法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">food, drink</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// &#123;name: &#x27;kilito&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(food)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(drink)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回一个绑定了this的新函数！</span></span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">bind</span>(obj, <span class="string">&#x27;花菜&#x27;</span>)</span><br><span class="line"><span class="title function_">bindFunc</span>(<span class="string">&#x27;可乐&#x27;</span>)</span><br><span class="line"><span class="comment">// const bindFunc = func.bind(obj)</span></span><br><span class="line"><span class="comment">// bindFunc(&#x27;花菜&#x27;,可乐&#x27;)</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><ol start="4"><li>剩余参数-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions#%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args)<span class="comment">// 以数组的形式获取传入的所有参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;西蓝花&#x27;</span>,<span class="string">&#x27;西葫芦&#x27;</span>,<span class="string">&#x27;西洋参&#x27;</span>,<span class="string">&#x27;西芹&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-5"><ol start="5"><li>Promise核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">`成功啦--<span class="subst">$&#123;num&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">`失败啦--<span class="subst">$&#123;num&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-6"><ol start="6"><li>URLSearchParams核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化时支持传入JS对象</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line"><span class="comment">// toString方法 返回搜索参数组成的字符串，可直接使用在 URL 上。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-7"><ol start="7"><li>Object.create核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将传入的对象作为原型，创建一个新对象（浅拷贝）</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(person)</span><br><span class="line">clone.<span class="property">name</span> = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line">clone.<span class="property">foods</span>.<span class="title function_">push</span>(<span class="string">&#x27;西北风&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone.<span class="property">foods</span> === person.<span class="property">foods</span>)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test-8"><ol start="8"><li>Object.assign核心用法-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">文档链接</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> son = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数1 目标对象</span></span><br><span class="line"><span class="comment">// 参数2 源对象</span></span><br><span class="line"><span class="comment">// 将源对象的自身属性复制到目标对象，并返回目标对象</span></span><br><span class="line"><span class="keyword">const</span> returnTarget = <span class="title class_">Object</span>.<span class="title function_">assign</span>(son, person)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(returnTarget === son)<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">name</span>)<span class="comment">// itheima</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">foods</span> === person.<span class="property">foods</span>)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tabs" id="xmind"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#xmind-1">this🍧</button></li><li class="tab"><button type="button" data-href="#xmind-2">继承🍧</button></li><li class="tab"><button type="button" data-href="#xmind-3">class🍧</button></li><li class="tab"><button type="button" data-href="#xmind-4">fetch🍧</button></li><li class="tab"><button type="button" data-href="#xmind-5">geneator🍧</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="xmind-1"><p><img src="https://bu.dusays.com/2023/08/17/64dda1ff4a71d.png" alt="xmthis.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-2"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a4e42783.png" alt="xmjichen.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-3"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a44529ff.png" alt="xmclass.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-4"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a48a0993.png" alt="xmfetch.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="xmind-5"><p><img src="https://bu.dusays.com/2023/08/17/64dd8a435f5dc.png" alt="xmgeneator.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="JS中的this"><a href="#JS中的this" class="headerlink" title="JS中的this"></a>JS中的this</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">传送门：MDN-this</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">传送门：MDN-call</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">传送门：MDN-apply</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">传送门：MDN-bind</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">传送门：MDN-箭头函数</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/rest_parameters">传送门：MDN-剩余参数</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">传送门：MDN-Symbol</a></p></blockquote><h3 id="如何确认this指向："><a href="#如何确认this指向：" class="headerlink" title="如何确认this指向："></a>如何确认this指向：</h3><p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）</p><p><strong>谁调用就是谁，直接调用就是window</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// person</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// 直接调用就是 window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inner</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// person</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// window</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayHi</span>()</span><br><span class="line">person.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="如何改变this指向"><a href="#如何改变this指向" class="headerlink" title="如何改变this指向"></a>如何改变this指向</h3><p>主要有2类改变函数内部<code>this</code>指向的方法：</p><ol><li><p>调用函数并传入具体的<code>this</code>:</p><ol><li><p><code>call</code>:</p><ol><li>参数1:<code>this</code>() （希望this指向谁就传哪个）</li><li>参数2-n:传递给函数的参数</li></ol></li><li><p><code>apply</code>-数组作为参数</p><ol><li>参数1:<code>this</code></li><li>参数2:以数组的形式,传递给函数的参数</li></ol></li></ol></li><li><p>创建绑定<code>this</code>的函数:</p><ol><li>bind:返回一个绑定了<code>this</code>的新函数</li><li>箭头函数:最近的this是谁,就是谁</li></ol></li></ol><p><strong>调用函数并传入具体的this：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funcA</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;funcA-调用&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1:&#x27;</span>, p1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2:&#x27;</span>, p2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call参数</span></span><br><span class="line"><span class="comment">// 参数1 this值 </span></span><br><span class="line"><span class="comment">// 参数2-参数n 挨个传入函数的参数  </span></span><br><span class="line">funcA.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// apply参数</span></span><br><span class="line"><span class="comment">// 参数1 this值</span></span><br><span class="line"><span class="comment">// 参数2 以数组的形式传入函数的参数</span></span><br><span class="line">funcA.<span class="title function_">apply</span>(obj, [<span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><strong>创建绑定this的函数：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funcB</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;funcB-调用&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1:&#x27;</span>, p1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2:&#x27;</span>, p2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bind参数</span></span><br><span class="line"><span class="comment">// 参数1 this值</span></span><br><span class="line"><span class="comment">// 参数2-参数n 绑定的参数</span></span><br><span class="line"><span class="keyword">const</span> bindFuncB = funcB.<span class="title function_">bind</span>(person, <span class="number">123</span>)</span><br><span class="line"><span class="title function_">bindFuncB</span>(<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// student</span></span><br><span class="line">    <span class="comment">// 箭头会从自己作用域链的上一层继承this</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inner</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner-调用了&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// student 箭头函数中的this，指向所在作用域中的this 沿用上一层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inner</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">student.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="comment">// 这个大括号没有创建作用域</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// person</span></span><br><span class="line">    <span class="comment">// 箭头会从自己作用域链的上一层继承this</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// person</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">     <span class="comment">// 易混淆情况（不要这样写）</span></span><br><span class="line">  <span class="attr">sayHello</span>:<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//person.sayHi()</span></span><br><span class="line">    person.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="手写call方法"><a href="#手写call方法" class="headerlink" title="手写call方法"></a>手写call方法</h3><p>这一节咱们来实现<code>myCall</code>方法，实际用法和<code>call</code>方法一致，核心步骤有4步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  实现myCall 可以实现如下的调用效果</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数1：this</span></span><br><span class="line"><span class="comment">// 参数2-参数n：参数列表 </span></span><br><span class="line">func2.<span class="title function_">myCall</span>(obj2, <span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>如何定义<code>myCall</code>?</li><li>如何让函数内部的<code>this</code>为某个对象？</li><li>如何让<code>myCall</code>接收参数2-参数n?</li><li>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>调优<code>myCall</code>？<ol><li>添加到原型上，所有函数均可调用</li><li>通过给对象动态添加属性的方式来指定 this</li><li>…args 剩余参数 实现参数传递</li><li>通过 Symbo 解决了和默认属性重名的问题</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 如何定义`myCall`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 如何让函数内部的`this`为某个对象                 // thisArg =&gt; &#123; name:&#x27;kilito&#x27; &#125;</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg</span>) &#123; <span class="comment">// 1. 接收原函数的this要指向的对象 thisArg</span></span><br><span class="line">  <span class="comment">// this 是调用myCall的 函数</span></span><br><span class="line">  <span class="comment">// thisArg 指定的this</span></span><br><span class="line">  <span class="comment">// 2.为他添加一个自定义属性，让函数成为他的该属性  &#123; name:&#x27;kilito&#x27;,func: 原函数 &#125; </span></span><br><span class="line">  thisArg.<span class="property">func</span> = <span class="variable language_">this</span> <span class="comment">// 这个this 是原函数（谁调用，this就指向谁）</span></span><br><span class="line">  <span class="comment">// 3.调用并获取结果</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg.<span class="title function_">func</span>()</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">func</span></span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func.myCall(obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 如何让`myCall`接收参数2-参数n</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123; <span class="comment">// ...args接受传过来的参数</span></span><br><span class="line">  thisArg.<span class="property">func</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用并获取结果</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg.<span class="title function_">func</span>(...args)  <span class="comment">// 使用展开运算符传入原函数</span></span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.<span class="property">func</span></span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// func.myCall(obj,1,2,3,4)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 使用`Symbol`调优`myCall`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用Symbol生成唯一标记，避免和原属性冲突</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  <span class="comment">// 给对象动态添加方法 指定为 this</span></span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">func2.<span class="title function_">myCall</span>(obj2, <span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// symbol</span></span><br><span class="line"><span class="comment">// 调用全局函数 Symbol 可以传入标记（可选）</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;kilito&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/16/64dcb002560a2.png" alt="手写call.png"></p><h3 id="手写apply方法"><a href="#手写apply方法" class="headerlink" title="手写apply方法"></a>手写apply方法</h3><p>这一节咱们来实现<code>myApply</code>方法，实际用法和<code>apply</code>方法一致，核心步骤依旧<code>4</code>步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  实现myApply 可以实现如下的调用效果</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数1：this</span></span><br><span class="line"><span class="comment">// 参数2：数组形式传入的参数列表</span></span><br><span class="line">func2.<span class="title function_">myApply</span>(obj2, [<span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>如何定义<code>myApply</code>? 函数Function的原型上</li><li>如何让函数内部的<code>this</code>为某个对象？给对象动态增加方法,方法为原函数,通过对象调用即可</li><li>如何让<code>myApply</code>接收数组形式的参数列表? 定义一个参数接收数组即可 形参: args,调用时,…args</li><li>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>调优<code>myApply</code>？和原对象的属性重名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 如何定义`myApply`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 如何让函数内部的`this`为某个对象</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg</span>) &#123;</span><br><span class="line">  <span class="comment">// 为他添加一个自定义属性，让函数成为他的该属性</span></span><br><span class="line">  thisArg[<span class="string">&#x27;fn&#x27;</span>] = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用并获取结果</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[<span class="string">&#x27;fn&#x27;</span>]()</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[<span class="string">&#x27;fn&#x27;</span>]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 如何让`myApply`接收参数2-参数n</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">  thisArg[<span class="string">&#x27;fn&#x27;</span>] = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">// 调用并获取结果</span></span><br><span class="line">  <span class="comment">// 用... 将args展开传入</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[<span class="string">&#x27;fn&#x27;</span>](...args)</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[<span class="string">&#x27;fn&#x27;</span>]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 使用`Symbol`调优`myApply`</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用Symbol生成唯一标记，避免和原属性冲突</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="comment">// 移除添加的自定义属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="comment">// 返回调用结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">func2.<span class="title function_">myApply</span>(obj2, [<span class="string">&#x27;咖啡&#x27;</span>, <span class="string">&#x27;西兰花炒蛋&#x27;</span>])</span><br></pre></td></tr></table></figure><p>小结：手写apply方法</p><ol><li>如何定义<code>myApply</code>? 函数的原型上</li><li>如何让函数内部的<code>this</code>为某个对象？ 动态给对象添加方法,通过对象的方式调用方法</li><li>如何让<code>myApply</code>接收数组形式的参数列表?   形参: args,调用时,…args</li><li>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>调优<code>myApply</code>？避免和默认属性重名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  thisArg[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[fn](...args)</span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写bind方法"><a href="#手写bind方法" class="headerlink" title="手写bind方法"></a>手写bind方法</h3><p>这一节咱们来实现<code>myBind</code>方法，实际用法和<code>bind</code>方法一致，核心步骤为2步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用bind获取绑定this的新函数，参数1为可乐</span></span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">bind</span>(obj, <span class="string">&#x27;可乐&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用函数，只需要传递参数2即可</span></span><br><span class="line"><span class="title function_">bindFunc</span>(<span class="string">&#x27;西蓝花炒蛋&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>如何返回一个绑定了<code>this</code>的函数？</li><li>如何实现绑定的参数，及传入的参数合并?</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 如何返回一个绑定了`this`的函数</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg</span>) &#123;</span><br><span class="line">  <span class="comment">// myBind函数调用时，this就是函数本身 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过call方法将传入的 thisArg 作为this进行调用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">call</span>(thisArg)  <span class="comment">// this 指向 func</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 如何实现绑定的参数，及传入的参数合并</span></span><br><span class="line"><span class="comment">// ...args 接收绑定参数</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// ...args2 接收调用时的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// thisArg 需要指定的this</span></span><br><span class="line">    <span class="comment">// args 调用myBind时传入的参数</span></span><br><span class="line">    <span class="comment">// args2 调用新函数时传入的参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">call</span>(thisArg, ...args, ...args2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;我是小小黑&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">drink, food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢喝<span class="subst">$&#123;drink&#125;</span>,我爱吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用bind获取绑定this的新函数，参数1为可乐</span></span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">bind</span>(obj, <span class="string">&#x27;可乐&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用函数，只需要传递参数2即可</span></span><br><span class="line"><span class="title function_">bindFunc</span>(<span class="string">&#x27;西蓝花炒蛋&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/16/64dcb004b93cc.png" alt="手写bind.png"></p><p>小结：手写bind方法</p><ol><li>如何返回一个绑定了<code>this</code>的函数？</li><li>如何实现绑定的参数，及传入的参数合并?</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">call</span>(thisArg, ...args, ...args2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS继承-ES5"><a href="#JS继承-ES5" class="headerlink" title="JS继承-ES5"></a>JS继承-ES5</h2><blockquote><p>这一节咱们来学习如何在JS中实现<strong>继承</strong>，首先看看在ES6之前可以如何实现继承</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">传送门:继承与原型链</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">传送门:继承（计算机科学）</a></p><p><a href="https://www.ituring.com.cn/book/2472">传送门:JavaScript高级程序设计</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">传送门:MDN-Object.create</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">传送门:MDN-Object.assign</a></p></blockquote><p><strong>继承：</strong>继承可以使子类具有父类的各种属性和方法，而不需要再次编写相同的代码</p><p>这一节咱们会学习ES5中常见的继承写法(命令来源于 <strong>《JavaScript高级程序设计》</strong>)</p><ol><li>原型链实现继承</li><li>构造函数继承</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayFoods</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES5-原型链实现继承"><a href="#ES5-原型链实现继承" class="headerlink" title="ES5-原型链实现继承"></a>ES5-原型链实现继承</h3><p><strong>核心步骤：</strong>希望继承谁，就将谁作为原型</p><p><strong>缺点：</strong>父类中的引用数据类型，会被所有子类共享</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayFoods</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将父类的实例 作为子类的原型</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">s1.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line">s2.<span class="title function_">sayFoods</span>() <span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 引用数据类型是同一个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">foods</span> === s2.<span class="property">foods</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s2.<span class="property">foods</span>.<span class="title function_">push</span>(<span class="string">&#x27;西葫芦&#x27;</span>)  <span class="comment">// 会影响到 s1</span></span><br><span class="line"></span><br><span class="line">s2.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;, &#x27;西葫芦&#x27;]</span></span><br><span class="line">s1.<span class="title function_">sayFoods</span>()<span class="comment">// [&#x27;西蓝花&#x27;, &#x27;西红柿&#x27;, &#x27;西葫芦&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="ES5-构造函数继承"><a href="#ES5-构造函数继承" class="headerlink" title="ES5-构造函数继承"></a>ES5-构造函数继承</h3><p><strong>核心步骤：</strong>在子类的构造函数中通过<code>call</code>或<code>apply</code>父类的构造函数</p><p><strong>缺点：</strong>子类没法使用父类原型上的属性&#x2F;方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name           <span class="comment">// 3. 给传入的 this 设置属性/方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好,我叫:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)  <span class="comment">// 2. this 指向 son 的实例化对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;lucy&#x27;</span>)  <span class="comment">// 1. 调用子类构造函数</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;rose&#x27;</span>)</span><br><span class="line">s1.<span class="title function_">sayHi</span>() <span class="comment">// 报错 子类没法用到父类原型上的属性/方法</span></span><br></pre></td></tr></table></figure><h3 id="ES5-组合继承"><a href="#ES5-组合继承" class="headerlink" title="ES5-组合继承"></a>ES5-组合继承</h3><p>通过组合继承,结合原型链继承和构造函数继承2种方法的优点</p><p><strong>核心步骤：</strong></p><ol><li>通过原型链继承公共的属性和方法</li><li>通过构造函数继承实例独有的属性和方法</li></ol><p><strong>特点：</strong>调用了2次构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 公共的属性和方法加父类原型上</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用父类构造函数传入this</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="comment">// 子类独有的属性和方法单独设置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置子类的原型为 父类实例</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// 调用子类的构造函数</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;李雷&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用原型链上的 属性和方法 也可以使用 通过构造函数获取的父类的属性和方法</span></span><br></pre></td></tr></table></figure><h3 id="ES5-原型式继承"><a href="#ES5-原型式继承" class="headerlink" title="ES5-原型式继承"></a>ES5-原型式继承</h3><p>直接基于对象实现继承</p><p>**核心步骤:**对某个对象进行浅拷贝(工厂函数或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a>),实现继承</p><p>**缺点:**父类中的引用数据类型，会被所有子类共享</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parent = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">friend</span>: [<span class="string">&#x27;rose&#x27;</span>, <span class="string">&#x27;ice&#x27;</span>, <span class="string">&#x27;robot&#x27;</span>],</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用 Object.create替代</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数：返回一个新对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">objectFactory</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 定义构造函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="comment">// 传入父类的对象，设置给构造函数的原型</span></span><br><span class="line">  <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> = obj</span><br><span class="line">    <span class="comment">// 返回了实例化对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1 = <span class="title function_">objectFactory</span>(parent)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="title function_">objectFactory</span>(parent)</span><br><span class="line">son1.<span class="property">friend</span>.<span class="title function_">push</span>(<span class="string">&#x27;lucy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类中的引用数据类型，会被所有子类共享</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son1.<span class="property">friend</span>) <span class="comment">// [&#x27;rose&#x27;, &#x27;ice&#x27;, &#x27;robot&#x27;,&#x27;lucy&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son2.<span class="property">friend</span>) <span class="comment">// [&#x27;rose&#x27;, &#x27;ice&#x27;, &#x27;robot&#x27;,&#x27;lucy&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承，基于构造函数</span></span><br><span class="line"><span class="comment">// 原型继承，基于实例</span></span><br></pre></td></tr></table></figure><h3 id="ES5-寄生式继承"><a href="#ES5-寄生式继承" class="headerlink" title="ES5-寄生式继承"></a>ES5-寄生式继承</h3><p><strong>核心步骤:</strong></p><p>定义工厂函数,并在内部:</p><ol><li>对传入的对象进行浅拷贝(公共属性&#x2F;方法)</li><li>为浅拷贝对象增加属性&#x2F;方法(独有属性&#x2F;方法)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决引用类型共享问题</span></span><br><span class="line"><span class="keyword">const</span> parent = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">  <span class="attr">foods</span>: [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;炒蛋&#x27;</span>, <span class="string">&#x27;花菜&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="comment">// Object.create基于原型创建新对象，对属性进行浅拷贝</span></span><br><span class="line">  <span class="keyword">const</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(origin)</span><br><span class="line">  <span class="comment">// 为对象增加属性/方法</span></span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1 = <span class="title function_">createAnother</span>(parent)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="title function_">createAnother</span>(parent)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.create() 静态方法以一个现有对象作为原型，创建一个新对象。</span></span><br><span class="line"><span class="comment">// 基于一个对象作为原型，创建一个新对象</span></span><br><span class="line"><span class="comment">// 对传入的对象进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> father = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kilito&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">foods</span>: [<span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;西兰花&#x27;</span> ,<span class="string">&#x27;西葫芦&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newF = <span class="title class_">Object</span>.<span class="title function_">create</span>(father)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newF === father) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newF.<span class="property">foods</span> === father.<span class="property">foods</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>寄生式继承</p><ol><li><p>寄生式继承的核心步骤是?</p><ol><li><p>基于对象,创建新对象</p></li><li><p>增加新的<strong>属性和方法</strong></p></li></ol></li><li><p>寄生式继承和原型式原型式继承的区别是?</p><ol><li>创建出来的新对象,会额外的增加新的<strong>属性&#x2F;方法</strong></li></ol></li></ol><h3 id="ES5-寄生组合式继承"><a href="#ES5-寄生组合式继承" class="headerlink" title="ES5-寄生组合式继承"></a>ES5-寄生组合式继承</h3><p><strong>核心步骤:</strong></p><ol><li>通过构造函数来继承属性</li><li>通过原型链来继承方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承原型函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">son, parent</span>)&#123;</span><br><span class="line">    <span class="comment">//  基于父类的原型 创建新的对象</span></span><br><span class="line">    <span class="keyword">const</span> prototype = object.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="comment">// 保证原型三角的关系</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = son</span><br><span class="line">    <span class="comment">// 设置给子类的类型</span></span><br><span class="line">    son.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foods</span> = [<span class="string">&#x27;西蓝花&#x27;</span>, <span class="string">&#x27;西葫芦&#x27;</span>, <span class="string">&#x27;西红柿&#x27;</span>]     <span class="comment">// 实例属性，写构造函数内</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;        <span class="comment">// 公共的方法写在原型上</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">`我喜欢吃,<span class="subst">$&#123;<span class="variable language_">this</span>.foods&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类借用父类的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承实例属性</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成原型继承</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Son</span>,<span class="title class_">Parent</span>)</span><br><span class="line"><span class="comment">// 可以继续在原型上添加属性/方法</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的年龄是&#x27;</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">const</span> son2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;rose&#x27;</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure><h2 id="JS继承-ES6"><a href="#JS继承-ES6" class="headerlink" title="JS继承-ES6"></a>JS继承-ES6</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class">传送门:mdn类</a></p><p><a href="https://wangdoc.com/es6/class">传送门:阮一峰ES6-class</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super">传送门:mdn-super</a></p></blockquote><p>ES6中推出了<code>class</code>类,是用来创建对象的模板.<code>class</code>可以看作是一个语法糖,它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><h3 id="class核心语法"><a href="#class核心语法" class="headerlink" title="class核心语法"></a>class核心语法</h3><p><strong>核心语法:</strong></p><ol><li>如何定义及使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes#%E7%B1%BB%E5%A3%B0%E6%98%8E">类</a>:</li><li>如何定义实例属性&#x2F;方法:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：class本质还是基于原型的</span></span><br><span class="line"><span class="comment">// 属性，在实例上</span></span><br><span class="line"><span class="comment">// 方法，在原型上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 实例属性，方便一眼确认有哪些（直接写，并且可以设置值）</span></span><br><span class="line">  <span class="comment">// 可以不写，构造函数中可以通过 this 动态添加</span></span><br><span class="line">  <span class="comment">// 建议写上</span></span><br><span class="line">  name</span><br><span class="line">  food</span><br><span class="line">  <span class="comment">// 构造方法，类似于构造函数，new的时候会调用，内部的this就是实例化的对象</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, food</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">food</span> = food</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢吃<span class="subst">$&#123;<span class="variable language_">this</span>.food&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="string">&#x27;西蓝花&#x27;</span>)</span><br><span class="line">p.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><h3 id="class实现继承"><a href="#class实现继承" class="headerlink" title="class实现继承"></a>class实现继承</h3><p><strong>关键语法:</strong></p><ol><li><strong>子类</strong>通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends">extends</a>继承<strong>父类</strong></li><li>子类构造函数中通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super">super</a>调用父类构造函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在上一份代码的基础上继续编写下面代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  song</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, food, song</span>) &#123;</span><br><span class="line">    <span class="comment">// 子类构造函数使用this以前必须最开始调用super调用父类的构造函数！！！</span></span><br><span class="line">    <span class="variable language_">super</span>(name, food)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">song</span> = song</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加方法</span></span><br><span class="line">  <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我喜欢唱<span class="subst">$&#123;<span class="variable language_">this</span>.song&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;李雷&#x27;</span>, <span class="string">&#x27;花菜&#x27;</span>, <span class="string">&#x27;孤勇者&#x27;</span>)</span><br><span class="line">s.<span class="title function_">sayHi</span>()</span><br><span class="line">s.<span class="title function_">sing</span>()</span><br></pre></td></tr></table></figure><h3 id="class私有-静态属性和方法"><a href="#class私有-静态属性和方法" class="headerlink" title="class私有,静态属性和方法"></a>class私有,静态属性和方法</h3><p><strong>补充语法:</strong></p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields">私有</a>属性&#x2F;方法的定义及使用(内部调用)</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/static">静态</a>属性&#x2F;方法的定义及使用(类直接访问)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过#作为前缀添加的属性会变为私有</span></span><br><span class="line">  <span class="comment">// 私有属性</span></span><br><span class="line">  #secret = <span class="string">&#x27;我有一个小秘密，就不告诉你&#x27;</span></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  #<span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 私有属性可以在</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;私有的say方法&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在类的内部可以访问私有属性调用私有方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#secret)</span><br><span class="line">    <span class="variable language_">this</span>.#<span class="title function_">say</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 static定义静态属性/方法</span></span><br><span class="line">  <span class="comment">// 访问的时候 通过 类 直接访问</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个静态方法&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> info = <span class="string">&#x27;直立行走，双手双脚&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line"><span class="comment">// 外部无法访问 点语法访问直接报错，通过[]无法动态获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p[<span class="string">&#x27;#secret&#x27;</span>])</span><br><span class="line">p.<span class="title function_">info</span>()</span><br><span class="line"><span class="comment">// 通过类访问静态属性/方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">staticMethod</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>)</span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><blockquote><p>这一节咱们来学习内置函数<code>fetch</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch">传送门-fetch</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response">传送门-Response</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Headers">传送门-Headers</a></p></blockquote><p>全局的<code>fetch</code>函数用来发起获取资源请求.他返回一个<code>promise</code>,这个<code>promise</code>会在请求响应后被<code>resolve</code>,并传回Response对象</p><ol><li><p><code>fetch</code>核心语法</p></li><li><p><code>fetch</code>结合<code>URLSearchParams</code>发送get请求:</p><ol><li><pre><code class="javascript">const obj = &#123;    name:&#39;jack&#39;,    age:18&#125;name=jack&amp;age=17<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. `fetch`发送post请求,提交`JSON`数据</span><br><span class="line"></span><br><span class="line">4. `fetch`发送post请求,提交`FormData`数据</span><br><span class="line"></span><br><span class="line">### fetch核心语法</span><br><span class="line"></span><br><span class="line">**核心语法:**</span><br><span class="line"></span><br><span class="line">1. 如何[发请求](https://developer.mozilla.org/zh-CN/docs/Web/API/fetch):</span><br><span class="line">2. 如何处理[响应](https://developer.mozilla.org/zh-CN/docs/Web/API/Response):</span><br><span class="line">3. 注:[测试用接口](https://apifox.com/apidoc/project-1937884/api-49760223)</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">document.querySelector(&#x27;.request&#x27;).addEventListener(&#x27;click&#x27;,() =&gt; &#123;</span><br><span class="line">    // 1. fetch(url地址) ===&gt; Promise对象</span><br><span class="line">    fetch(&#x27;http://hmajax.itheima.net/api/news&#x27;).then(response =&gt; &#123;</span><br><span class="line">        // console.log(response)</span><br><span class="line">        // 2. 请求成功之后， resolve  --&gt; then 获取 response</span><br><span class="line">        // 3. 调用 json 方法，获取解析之后的结果，返回Promise</span><br><span class="line">        response.json().then(res =&gt; &#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// async await 改写</span><br><span class="line">document.querySelector(&#x27;.request&#x27;).addEventListener(&#x27;click&#x27;, async() =&gt; &#123;</span><br><span class="line">   const response =  await fetch(&#x27;http://hmajax.itheima.net/api/news&#x27;)</span><br><span class="line">   const res = response.json()</span><br><span class="line">   console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ol></li></ol><h3 id="fetch结合URLSearchParams发送get请求"><a href="#fetch结合URLSearchParams发送get请求" class="headerlink" title="fetch结合URLSearchParams发送get请求:"></a>fetch结合URLSearchParams发送get请求:</h3><p><strong>需求:</strong></p><ol><li>使用<code>fetch</code>结合<code>URLSearchParams</code>调用地区查询<a href="https://apifox.com/apidoc/project-1937884/api-49760217">接口</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;安徽省&#x27;</span>,</span><br><span class="line">    <span class="attr">cname</span>: <span class="string">&#x27;合肥市&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(params) URLSearchParams &#123; size: 2 &#125; 2组键值对</span></span><br><span class="line">  <span class="comment">// 传入的对象，转为查询字符串</span></span><br><span class="line">  <span class="comment">// key=value&amp;key=value</span></span><br><span class="line">  <span class="comment">// 中文会编码</span></span><br><span class="line">  <span class="comment">// params.toString() </span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`http://hmajax.itheima.net/api/area?<span class="subst">$&#123;params.toString()&#125;</span>`</span></span><br><span class="line">  <span class="comment">// fetch函数返回的是 Promise对象，通过await等待获取response对象</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">  <span class="comment">// .json方法返回的是Promise对象 继续通过await等待</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="post请求-提交JSON"><a href="#post请求-提交JSON" class="headerlink" title="post请求-提交JSON"></a>post请求-提交JSON</h3><p><strong>需求:</strong></p><ol><li><code>fetch</code>发送post请求,提交<code>JSON</code>数据</li><li><a href="https://apifox.com/apidoc/project-1937884/api-49760218">测试接口-用户注册</a></li></ol><p><strong>核心步骤:</strong></p><ol><li>根据文档设置请求头</li><li>通过配置项设置,请求方法,请求头,请求体</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">; (<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 通过headers设置请求头</span></span><br><span class="line">  <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">Headers</span>()</span><br><span class="line">  <span class="comment">// 通过 content-type指定请求体数据格式</span></span><br><span class="line">  headers.<span class="title function_">append</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 参数1 url</span></span><br><span class="line">  <span class="comment">// 参数2 请求配置</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,<span class="comment">// 请求方法</span></span><br><span class="line">    headers, <span class="comment">// 请求头</span></span><br><span class="line">    <span class="comment">// 请求体</span></span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;itheima9876&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>post请求-提交JSON</p><ol><li><code>fetch</code>函数的第二个参数可以设置请求头,请求方法,请求体</li></ol><h3 id="post请求-提交FormData"><a href="#post请求-提交FormData" class="headerlink" title="post请求-提交FormData"></a>post请求-提交FormData</h3><p><strong>需求:</strong></p><ol><li><code>fetch</code>发送post请求,提交<code>FormData</code>数据(上传+回显)</li><li><a href="https://apifox.com/apidoc/project-1937884/api-49760221">测试接口-上传图片</a></li></ol><p><strong>核心步骤:</strong></p><ol><li>通过<code>FormData</code>添加文件</li><li>通过配置项设置,请求方法,请求体(<code>FormData</code>不需要设置请求头)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;file&quot;</span> accept=<span class="string">&quot;image/*&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.file&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 生成FormData对象并添加数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="title function_">append</span>(<span class="string">&#x27;img&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/uploadimg&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">body</span>: data</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator">传送门-Generator</a></p></blockquote><p><code>Generator</code>对象由<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*">生成器函数</a>返回并且它符合<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代协议</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">迭代器协议</a>.他可以用来<strong>控制流程</strong>,语法行为和之前学习的函数不一样</p><h3 id="Generator-核心语法"><a href="#Generator-核心语法" class="headerlink" title="Generator-核心语法"></a>Generator-核心语法</h3><p><strong>核心语法:</strong></p><ol><li>如何定义生成器函数:</li><li>如何获取<code>generator</code>对象</li><li><code>yield</code>表达式的使用</li><li>通过<code>for of</code>获取每一个<code>yield</code>的值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function* 创建生成器函数 </span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 生成器函数内部的逻辑，不会自动调用，调用 Generator 对象的 next() 方法  </span></span><br><span class="line">  <span class="comment">// 遇到yield表达式时会暂停后续的操作 （*对应async  yield对应await）</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;c&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;d&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 调用函数获取生成器</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// 3. 通过next方法获取yield 之后的表达式结果，会被包装到一个对象中</span></span><br><span class="line"><span class="comment">// 执行一次next 即可获取一次 yield之后的表达式结果</span></span><br><span class="line"><span class="keyword">const</span> res1 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1)<span class="comment">// &#123;value: &#x27;a&#x27;, done: false&#125;</span></span><br><span class="line"><span class="keyword">const</span> res2 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2)<span class="comment">// &#123;value: &#x27;b&#x27;, done: false&#125;</span></span><br><span class="line"><span class="keyword">const</span> res3 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3)<span class="comment">// &#123;value: &#x27;c&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 最后一次可以拿到return的结果</span></span><br><span class="line"><span class="keyword">const</span> res4 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4)<span class="comment">// &#123;value: &#x27;d&#x27;, done: true&#125; </span></span><br><span class="line"><span class="comment">// done 为true之后，获取到的value为undefined</span></span><br><span class="line"><span class="keyword">const</span> res5 = f.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res5)<span class="comment">// &#123;value: undefined, done: true&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成器，函数创建之后，代码不执行</span></span><br><span class="line"><span class="comment">// 每调用一次next执行到yield，获取结果</span></span><br><span class="line"><span class="comment">// 如果执行next之后无法获取结果， done: false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 通过for of 获取每一个yield之后的值，</span></span><br><span class="line"><span class="comment">// 迭代器协议 可以自定义 for of 的时候的行为</span></span><br><span class="line"><span class="comment">// iterator迭代（循环的每一项）</span></span><br><span class="line"><span class="comment">// f2 循环的内容</span></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> f2) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator)  <span class="comment">// a b c d 获取每一个 yeild 之后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for of</span></span><br><span class="line"><span class="comment">// 可以用来遍历一些符合 迭代器协议的数据 比如数组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Generator-id生成器"><a href="#Generator-id生成器" class="headerlink" title="Generator-id生成器"></a>Generator-id生成器</h3><p>**需求:**使用<code>Generator</code>实现一个id生成器id</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">idGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> idMaker = <span class="title function_">idGenerator</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用next方法,获取id(每次累加1)</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id1 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id2 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id2)</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li>定义生成器函数</li><li>内部使用循环,通过<code>yield</code>返回<code>id</code>并累加</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function* 创建生成器函数 </span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 无限循环</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// id累加并返回</span></span><br><span class="line">    <span class="keyword">yield</span> id++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 调用函数获取生成器</span></span><br><span class="line"><span class="keyword">const</span> idMaker = <span class="title function_">generator</span>()</span><br><span class="line"><span class="comment">// 3. 需要id的时候 通过next获取即可</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id1 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">value</span>: id2 &#125; = idMaker.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id2)</span><br></pre></td></tr></table></figure><h3 id="Generator-流程控制"><a href="#Generator-流程控制" class="headerlink" title="Generator-流程控制"></a>Generator-流程控制</h3><p>遇到<code>yield</code>表达式时会<strong>暂停</strong>后续的操作</p><p>**需求:**使用<code>Generator</code>实现流程控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">weatherGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 逻辑略</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">axios</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取Generator实例</span></span><br><span class="line"><span class="keyword">const</span> weather = <span class="title function_">weatherGenerator</span>()</span><br><span class="line"><span class="comment">// 依次获取 北上广深的天气 (axios)</span></span><br><span class="line">weather.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><p><strong>核心步骤:</strong></p><ol><li><code>yield</code>后面跟上天气查询逻辑</li><li><a href="https://apifox.com/apidoc/project-1937884/api-49760220">接口文档-天气预报</a></li><li>参考<code>code</code>:北京 110100  上海 310100  广州 440100 深圳 440300</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;getWeather&quot;</span>&gt;</span>天气查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 需求：流程控制，依次查询，北上广深的天气预报</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 参考code: 北京 110100  上海 310100  广州 440100 深圳 440300</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 接口文档: https://apifox.com/apidoc/project-1937884/api-49760220</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span>* <span class="title function_">weatherGenerator</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// yield 会暂停代码的执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 北京</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=110100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上海</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=310100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 广州</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 深圳</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440300&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cityWeather = <span class="title function_">weatherGenerator</span>()</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//const response = weather.next()</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 继续 .then</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//response.value.then(res =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(res)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//&#125;)</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.getWeather&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> res = <span class="keyword">await</span> genCity.<span class="title function_">next</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
            <tag> 手写 </tag>
            
            <tag> 继承 </tag>
            
            <tag> fetch </tag>
            
            <tag> Generato </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试</title>
      <link href="/posts/3927.html"/>
      <url>/posts/3927.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-谈谈你对闭包的理解？"><a href="#1-谈谈你对闭包的理解？" class="headerlink" title="1. 谈谈你对闭包的理解？"></a>1. 谈谈你对闭包的理解？</h2><p>这个问题想考察的主要有两个方面：</p><ul><li>对闭包的基本概念的理解</li><li>对闭包的作用的了解</li></ul><p><strong>什么是闭包？</strong></p><p>MDN的官方解释：</p><blockquote><p><code>闭包是函数和声明该函数的词法环境的组合</code></p></blockquote><p>更通俗一点的解释是：</p><blockquote><p><code>内层函数, 引用外层函数上的变量, 就可以形成闭包</code></p></blockquote><p>需求: 定义一个计数器方法, 每次执行一次函数, 就调用一次进行计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>      <span class="comment">// 全局变量，太容易被别人修改了，希望有些数据是私有的，不让外部随意的访问</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  count++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn函数被调用了&#x27;</span> + count + <span class="string">&#x27;次&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>这样不好! count 定义成了全局变量, 太容易被别人修改了,  我们可以利用闭包解决</p><p>闭包实例:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>   <span class="comment">// 局部变量，外部访问不到</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span> () &#123;</span><br><span class="line">    count++       <span class="comment">//  引用外层函数上的变量，形成闭包</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn函数被调用了&#x27;</span> + count + <span class="string">&#x27;次&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> add   <span class="comment">// 注意：需要 return 引用（内存才不会被释放）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> addFn = <span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">addFn</span>()</span><br><span class="line"><span class="title function_">addFn</span>()</span><br><span class="line"><span class="title function_">addFn</span>()</span><br></pre></td></tr></table></figure><p>标记清除：从根部，全局出发，访问不到（无法触及）的内存空间，就会被自动回收</p><p><code>addFn = null</code>    &#x3D;&gt; 释放内存，断开了对于之前内部函数的引用，对应的缓存变量内容也会被释放掉</p><p><strong>闭包的主要作用是什么？</strong></p><p><code>实现数据的私有</code></p><p>在实际开发中，闭包最大的作用就是用来 **<code>变量私有</code>**。</p><p>下面再来看一个简单示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 以 let 声明一个局部变量，而不是 this.name</span></span><br><span class="line">  <span class="comment">// this.name = &#x27;zs&#x27;     =&gt;  p.name</span></span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;hm_programmer&#x27;</span> <span class="comment">// 数据私有！！！！！</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123; </span><br><span class="line">    name = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new:</span></span><br><span class="line"><span class="comment">// 1. 创建一个新的对象</span></span><br><span class="line"><span class="comment">// 2. 让构造函数的this指向这个新对象</span></span><br><span class="line"><span class="comment">// 3. 执行构造函数</span></span><br><span class="line"><span class="comment">// 4. 返回实例</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>()) <span class="comment">// hm_programmer</span></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">setName</span>(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>()) <span class="comment">// Tom</span></span><br><span class="line"></span><br><span class="line">p.<span class="property">name</span> <span class="comment">// 访问不到 name 变量：undefined！！！！！！</span></span><br></pre></td></tr></table></figure><p>在此示例中，变量 <code>name</code> 只能通过 Person 的实例方法进行访问，外部不能直接通过实例进行访问，形成了一个私有变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 早期，闭包还用于解决for循环中，定时打印内容的问题</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= <span class="number">5</span> ; i++) &#123;</span><br><span class="line">   (<span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">       <span class="comment">// 形参也可以理解为函数中的局部变量</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">   &#125;, i * <span class="number">1000</span>)</span><br><span class="line">   &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下代码有没有闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inner</span>()  <span class="comment">// 闭包 和return 无关 一般用外部函数命名  内部函数访问了外部函数作用域里的变量</span></span><br><span class="line">&#125;            <span class="comment">// 一般会 return 出去。但是闭包 !== return</span></span><br><span class="line"><span class="title function_">outer</span>()</span><br></pre></td></tr></table></figure><p>1. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;getWeather&quot;</span>&gt;</span>天气查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 需求：流程控制，依次查询，北上广深的天气预报</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 参考code: 北京 110100  上海 310100  广州 440100 深圳 440300</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 接口文档: https://apifox.com/apidoc/project-1937884/api-49760220</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span>* <span class="title function_">weatherGenerator</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// yield 会暂停代码的执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 北京</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=110100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上海</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=310100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 广州</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440100&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 深圳</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">yield</span> <span class="title function_">axios</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/weather?city=440300&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cityWeather = <span class="title function_">weatherGenerator</span>()</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//const response = weather.next()</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 继续 .then</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//response.value.then(res =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(res)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//&#125;)</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.getWeather&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> res = <span class="keyword">await</span> genCity.<span class="title function_">next</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-async函数阻塞"><a href="#2-async函数阻塞" class="headerlink" title="2. async函数阻塞"></a>2. async函数阻塞</h2><ol><li><p>async函数内部可以使用await 等待promise执行完毕,内部是阻寒的</p></li><li><p>但是async函数不会阻塞同级代码的执行,除非用async西数再包一层</p></li><li><p>比如,我之前在做导航守卫判断的时候,有一个逻辑</p><ol><li>action获取用户信息</li><li>基于用户信息判断是否登录</li><li>最开始没有写 <mark class="hl-label red">await</mark>  ,导致第一次判断不通过,第二次才可</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js面试题 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在nodejs环境中应用并代理跨域</title>
      <link href="/posts/882eae4.html"/>
      <url>/posts/882eae4.html</url>
      
        <content type="html"><![CDATA[<h2 id="在nodejs环境中应用并代理跨域"><a href="#在nodejs环境中应用并代理跨域" class="headerlink" title="在nodejs环境中应用并代理跨域"></a>在nodejs环境中应用并代理跨域</h2><p>**<code>目标</code>**将打包好的代码打包上线，并在nodejs中代理跨域</p><h3 id="使用koa框架部署项目"><a href="#使用koa框架部署项目" class="headerlink" title="使用koa框架部署项目"></a>使用koa框架部署项目</h3><blockquote><p>到现在为止，我们已经完成了一个前端工程师的开发流程，按照常规的做法，此时，运维会将我们的代码部署到阿里云的ngix服务上，对于我们而言，我们可以将其部署到本机的nodejs环境中</p></blockquote><p>部署 自动化部署 &#x2F;手动部署</p><p>第一步，建立web服务文件夹  <strong><code>hrServer</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> hrServer <span class="comment">#建立hrServer文件夹 </span></span><br></pre></td></tr></table></figure><p>第二步，在该文件夹下，初始化npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><p>第三步，安装服务端框架koa(也可以采用express或者egg)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i koa koa-static</span><br></pre></td></tr></table></figure><p>第四步，拷贝上小节打包的dist目录到**<code>hrServer/public</code>**下</p><p>第五步，在根目录下创建app.js，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span>  = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)  <span class="comment">// 引入Koa包</span></span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();  <span class="comment">// 实例化一个web服务</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(__dirname + <span class="string">&quot;/public&quot;</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3333</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人资项目启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>node app</p><p>此时，我们可以访问，<a href="http://localhost:3333/">http://localhost:3333</a></p></blockquote><p>页面出来了</p><h3 id="解决history页面404问题"><a href="#解决history页面404问题" class="headerlink" title="解决history页面404问题"></a>解决history页面404问题</h3><p>但是，此时存在两个问题，</p><ol><li><strong>当我们刷新页面，发现404</strong></li></ol><blockquote><p>  这是因为我们采用了history的模式，地址的变化会引起服务器的刷新，我们只需要在app.js对所有的地址进行一下处理即可</p></blockquote><p>安装 koa中间件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i koa2-connect-history-api-fallback <span class="comment">#专门处理history模式的中间件</span></span><br></pre></td></tr></table></figure><p><strong>注册中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span>  = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span>  &#123; historyApiFallback &#125; = <span class="built_in">require</span>(<span class="string">&#x27;koa2-connect-history-api-fallback&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="comment">// 这句话 的意思是除接口之外所有的请求都发送给了 index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">historyApiFallback</span>(&#123;      <span class="comment">//应该先使用 处理访问的中间件 再使用静态化服务</span></span><br><span class="line">     <span class="attr">whiteList</span>: [<span class="string">&#x27;/prod-api&#x27;</span>]  <span class="comment">//prod-api代理跨域的问题  表示不要帮我处理 /prod-api 由自己处理</span></span><br><span class="line"> &#125;));  <span class="comment">// 这里的whiteList是 白名单的意思</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(__dirname + <span class="string">&quot;/public&quot;</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3333</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人资项目启动http://localhost:3333&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决生产环境跨域问题"><a href="#解决生产环境跨域问题" class="headerlink" title="解决生产环境跨域问题"></a>解决生产环境跨域问题</h3><ol><li>当点击登录时，发现接口404</li></ol><blockquote><p>  前面我们讲过，vue-cli的代理只存在于开发期，当我们上线到node环境或者ngix环境时，需要我们再次在环境中代理</p></blockquote><p>在nodejs中代理</p><p>安装跨域代理中间件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i koa2-proxy-middleware</span><br></pre></td></tr></table></figure><p>配置跨越代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; historyApiFallback &#125; = <span class="built_in">require</span>(<span class="string">&#x27;koa2-connect-history-api-fallback&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;koa2-proxy-middleware&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册跨域代理的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">proxy</span>(&#123;</span><br><span class="line">    <span class="attr">targets</span>: &#123;</span><br><span class="line">        <span class="comment">// 代理哪个地址  代理以 &#x27;/prod-api&#x27;为开头的地址</span></span><br><span class="line">        <span class="string">&#x27;/prod-api/(.*)&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;https://heimahr.itheima.net/api&#x27;</span>, <span class="comment">// 将以prod/api开头的内容代理到该地址  后端服务器地址</span></span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;/prod-api&#x27;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这句话 的意思是除接口之外所有的请求都发送给了 index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">historyApiFallback</span>(&#123; <span class="comment">//应该先使用 处理访问的中间件 再使用静态化服务</span></span><br><span class="line">    <span class="attr">whiteList</span>: [<span class="string">&#x27;/prod-api&#x27;</span>] <span class="comment">// prod-api代理跨域的问题  表示不要帮我处理 /prod-api 由自己处理</span></span><br><span class="line">&#125;)); <span class="comment">// 这里的whiteList是 白名单的意思</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(__dirname + <span class="string">&quot;/public&quot;</span>)); <span class="comment">//将public下的代码静态化</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3333</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人资项目启动http://localhost:3333&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：这里之所以用了<strong>pathRewrite</strong>，是因为生产环境的请求基础地址是 <strong>&#x2F;prod-api</strong>，需要将该地址去掉</p><p>此时，我们的项目就可以跨域访问了！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阳光不错，微风正好</title>
      <link href="/posts/b313554c.html"/>
      <url>/posts/b313554c.html</url>
      
        <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><p>  一生的时间很短<br>  短到不过是两颗心之间的距离<br>  一生的时间也很长<br>  不如我们试着走走看</p>  <button type="button" onclick="SAONotify('Update','link start...','location.reload(true);')">SAO刷新按钮</button>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
